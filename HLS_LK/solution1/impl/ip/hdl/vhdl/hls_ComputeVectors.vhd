-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.3
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity hls_ComputeVectors is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    A11_img_V_dout : IN STD_LOGIC_VECTOR (33 downto 0);
    A11_img_V_empty_n : IN STD_LOGIC;
    A11_img_V_read : OUT STD_LOGIC;
    A12_img_V_dout : IN STD_LOGIC_VECTOR (33 downto 0);
    A12_img_V_empty_n : IN STD_LOGIC;
    A12_img_V_read : OUT STD_LOGIC;
    A22_img_V_dout : IN STD_LOGIC_VECTOR (33 downto 0);
    A22_img_V_empty_n : IN STD_LOGIC;
    A22_img_V_read : OUT STD_LOGIC;
    B1_img_V_dout : IN STD_LOGIC_VECTOR (33 downto 0);
    B1_img_V_empty_n : IN STD_LOGIC;
    B1_img_V_read : OUT STD_LOGIC;
    B2_img_V_dout : IN STD_LOGIC_VECTOR (33 downto 0);
    B2_img_V_empty_n : IN STD_LOGIC;
    B2_img_V_read : OUT STD_LOGIC;
    vx_img_TDATA : OUT STD_LOGIC_VECTOR (7 downto 0);
    vx_img_TVALID : OUT STD_LOGIC;
    vx_img_TREADY : IN STD_LOGIC;
    vx_img_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
    vy_img_TDATA : OUT STD_LOGIC_VECTOR (7 downto 0);
    vy_img_TVALID : OUT STD_LOGIC;
    vy_img_TREADY : IN STD_LOGIC;
    vy_img_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
    height_dout : IN STD_LOGIC_VECTOR (15 downto 0);
    height_empty_n : IN STD_LOGIC;
    height_read : OUT STD_LOGIC;
    width_dout : IN STD_LOGIC_VECTOR (15 downto 0);
    width_empty_n : IN STD_LOGIC;
    width_read : OUT STD_LOGIC;
    ap_return : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of hls_ComputeVectors is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_ST_fsm_state33 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv32_41000000 : STD_LOGIC_VECTOR (31 downto 0) := "01000001000000000000000000000000";
    constant ap_const_lv32_3F800000 : STD_LOGIC_VECTOR (31 downto 0) := "00111111100000000000000000000000";
    constant ap_const_lv17_1FFFF : STD_LOGIC_VECTOR (16 downto 0) := "11111111111111111";
    constant ap_const_lv16_1 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000001";
    constant ap_const_lv68_0 : STD_LOGIC_VECTOR (67 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv34_0 : STD_LOGIC_VECTOR (33 downto 0) := "0000000000000000000000000000000000";
    constant ap_const_lv36_0 : STD_LOGIC_VECTOR (35 downto 0) := "000000000000000000000000000000000000";
    constant ap_const_lv68_79 : STD_LOGIC_VECTOR (67 downto 0) := "00000000000000000000000000000000000000000000000000000000000001111001";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv9_181 : STD_LOGIC_VECTOR (8 downto 0) := "110000001";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv8_7F : STD_LOGIC_VECTOR (7 downto 0) := "01111111";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";

    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (2 downto 0) := "001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal vx_img_V_data_V_1_data_out : STD_LOGIC_VECTOR (7 downto 0);
    signal vx_img_V_data_V_1_vld_in : STD_LOGIC;
    signal vx_img_V_data_V_1_vld_out : STD_LOGIC;
    signal vx_img_V_data_V_1_ack_in : STD_LOGIC;
    signal vx_img_V_data_V_1_ack_out : STD_LOGIC;
    signal vx_img_V_data_V_1_payload_A : STD_LOGIC_VECTOR (7 downto 0);
    signal vx_img_V_data_V_1_payload_B : STD_LOGIC_VECTOR (7 downto 0);
    signal vx_img_V_data_V_1_sel_rd : STD_LOGIC := '0';
    signal vx_img_V_data_V_1_sel_wr : STD_LOGIC := '0';
    signal vx_img_V_data_V_1_sel : STD_LOGIC;
    signal vx_img_V_data_V_1_load_A : STD_LOGIC;
    signal vx_img_V_data_V_1_load_B : STD_LOGIC;
    signal vx_img_V_data_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal vx_img_V_data_V_1_state_cmp_full : STD_LOGIC;
    signal vx_img_V_last_V_1_data_out : STD_LOGIC_VECTOR (0 downto 0);
    signal vx_img_V_last_V_1_vld_in : STD_LOGIC;
    signal vx_img_V_last_V_1_vld_out : STD_LOGIC;
    signal vx_img_V_last_V_1_ack_in : STD_LOGIC;
    signal vx_img_V_last_V_1_ack_out : STD_LOGIC;
    signal vx_img_V_last_V_1_payload_A : STD_LOGIC_VECTOR (0 downto 0);
    signal vx_img_V_last_V_1_payload_B : STD_LOGIC_VECTOR (0 downto 0);
    signal vx_img_V_last_V_1_sel_rd : STD_LOGIC := '0';
    signal vx_img_V_last_V_1_sel_wr : STD_LOGIC := '0';
    signal vx_img_V_last_V_1_sel : STD_LOGIC;
    signal vx_img_V_last_V_1_load_A : STD_LOGIC;
    signal vx_img_V_last_V_1_load_B : STD_LOGIC;
    signal vx_img_V_last_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal vx_img_V_last_V_1_state_cmp_full : STD_LOGIC;
    signal vy_img_V_data_V_1_data_out : STD_LOGIC_VECTOR (7 downto 0);
    signal vy_img_V_data_V_1_vld_in : STD_LOGIC;
    signal vy_img_V_data_V_1_vld_out : STD_LOGIC;
    signal vy_img_V_data_V_1_ack_in : STD_LOGIC;
    signal vy_img_V_data_V_1_ack_out : STD_LOGIC;
    signal vy_img_V_data_V_1_payload_A : STD_LOGIC_VECTOR (7 downto 0);
    signal vy_img_V_data_V_1_payload_B : STD_LOGIC_VECTOR (7 downto 0);
    signal vy_img_V_data_V_1_sel_rd : STD_LOGIC := '0';
    signal vy_img_V_data_V_1_sel_wr : STD_LOGIC := '0';
    signal vy_img_V_data_V_1_sel : STD_LOGIC;
    signal vy_img_V_data_V_1_load_A : STD_LOGIC;
    signal vy_img_V_data_V_1_load_B : STD_LOGIC;
    signal vy_img_V_data_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal vy_img_V_data_V_1_state_cmp_full : STD_LOGIC;
    signal vy_img_V_last_V_1_data_out : STD_LOGIC_VECTOR (0 downto 0);
    signal vy_img_V_last_V_1_vld_in : STD_LOGIC;
    signal vy_img_V_last_V_1_vld_out : STD_LOGIC;
    signal vy_img_V_last_V_1_ack_in : STD_LOGIC;
    signal vy_img_V_last_V_1_ack_out : STD_LOGIC;
    signal vy_img_V_last_V_1_payload_A : STD_LOGIC_VECTOR (0 downto 0);
    signal vy_img_V_last_V_1_payload_B : STD_LOGIC_VECTOR (0 downto 0);
    signal vy_img_V_last_V_1_sel_rd : STD_LOGIC := '0';
    signal vy_img_V_last_V_1_sel_wr : STD_LOGIC := '0';
    signal vy_img_V_last_V_1_sel : STD_LOGIC;
    signal vy_img_V_last_V_1_load_A : STD_LOGIC;
    signal vy_img_V_last_V_1_load_B : STD_LOGIC;
    signal vy_img_V_last_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal vy_img_V_last_V_1_state_cmp_full : STD_LOGIC;
    signal A11_img_V_blk_n : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal exitcond_flatten_reg_938 : STD_LOGIC_VECTOR (0 downto 0);
    signal A12_img_V_blk_n : STD_LOGIC;
    signal A22_img_V_blk_n : STD_LOGIC;
    signal B1_img_V_blk_n : STD_LOGIC;
    signal B2_img_V_blk_n : STD_LOGIC;
    signal vx_img_TDATA_blk_n : STD_LOGIC;
    signal ap_enable_reg_pp0_iter29 : STD_LOGIC := '0';
    signal exitcond_flatten_reg_938_pp0_iter28_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_reg_pp0_iter30 : STD_LOGIC := '0';
    signal exitcond_flatten_reg_938_pp0_iter29_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal vy_img_TDATA_blk_n : STD_LOGIC;
    signal height_blk_n : STD_LOGIC;
    signal width_blk_n : STD_LOGIC;
    signal indvar_flatten_reg_264 : STD_LOGIC_VECTOR (31 downto 0);
    signal row_i_reg_275 : STD_LOGIC_VECTOR (15 downto 0);
    signal col_i_reg_286 : STD_LOGIC_VECTOR (15 downto 0);
    signal cnt_1_i_reg_297 : STD_LOGIC_VECTOR (31 downto 0);
    signal width_read_reg_917 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal tmp_i_fu_345_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_i_reg_922 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_66_i_fu_355_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_66_i_reg_928 : STD_LOGIC_VECTOR (16 downto 0);
    signal bound_fu_911_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal bound_reg_933 : STD_LOGIC_VECTOR (31 downto 0);
    signal exitcond_flatten_fu_378_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state2_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter5 : BOOLEAN;
    signal ap_block_state8_pp0_stage0_iter6 : BOOLEAN;
    signal ap_block_state9_pp0_stage0_iter7 : BOOLEAN;
    signal ap_block_state10_pp0_stage0_iter8 : BOOLEAN;
    signal ap_block_state11_pp0_stage0_iter9 : BOOLEAN;
    signal ap_block_state12_pp0_stage0_iter10 : BOOLEAN;
    signal ap_block_state13_pp0_stage0_iter11 : BOOLEAN;
    signal ap_block_state14_pp0_stage0_iter12 : BOOLEAN;
    signal ap_block_state15_pp0_stage0_iter13 : BOOLEAN;
    signal ap_block_state16_pp0_stage0_iter14 : BOOLEAN;
    signal ap_block_state17_pp0_stage0_iter15 : BOOLEAN;
    signal ap_block_state18_pp0_stage0_iter16 : BOOLEAN;
    signal ap_block_state19_pp0_stage0_iter17 : BOOLEAN;
    signal ap_block_state20_pp0_stage0_iter18 : BOOLEAN;
    signal ap_block_state21_pp0_stage0_iter19 : BOOLEAN;
    signal ap_block_state22_pp0_stage0_iter20 : BOOLEAN;
    signal ap_block_state23_pp0_stage0_iter21 : BOOLEAN;
    signal ap_block_state24_pp0_stage0_iter22 : BOOLEAN;
    signal ap_block_state25_pp0_stage0_iter23 : BOOLEAN;
    signal ap_block_state26_pp0_stage0_iter24 : BOOLEAN;
    signal ap_block_state27_pp0_stage0_iter25 : BOOLEAN;
    signal ap_block_state28_pp0_stage0_iter26 : BOOLEAN;
    signal ap_block_state29_pp0_stage0_iter27 : BOOLEAN;
    signal ap_block_state30_pp0_stage0_iter28 : BOOLEAN;
    signal ap_block_state31_pp0_stage0_iter29 : BOOLEAN;
    signal ap_block_state31_io : BOOLEAN;
    signal ap_block_state32_pp0_stage0_iter30 : BOOLEAN;
    signal ap_block_state32_io : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal exitcond_flatten_reg_938_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_flatten_reg_938_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_flatten_reg_938_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_flatten_reg_938_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_flatten_reg_938_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_flatten_reg_938_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_flatten_reg_938_pp0_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_flatten_reg_938_pp0_iter8_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_flatten_reg_938_pp0_iter9_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_flatten_reg_938_pp0_iter10_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_flatten_reg_938_pp0_iter11_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_flatten_reg_938_pp0_iter12_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_flatten_reg_938_pp0_iter13_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_flatten_reg_938_pp0_iter14_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_flatten_reg_938_pp0_iter15_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_flatten_reg_938_pp0_iter16_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_flatten_reg_938_pp0_iter17_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_flatten_reg_938_pp0_iter18_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_flatten_reg_938_pp0_iter19_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_flatten_reg_938_pp0_iter20_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_flatten_reg_938_pp0_iter21_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_flatten_reg_938_pp0_iter22_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_flatten_reg_938_pp0_iter23_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_flatten_reg_938_pp0_iter24_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_flatten_reg_938_pp0_iter25_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_flatten_reg_938_pp0_iter26_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_flatten_reg_938_pp0_iter27_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal indvar_flatten_next_fu_383_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal row_i_mid2_fu_425_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal packy_last_V_fu_442_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal packy_last_V_reg_952 : STD_LOGIC_VECTOR (0 downto 0);
    signal packy_last_V_reg_952_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal packy_last_V_reg_952_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal packy_last_V_reg_952_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal packy_last_V_reg_952_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal packy_last_V_reg_952_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal packy_last_V_reg_952_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal packy_last_V_reg_952_pp0_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal packy_last_V_reg_952_pp0_iter8_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal packy_last_V_reg_952_pp0_iter9_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal packy_last_V_reg_952_pp0_iter10_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal packy_last_V_reg_952_pp0_iter11_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal packy_last_V_reg_952_pp0_iter12_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal packy_last_V_reg_952_pp0_iter13_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal packy_last_V_reg_952_pp0_iter14_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal packy_last_V_reg_952_pp0_iter15_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal packy_last_V_reg_952_pp0_iter16_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal packy_last_V_reg_952_pp0_iter17_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal packy_last_V_reg_952_pp0_iter18_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal packy_last_V_reg_952_pp0_iter19_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal packy_last_V_reg_952_pp0_iter20_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal packy_last_V_reg_952_pp0_iter21_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal packy_last_V_reg_952_pp0_iter22_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal packy_last_V_reg_952_pp0_iter23_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal packy_last_V_reg_952_pp0_iter24_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal packy_last_V_reg_952_pp0_iter25_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal packy_last_V_reg_952_pp0_iter26_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal packy_last_V_reg_952_pp0_iter27_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal packy_last_V_reg_952_pp0_iter28_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal col_fu_448_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal A_0_0_V_reg_963 : STD_LOGIC_VECTOR (33 downto 0);
    signal A_0_0_V_reg_963_pp0_iter2_reg : STD_LOGIC_VECTOR (33 downto 0);
    signal A_0_1_V_reg_969 : STD_LOGIC_VECTOR (33 downto 0);
    signal A_0_1_V_reg_969_pp0_iter2_reg : STD_LOGIC_VECTOR (33 downto 0);
    signal A_1_1_V_reg_975 : STD_LOGIC_VECTOR (33 downto 0);
    signal A_1_1_V_reg_975_pp0_iter2_reg : STD_LOGIC_VECTOR (33 downto 0);
    signal A_1_1_V_reg_975_pp0_iter3_reg : STD_LOGIC_VECTOR (33 downto 0);
    signal B_0_V_reg_981 : STD_LOGIC_VECTOR (33 downto 0);
    signal B_0_V_reg_981_pp0_iter2_reg : STD_LOGIC_VECTOR (33 downto 0);
    signal B_0_V_reg_981_pp0_iter3_reg : STD_LOGIC_VECTOR (33 downto 0);
    signal B_1_V_reg_986 : STD_LOGIC_VECTOR (33 downto 0);
    signal B_1_V_reg_986_pp0_iter2_reg : STD_LOGIC_VECTOR (33 downto 0);
    signal B_1_V_reg_986_pp0_iter3_reg : STD_LOGIC_VECTOR (33 downto 0);
    signal a_x_d_V_fu_460_p2 : STD_LOGIC_VECTOR (67 downto 0);
    signal a_x_d_V_reg_991 : STD_LOGIC_VECTOR (67 downto 0);
    signal b_x_c_V_fu_469_p2 : STD_LOGIC_VECTOR (67 downto 0);
    signal b_x_c_V_reg_997 : STD_LOGIC_VECTOR (67 downto 0);
    signal tmp_26_i_i_fu_504_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_26_i_i_reg_1008 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_26_i_i_reg_1008_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_26_i_i_reg_1008_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_26_i_i_reg_1008_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_26_i_i_reg_1008_pp0_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_26_i_i_reg_1008_pp0_iter8_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_26_i_i_reg_1008_pp0_iter9_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_26_i_i_reg_1008_pp0_iter10_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_26_i_i_reg_1008_pp0_iter11_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_26_i_i_reg_1008_pp0_iter12_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_26_i_i_reg_1008_pp0_iter13_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_26_i_i_reg_1008_pp0_iter14_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_26_i_i_reg_1008_pp0_iter15_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_26_i_i_reg_1008_pp0_iter16_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_26_i_i_reg_1008_pp0_iter17_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_26_i_i_reg_1008_pp0_iter18_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_26_i_i_reg_1008_pp0_iter19_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_26_i_i_reg_1008_pp0_iter20_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_27_i_i_fu_508_p2 : STD_LOGIC_VECTOR (33 downto 0);
    signal tmp_27_i_i_reg_1013 : STD_LOGIC_VECTOR (33 downto 0);
    signal tmp_37_i_i_fu_530_p2 : STD_LOGIC_VECTOR (35 downto 0);
    signal tmp_37_i_i_reg_1018 : STD_LOGIC_VECTOR (35 downto 0);
    signal invertible_demorgan_fu_542_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal invertible_demorgan_reg_1023 : STD_LOGIC_VECTOR (0 downto 0);
    signal invertible_demorgan_reg_1023_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal invertible_demorgan_reg_1023_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal invertible_demorgan_reg_1023_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal invertible_demorgan_reg_1023_pp0_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal invertible_demorgan_reg_1023_pp0_iter8_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal invertible_demorgan_reg_1023_pp0_iter9_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal invertible_demorgan_reg_1023_pp0_iter10_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal invertible_demorgan_reg_1023_pp0_iter11_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal invertible_demorgan_reg_1023_pp0_iter12_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal invertible_demorgan_reg_1023_pp0_iter13_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal invertible_demorgan_reg_1023_pp0_iter14_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal invertible_demorgan_reg_1023_pp0_iter15_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal invertible_demorgan_reg_1023_pp0_iter16_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal invertible_demorgan_reg_1023_pp0_iter17_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal invertible_demorgan_reg_1023_pp0_iter18_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal invertible_demorgan_reg_1023_pp0_iter19_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal invertible_demorgan_reg_1023_pp0_iter20_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal invertible_demorgan_reg_1023_pp0_iter21_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal invertible_demorgan_reg_1023_pp0_iter22_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal invertible_demorgan_reg_1023_pp0_iter23_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal invertible_demorgan_reg_1023_pp0_iter24_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal invertible_demorgan_reg_1023_pp0_iter25_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal invertible_demorgan_reg_1023_pp0_iter26_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal invertible_demorgan_reg_1023_pp0_iter27_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_30_i_i_fu_554_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_30_i_i_reg_1030 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_33_i_i_fu_566_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_33_i_i_reg_1035 : STD_LOGIC_VECTOR (63 downto 0);
    signal op2_2_fu_575_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal op2_2_reg_1040 : STD_LOGIC_VECTOR (63 downto 0);
    signal cnt_fu_590_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal cnt_reg_1045 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal grp_fu_332_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_25_i_i_reg_1055 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_335_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_38_i_i_reg_1060 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_38_i_i_reg_1060_pp0_iter11_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_38_i_i_reg_1060_pp0_iter12_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_38_i_i_reg_1060_pp0_iter13_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_38_i_i_reg_1060_pp0_iter14_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_38_i_i_reg_1060_pp0_iter15_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_38_i_i_reg_1060_pp0_iter16_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_38_i_i_reg_1060_pp0_iter17_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_38_i_i_reg_1060_pp0_iter18_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_38_i_i_reg_1060_pp0_iter19_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_38_i_i_reg_1060_pp0_iter20_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_338_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_40_i_i_reg_1065 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_40_i_i_reg_1065_pp0_iter11_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_40_i_i_reg_1065_pp0_iter12_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_40_i_i_reg_1065_pp0_iter13_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_40_i_i_reg_1065_pp0_iter14_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_40_i_i_reg_1065_pp0_iter15_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_40_i_i_reg_1065_pp0_iter16_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_40_i_i_reg_1065_pp0_iter17_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_40_i_i_reg_1065_pp0_iter18_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_40_i_i_reg_1065_pp0_iter19_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_40_i_i_reg_1065_pp0_iter20_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_327_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal recipr_det_A_reg_1070 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_op_assign_fu_607_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_309_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_39_i_i_reg_1081 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_313_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_41_i_i_reg_1086 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_s_reg_1091 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_V_reg_1096 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_V_1_fu_644_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal tmp_V_1_reg_1102 : STD_LOGIC_VECTOR (22 downto 0);
    signal p_Result_1_reg_1107 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_V_2_reg_1112 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_V_3_fu_677_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal tmp_V_3_reg_1118 : STD_LOGIC_VECTOR (22 downto 0);
    signal packx_data_V_fu_788_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal packy_data_V_fu_903_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state2 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter7 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter8 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter9 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter10 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter11 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter12 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter13 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter14 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter15 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter16 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter17 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter18 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter19 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter20 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter21 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter22 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter23 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter24 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter25 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter26 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter27 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter28 : STD_LOGIC := '0';
    signal ap_phi_mux_cnt_1_i_phi_fu_301_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal grp_fu_332_p0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_335_p0 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_cast_i_fu_341_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_65_cast_i_fu_351_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_67_cast_i_fu_369_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal exitcond_i6_fu_389_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal row3_fu_402_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_67_cast_i_mid1_fu_408_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_69_i_mid1_fu_412_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_69_i_fu_373_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal col_i_mid2_fu_394_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_70_cast_i_fu_433_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_69_i_mid2_fu_417_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_75_i_fu_437_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal a_x_d_V_fu_460_p0 : STD_LOGIC_VECTOR (33 downto 0);
    signal a_x_d_V_fu_460_p1 : STD_LOGIC_VECTOR (33 downto 0);
    signal b_x_c_V_fu_469_p0 : STD_LOGIC_VECTOR (33 downto 0);
    signal tmp_23_i_i_fu_466_p1 : STD_LOGIC_VECTOR (67 downto 0);
    signal b_x_c_V_fu_469_p1 : STD_LOGIC_VECTOR (33 downto 0);
    signal ret_V_fu_475_p2 : STD_LOGIC_VECTOR (67 downto 0);
    signal tmp_24_i_i_fu_485_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal neg_det_A_V_fu_479_p2 : STD_LOGIC_VECTOR (67 downto 0);
    signal tmp_34_i_cast_i_fu_517_p1 : STD_LOGIC_VECTOR (34 downto 0);
    signal tmp_31_i_cast_i_fu_513_p1 : STD_LOGIC_VECTOR (34 downto 0);
    signal tmp_36_i_i_fu_520_p2 : STD_LOGIC_VECTOR (34 downto 0);
    signal tmp_36_i_cast_i_fu_526_p1 : STD_LOGIC_VECTOR (35 downto 0);
    signal abs_det_A_V_fu_491_p3 : STD_LOGIC_VECTOR (67 downto 0);
    signal tmp_42_i_i_fu_536_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_30_i_i_fu_554_p0 : STD_LOGIC_VECTOR (33 downto 0);
    signal tmp_30_i_i_fu_554_p1 : STD_LOGIC_VECTOR (33 downto 0);
    signal tmp_33_i_i_fu_566_p0 : STD_LOGIC_VECTOR (33 downto 0);
    signal tmp_33_i_i_fu_566_p1 : STD_LOGIC_VECTOR (33 downto 0);
    signal tmp_32_i_i_fu_563_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal op2_2_fu_575_p0 : STD_LOGIC_VECTOR (33 downto 0);
    signal op2_2_fu_575_p1 : STD_LOGIC_VECTOR (35 downto 0);
    signal invertible_fu_581_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_73_i_fu_586_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_35_i_i_fu_596_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_317_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_fu_615_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Val2_s_fu_619_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_322_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_s_fu_648_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Val2_2_fu_652_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal mantissa_V_fu_681_p4 : STD_LOGIC_VECTOR (24 downto 0);
    signal tmp_i_i_i_i_cast_i_fu_694_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal sh_assign_fu_697_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_i_i_i_i_fu_711_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal isNeg_fu_703_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_i_i_i_cast_i_fu_716_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal ush_fu_720_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal sh_assign_2_i_i_i_ca_fu_728_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sh_assign_2_i_i_i_ca_1_fu_732_p1 : STD_LOGIC_VECTOR (24 downto 0);
    signal mantissa_V_1_i_i_i_c_fu_690_p1 : STD_LOGIC_VECTOR (62 downto 0);
    signal tmp_i_i_i_i_51_fu_736_p1 : STD_LOGIC_VECTOR (62 downto 0);
    signal r_V_fu_740_p2 : STD_LOGIC_VECTOR (24 downto 0);
    signal tmp_71_fu_752_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal r_V_1_fu_746_p2 : STD_LOGIC_VECTOR (62 downto 0);
    signal tmp_64_fu_760_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_65_fu_764_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_66_fu_774_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal result_V_1_fu_782_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal mantissa_V_1_fu_796_p4 : STD_LOGIC_VECTOR (24 downto 0);
    signal tmp_i_i_i_i41_cast_i_fu_809_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal sh_assign_3_fu_812_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_i_i_i44_i_fu_826_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal isNeg_1_fu_818_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_i_i_i44_cast_i_fu_831_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal ush_1_fu_835_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal sh_assign_2_i_i_i45_s_fu_843_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sh_assign_2_i_i_i45_1_fu_847_p1 : STD_LOGIC_VECTOR (24 downto 0);
    signal mantissa_V_1_i_i_i_fu_805_p1 : STD_LOGIC_VECTOR (62 downto 0);
    signal tmp_i_i_i46_i_fu_851_p1 : STD_LOGIC_VECTOR (62 downto 0);
    signal r_V_2_fu_855_p2 : STD_LOGIC_VECTOR (24 downto 0);
    signal tmp_75_fu_867_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal r_V_3_fu_861_p2 : STD_LOGIC_VECTOR (62 downto 0);
    signal tmp_67_fu_875_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_68_fu_879_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_69_fu_889_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal result_V_3_fu_897_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal bound_fu_911_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal bound_fu_911_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_309_ce : STD_LOGIC;
    signal grp_fu_313_ce : STD_LOGIC;
    signal grp_fu_317_ce : STD_LOGIC;
    signal grp_fu_322_ce : STD_LOGIC;
    signal grp_fu_327_ce : STD_LOGIC;
    signal grp_fu_332_ce : STD_LOGIC;
    signal grp_fu_335_ce : STD_LOGIC;
    signal grp_fu_338_ce : STD_LOGIC;
    signal ap_CS_fsm_state33 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state33 : signal is "none";
    signal ap_block_state33 : BOOLEAN;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal bound_fu_911_p00 : STD_LOGIC_VECTOR (31 downto 0);
    signal bound_fu_911_p10 : STD_LOGIC_VECTOR (31 downto 0);

    component hls_LK_fmul_32ns_32ns_32_4_max_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component hls_LK_fdiv_32ns_32ns_32_12_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component hls_LK_sitofp_64ns_32_6_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component hls_LK_mul_mul_16ns_16ns_32_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    hls_LK_fmul_32ns_32ns_32_4_max_dsp_1_U83 : component hls_LK_fmul_32ns_32ns_32_4_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_38_i_i_reg_1060_pp0_iter20_reg,
        din1 => i_op_assign_fu_607_p3,
        ce => grp_fu_309_ce,
        dout => grp_fu_309_p2);

    hls_LK_fmul_32ns_32ns_32_4_max_dsp_1_U84 : component hls_LK_fmul_32ns_32ns_32_4_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_40_i_i_reg_1065_pp0_iter20_reg,
        din1 => i_op_assign_fu_607_p3,
        ce => grp_fu_313_ce,
        dout => grp_fu_313_p2);

    hls_LK_fmul_32ns_32ns_32_4_max_dsp_1_U85 : component hls_LK_fmul_32ns_32ns_32_4_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_39_i_i_reg_1081,
        din1 => ap_const_lv32_41000000,
        ce => grp_fu_317_ce,
        dout => grp_fu_317_p2);

    hls_LK_fmul_32ns_32ns_32_4_max_dsp_1_U86 : component hls_LK_fmul_32ns_32ns_32_4_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_41_i_i_reg_1086,
        din1 => ap_const_lv32_41000000,
        ce => grp_fu_322_ce,
        dout => grp_fu_322_p2);

    hls_LK_fdiv_32ns_32ns_32_12_1_U87 : component hls_LK_fdiv_32ns_32ns_32_12_1
    generic map (
        ID => 1,
        NUM_STAGE => 12,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => ap_const_lv32_3F800000,
        din1 => tmp_25_i_i_reg_1055,
        ce => grp_fu_327_ce,
        dout => grp_fu_327_p2);

    hls_LK_sitofp_64ns_32_6_1_U88 : component hls_LK_sitofp_64ns_32_6_1
    generic map (
        ID => 1,
        NUM_STAGE => 6,
        din0_WIDTH => 64,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_332_p0,
        ce => grp_fu_332_ce,
        dout => grp_fu_332_p1);

    hls_LK_sitofp_64ns_32_6_1_U89 : component hls_LK_sitofp_64ns_32_6_1
    generic map (
        ID => 1,
        NUM_STAGE => 6,
        din0_WIDTH => 64,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_335_p0,
        ce => grp_fu_335_ce,
        dout => grp_fu_335_p1);

    hls_LK_sitofp_64ns_32_6_1_U90 : component hls_LK_sitofp_64ns_32_6_1
    generic map (
        ID => 1,
        NUM_STAGE => 6,
        din0_WIDTH => 64,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => op2_2_reg_1040,
        ce => grp_fu_338_ce,
        dout => grp_fu_338_p1);

    hls_LK_mul_mul_16ns_16ns_32_1_1_U91 : component hls_LK_mul_mul_16ns_16ns_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 32)
    port map (
        din0 => bound_fu_911_p0,
        din1 => bound_fu_911_p1,
        dout => bound_fu_911_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif ((not(((vx_img_V_data_V_1_ack_in = ap_const_logic_0) or (vy_img_V_last_V_1_ack_in = ap_const_logic_0) or (vy_img_V_data_V_1_ack_in = ap_const_logic_0) or (vx_img_V_last_V_1_ack_in = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state33))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif ((not(((ap_start = ap_const_logic_0) or (width_empty_n = ap_const_logic_0) or (height_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2)) then 
                        ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state2);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter10_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter10 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter11_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter11 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter12_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter12 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter12 <= ap_enable_reg_pp0_iter11;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter13_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter13 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter13 <= ap_enable_reg_pp0_iter12;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter14_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter14 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter14 <= ap_enable_reg_pp0_iter13;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter15_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter15 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter15 <= ap_enable_reg_pp0_iter14;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter16_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter16 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter16 <= ap_enable_reg_pp0_iter15;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter17_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter17 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter17 <= ap_enable_reg_pp0_iter16;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter18_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter18 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter18 <= ap_enable_reg_pp0_iter17;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter19_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter19 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter19 <= ap_enable_reg_pp0_iter18;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter20_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter20 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter20 <= ap_enable_reg_pp0_iter19;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter21_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter21 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter21 <= ap_enable_reg_pp0_iter20;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter22_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter22 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter22 <= ap_enable_reg_pp0_iter21;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter23_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter23 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter23 <= ap_enable_reg_pp0_iter22;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter24_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter24 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter24 <= ap_enable_reg_pp0_iter23;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter25_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter25 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter25 <= ap_enable_reg_pp0_iter24;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter26_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter26 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter26 <= ap_enable_reg_pp0_iter25;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter27_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter27 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter27 <= ap_enable_reg_pp0_iter26;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter28_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter28 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter28 <= ap_enable_reg_pp0_iter27;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter29_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter29 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter29 <= ap_enable_reg_pp0_iter28;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter30_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter30 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter30 <= ap_enable_reg_pp0_iter29;
                elsif ((not(((ap_start = ap_const_logic_0) or (width_empty_n = ap_const_logic_0) or (height_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_enable_reg_pp0_iter30 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter8 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter9_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter9 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
                end if; 
            end if;
        end if;
    end process;


    vx_img_V_data_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                vx_img_V_data_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((vx_img_V_data_V_1_ack_out = ap_const_logic_1) and (vx_img_V_data_V_1_vld_out = ap_const_logic_1))) then 
                                        vx_img_V_data_V_1_sel_rd <= not(vx_img_V_data_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    vx_img_V_data_V_1_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                vx_img_V_data_V_1_sel_wr <= ap_const_logic_0;
            else
                if (((vx_img_V_data_V_1_ack_in = ap_const_logic_1) and (vx_img_V_data_V_1_vld_in = ap_const_logic_1))) then 
                                        vx_img_V_data_V_1_sel_wr <= not(vx_img_V_data_V_1_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    vx_img_V_data_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                vx_img_V_data_V_1_state <= ap_const_lv2_0;
            else
                if ((((vx_img_V_data_V_1_state = ap_const_lv2_2) and (vx_img_V_data_V_1_vld_in = ap_const_logic_0)) or ((vx_img_V_data_V_1_state = ap_const_lv2_3) and (vx_img_V_data_V_1_vld_in = ap_const_logic_0) and (vx_img_V_data_V_1_ack_out = ap_const_logic_1)))) then 
                    vx_img_V_data_V_1_state <= ap_const_lv2_2;
                elsif ((((vx_img_V_data_V_1_state = ap_const_lv2_1) and (vx_img_V_data_V_1_ack_out = ap_const_logic_0)) or ((vx_img_V_data_V_1_state = ap_const_lv2_3) and (vx_img_V_data_V_1_ack_out = ap_const_logic_0) and (vx_img_V_data_V_1_vld_in = ap_const_logic_1)))) then 
                    vx_img_V_data_V_1_state <= ap_const_lv2_1;
                elsif (((not(((vx_img_V_data_V_1_vld_in = ap_const_logic_0) and (vx_img_V_data_V_1_ack_out = ap_const_logic_1))) and not(((vx_img_V_data_V_1_ack_out = ap_const_logic_0) and (vx_img_V_data_V_1_vld_in = ap_const_logic_1))) and (vx_img_V_data_V_1_state = ap_const_lv2_3)) or ((vx_img_V_data_V_1_state = ap_const_lv2_1) and (vx_img_V_data_V_1_ack_out = ap_const_logic_1)) or ((vx_img_V_data_V_1_state = ap_const_lv2_2) and (vx_img_V_data_V_1_vld_in = ap_const_logic_1)))) then 
                    vx_img_V_data_V_1_state <= ap_const_lv2_3;
                else 
                    vx_img_V_data_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    vx_img_V_last_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                vx_img_V_last_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((vx_img_V_last_V_1_ack_out = ap_const_logic_1) and (vx_img_V_last_V_1_vld_out = ap_const_logic_1))) then 
                                        vx_img_V_last_V_1_sel_rd <= not(vx_img_V_last_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    vx_img_V_last_V_1_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                vx_img_V_last_V_1_sel_wr <= ap_const_logic_0;
            else
                if (((vx_img_V_last_V_1_ack_in = ap_const_logic_1) and (vx_img_V_last_V_1_vld_in = ap_const_logic_1))) then 
                                        vx_img_V_last_V_1_sel_wr <= not(vx_img_V_last_V_1_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    vx_img_V_last_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                vx_img_V_last_V_1_state <= ap_const_lv2_0;
            else
                if ((((vx_img_V_last_V_1_state = ap_const_lv2_2) and (vx_img_V_last_V_1_vld_in = ap_const_logic_0)) or ((vx_img_V_last_V_1_state = ap_const_lv2_3) and (vx_img_V_last_V_1_vld_in = ap_const_logic_0) and (vx_img_V_last_V_1_ack_out = ap_const_logic_1)))) then 
                    vx_img_V_last_V_1_state <= ap_const_lv2_2;
                elsif ((((vx_img_V_last_V_1_state = ap_const_lv2_1) and (vx_img_V_last_V_1_ack_out = ap_const_logic_0)) or ((vx_img_V_last_V_1_state = ap_const_lv2_3) and (vx_img_V_last_V_1_ack_out = ap_const_logic_0) and (vx_img_V_last_V_1_vld_in = ap_const_logic_1)))) then 
                    vx_img_V_last_V_1_state <= ap_const_lv2_1;
                elsif (((not(((vx_img_V_last_V_1_vld_in = ap_const_logic_0) and (vx_img_V_last_V_1_ack_out = ap_const_logic_1))) and not(((vx_img_V_last_V_1_ack_out = ap_const_logic_0) and (vx_img_V_last_V_1_vld_in = ap_const_logic_1))) and (vx_img_V_last_V_1_state = ap_const_lv2_3)) or ((vx_img_V_last_V_1_state = ap_const_lv2_1) and (vx_img_V_last_V_1_ack_out = ap_const_logic_1)) or ((vx_img_V_last_V_1_state = ap_const_lv2_2) and (vx_img_V_last_V_1_vld_in = ap_const_logic_1)))) then 
                    vx_img_V_last_V_1_state <= ap_const_lv2_3;
                else 
                    vx_img_V_last_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    vy_img_V_data_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                vy_img_V_data_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((vy_img_V_data_V_1_ack_out = ap_const_logic_1) and (vy_img_V_data_V_1_vld_out = ap_const_logic_1))) then 
                                        vy_img_V_data_V_1_sel_rd <= not(vy_img_V_data_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    vy_img_V_data_V_1_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                vy_img_V_data_V_1_sel_wr <= ap_const_logic_0;
            else
                if (((vy_img_V_data_V_1_ack_in = ap_const_logic_1) and (vy_img_V_data_V_1_vld_in = ap_const_logic_1))) then 
                                        vy_img_V_data_V_1_sel_wr <= not(vy_img_V_data_V_1_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    vy_img_V_data_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                vy_img_V_data_V_1_state <= ap_const_lv2_0;
            else
                if ((((vy_img_V_data_V_1_state = ap_const_lv2_2) and (vy_img_V_data_V_1_vld_in = ap_const_logic_0)) or ((vy_img_V_data_V_1_state = ap_const_lv2_3) and (vy_img_V_data_V_1_vld_in = ap_const_logic_0) and (vy_img_V_data_V_1_ack_out = ap_const_logic_1)))) then 
                    vy_img_V_data_V_1_state <= ap_const_lv2_2;
                elsif ((((vy_img_V_data_V_1_state = ap_const_lv2_1) and (vy_img_V_data_V_1_ack_out = ap_const_logic_0)) or ((vy_img_V_data_V_1_state = ap_const_lv2_3) and (vy_img_V_data_V_1_ack_out = ap_const_logic_0) and (vy_img_V_data_V_1_vld_in = ap_const_logic_1)))) then 
                    vy_img_V_data_V_1_state <= ap_const_lv2_1;
                elsif (((not(((vy_img_V_data_V_1_vld_in = ap_const_logic_0) and (vy_img_V_data_V_1_ack_out = ap_const_logic_1))) and not(((vy_img_V_data_V_1_ack_out = ap_const_logic_0) and (vy_img_V_data_V_1_vld_in = ap_const_logic_1))) and (vy_img_V_data_V_1_state = ap_const_lv2_3)) or ((vy_img_V_data_V_1_state = ap_const_lv2_1) and (vy_img_V_data_V_1_ack_out = ap_const_logic_1)) or ((vy_img_V_data_V_1_state = ap_const_lv2_2) and (vy_img_V_data_V_1_vld_in = ap_const_logic_1)))) then 
                    vy_img_V_data_V_1_state <= ap_const_lv2_3;
                else 
                    vy_img_V_data_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    vy_img_V_last_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                vy_img_V_last_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((vy_img_V_last_V_1_ack_out = ap_const_logic_1) and (vy_img_V_last_V_1_vld_out = ap_const_logic_1))) then 
                                        vy_img_V_last_V_1_sel_rd <= not(vy_img_V_last_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    vy_img_V_last_V_1_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                vy_img_V_last_V_1_sel_wr <= ap_const_logic_0;
            else
                if (((vy_img_V_last_V_1_ack_in = ap_const_logic_1) and (vy_img_V_last_V_1_vld_in = ap_const_logic_1))) then 
                                        vy_img_V_last_V_1_sel_wr <= not(vy_img_V_last_V_1_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    vy_img_V_last_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                vy_img_V_last_V_1_state <= ap_const_lv2_0;
            else
                if ((((vy_img_V_last_V_1_state = ap_const_lv2_2) and (vy_img_V_last_V_1_vld_in = ap_const_logic_0)) or ((vy_img_V_last_V_1_state = ap_const_lv2_3) and (vy_img_V_last_V_1_vld_in = ap_const_logic_0) and (vy_img_V_last_V_1_ack_out = ap_const_logic_1)))) then 
                    vy_img_V_last_V_1_state <= ap_const_lv2_2;
                elsif ((((vy_img_V_last_V_1_state = ap_const_lv2_1) and (vy_img_V_last_V_1_ack_out = ap_const_logic_0)) or ((vy_img_V_last_V_1_state = ap_const_lv2_3) and (vy_img_V_last_V_1_ack_out = ap_const_logic_0) and (vy_img_V_last_V_1_vld_in = ap_const_logic_1)))) then 
                    vy_img_V_last_V_1_state <= ap_const_lv2_1;
                elsif (((not(((vy_img_V_last_V_1_vld_in = ap_const_logic_0) and (vy_img_V_last_V_1_ack_out = ap_const_logic_1))) and not(((vy_img_V_last_V_1_ack_out = ap_const_logic_0) and (vy_img_V_last_V_1_vld_in = ap_const_logic_1))) and (vy_img_V_last_V_1_state = ap_const_lv2_3)) or ((vy_img_V_last_V_1_state = ap_const_lv2_1) and (vy_img_V_last_V_1_ack_out = ap_const_logic_1)) or ((vy_img_V_last_V_1_state = ap_const_lv2_2) and (vy_img_V_last_V_1_vld_in = ap_const_logic_1)))) then 
                    vy_img_V_last_V_1_state <= ap_const_lv2_3;
                else 
                    vy_img_V_last_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    cnt_1_i_reg_297_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_flatten_reg_938_pp0_iter4_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1))) then 
                cnt_1_i_reg_297 <= cnt_reg_1045;
            elsif ((not(((ap_start = ap_const_logic_0) or (width_empty_n = ap_const_logic_0) or (height_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                cnt_1_i_reg_297 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    col_i_reg_286_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_flatten_fu_378_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                col_i_reg_286 <= col_fu_448_p2;
            elsif ((not(((ap_start = ap_const_logic_0) or (width_empty_n = ap_const_logic_0) or (height_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                col_i_reg_286 <= ap_const_lv16_0;
            end if; 
        end if;
    end process;

    indvar_flatten_reg_264_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_flatten_fu_378_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                indvar_flatten_reg_264 <= indvar_flatten_next_fu_383_p2;
            elsif ((not(((ap_start = ap_const_logic_0) or (width_empty_n = ap_const_logic_0) or (height_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                indvar_flatten_reg_264 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    row_i_reg_275_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_flatten_fu_378_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                row_i_reg_275 <= row_i_mid2_fu_425_p3;
            elsif ((not(((ap_start = ap_const_logic_0) or (width_empty_n = ap_const_logic_0) or (height_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                row_i_reg_275 <= ap_const_lv16_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_flatten_reg_938 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                A_0_0_V_reg_963 <= A11_img_V_dout;
                A_0_1_V_reg_969 <= A12_img_V_dout;
                A_1_1_V_reg_975 <= A22_img_V_dout;
                B_0_V_reg_981 <= B1_img_V_dout;
                B_1_V_reg_986 <= B2_img_V_dout;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                A_0_0_V_reg_963_pp0_iter2_reg <= A_0_0_V_reg_963;
                A_0_1_V_reg_969_pp0_iter2_reg <= A_0_1_V_reg_969;
                A_1_1_V_reg_975_pp0_iter2_reg <= A_1_1_V_reg_975;
                A_1_1_V_reg_975_pp0_iter3_reg <= A_1_1_V_reg_975_pp0_iter2_reg;
                B_0_V_reg_981_pp0_iter2_reg <= B_0_V_reg_981;
                B_0_V_reg_981_pp0_iter3_reg <= B_0_V_reg_981_pp0_iter2_reg;
                B_1_V_reg_986_pp0_iter2_reg <= B_1_V_reg_986;
                B_1_V_reg_986_pp0_iter3_reg <= B_1_V_reg_986_pp0_iter2_reg;
                exitcond_flatten_reg_938_pp0_iter10_reg <= exitcond_flatten_reg_938_pp0_iter9_reg;
                exitcond_flatten_reg_938_pp0_iter11_reg <= exitcond_flatten_reg_938_pp0_iter10_reg;
                exitcond_flatten_reg_938_pp0_iter12_reg <= exitcond_flatten_reg_938_pp0_iter11_reg;
                exitcond_flatten_reg_938_pp0_iter13_reg <= exitcond_flatten_reg_938_pp0_iter12_reg;
                exitcond_flatten_reg_938_pp0_iter14_reg <= exitcond_flatten_reg_938_pp0_iter13_reg;
                exitcond_flatten_reg_938_pp0_iter15_reg <= exitcond_flatten_reg_938_pp0_iter14_reg;
                exitcond_flatten_reg_938_pp0_iter16_reg <= exitcond_flatten_reg_938_pp0_iter15_reg;
                exitcond_flatten_reg_938_pp0_iter17_reg <= exitcond_flatten_reg_938_pp0_iter16_reg;
                exitcond_flatten_reg_938_pp0_iter18_reg <= exitcond_flatten_reg_938_pp0_iter17_reg;
                exitcond_flatten_reg_938_pp0_iter19_reg <= exitcond_flatten_reg_938_pp0_iter18_reg;
                exitcond_flatten_reg_938_pp0_iter20_reg <= exitcond_flatten_reg_938_pp0_iter19_reg;
                exitcond_flatten_reg_938_pp0_iter21_reg <= exitcond_flatten_reg_938_pp0_iter20_reg;
                exitcond_flatten_reg_938_pp0_iter22_reg <= exitcond_flatten_reg_938_pp0_iter21_reg;
                exitcond_flatten_reg_938_pp0_iter23_reg <= exitcond_flatten_reg_938_pp0_iter22_reg;
                exitcond_flatten_reg_938_pp0_iter24_reg <= exitcond_flatten_reg_938_pp0_iter23_reg;
                exitcond_flatten_reg_938_pp0_iter25_reg <= exitcond_flatten_reg_938_pp0_iter24_reg;
                exitcond_flatten_reg_938_pp0_iter26_reg <= exitcond_flatten_reg_938_pp0_iter25_reg;
                exitcond_flatten_reg_938_pp0_iter27_reg <= exitcond_flatten_reg_938_pp0_iter26_reg;
                exitcond_flatten_reg_938_pp0_iter28_reg <= exitcond_flatten_reg_938_pp0_iter27_reg;
                exitcond_flatten_reg_938_pp0_iter29_reg <= exitcond_flatten_reg_938_pp0_iter28_reg;
                exitcond_flatten_reg_938_pp0_iter2_reg <= exitcond_flatten_reg_938_pp0_iter1_reg;
                exitcond_flatten_reg_938_pp0_iter3_reg <= exitcond_flatten_reg_938_pp0_iter2_reg;
                exitcond_flatten_reg_938_pp0_iter4_reg <= exitcond_flatten_reg_938_pp0_iter3_reg;
                exitcond_flatten_reg_938_pp0_iter5_reg <= exitcond_flatten_reg_938_pp0_iter4_reg;
                exitcond_flatten_reg_938_pp0_iter6_reg <= exitcond_flatten_reg_938_pp0_iter5_reg;
                exitcond_flatten_reg_938_pp0_iter7_reg <= exitcond_flatten_reg_938_pp0_iter6_reg;
                exitcond_flatten_reg_938_pp0_iter8_reg <= exitcond_flatten_reg_938_pp0_iter7_reg;
                exitcond_flatten_reg_938_pp0_iter9_reg <= exitcond_flatten_reg_938_pp0_iter8_reg;
                invertible_demorgan_reg_1023_pp0_iter10_reg <= invertible_demorgan_reg_1023_pp0_iter9_reg;
                invertible_demorgan_reg_1023_pp0_iter11_reg <= invertible_demorgan_reg_1023_pp0_iter10_reg;
                invertible_demorgan_reg_1023_pp0_iter12_reg <= invertible_demorgan_reg_1023_pp0_iter11_reg;
                invertible_demorgan_reg_1023_pp0_iter13_reg <= invertible_demorgan_reg_1023_pp0_iter12_reg;
                invertible_demorgan_reg_1023_pp0_iter14_reg <= invertible_demorgan_reg_1023_pp0_iter13_reg;
                invertible_demorgan_reg_1023_pp0_iter15_reg <= invertible_demorgan_reg_1023_pp0_iter14_reg;
                invertible_demorgan_reg_1023_pp0_iter16_reg <= invertible_demorgan_reg_1023_pp0_iter15_reg;
                invertible_demorgan_reg_1023_pp0_iter17_reg <= invertible_demorgan_reg_1023_pp0_iter16_reg;
                invertible_demorgan_reg_1023_pp0_iter18_reg <= invertible_demorgan_reg_1023_pp0_iter17_reg;
                invertible_demorgan_reg_1023_pp0_iter19_reg <= invertible_demorgan_reg_1023_pp0_iter18_reg;
                invertible_demorgan_reg_1023_pp0_iter20_reg <= invertible_demorgan_reg_1023_pp0_iter19_reg;
                invertible_demorgan_reg_1023_pp0_iter21_reg <= invertible_demorgan_reg_1023_pp0_iter20_reg;
                invertible_demorgan_reg_1023_pp0_iter22_reg <= invertible_demorgan_reg_1023_pp0_iter21_reg;
                invertible_demorgan_reg_1023_pp0_iter23_reg <= invertible_demorgan_reg_1023_pp0_iter22_reg;
                invertible_demorgan_reg_1023_pp0_iter24_reg <= invertible_demorgan_reg_1023_pp0_iter23_reg;
                invertible_demorgan_reg_1023_pp0_iter25_reg <= invertible_demorgan_reg_1023_pp0_iter24_reg;
                invertible_demorgan_reg_1023_pp0_iter26_reg <= invertible_demorgan_reg_1023_pp0_iter25_reg;
                invertible_demorgan_reg_1023_pp0_iter27_reg <= invertible_demorgan_reg_1023_pp0_iter26_reg;
                invertible_demorgan_reg_1023_pp0_iter4_reg <= invertible_demorgan_reg_1023;
                invertible_demorgan_reg_1023_pp0_iter5_reg <= invertible_demorgan_reg_1023_pp0_iter4_reg;
                invertible_demorgan_reg_1023_pp0_iter6_reg <= invertible_demorgan_reg_1023_pp0_iter5_reg;
                invertible_demorgan_reg_1023_pp0_iter7_reg <= invertible_demorgan_reg_1023_pp0_iter6_reg;
                invertible_demorgan_reg_1023_pp0_iter8_reg <= invertible_demorgan_reg_1023_pp0_iter7_reg;
                invertible_demorgan_reg_1023_pp0_iter9_reg <= invertible_demorgan_reg_1023_pp0_iter8_reg;
                packy_last_V_reg_952_pp0_iter10_reg <= packy_last_V_reg_952_pp0_iter9_reg;
                packy_last_V_reg_952_pp0_iter11_reg <= packy_last_V_reg_952_pp0_iter10_reg;
                packy_last_V_reg_952_pp0_iter12_reg <= packy_last_V_reg_952_pp0_iter11_reg;
                packy_last_V_reg_952_pp0_iter13_reg <= packy_last_V_reg_952_pp0_iter12_reg;
                packy_last_V_reg_952_pp0_iter14_reg <= packy_last_V_reg_952_pp0_iter13_reg;
                packy_last_V_reg_952_pp0_iter15_reg <= packy_last_V_reg_952_pp0_iter14_reg;
                packy_last_V_reg_952_pp0_iter16_reg <= packy_last_V_reg_952_pp0_iter15_reg;
                packy_last_V_reg_952_pp0_iter17_reg <= packy_last_V_reg_952_pp0_iter16_reg;
                packy_last_V_reg_952_pp0_iter18_reg <= packy_last_V_reg_952_pp0_iter17_reg;
                packy_last_V_reg_952_pp0_iter19_reg <= packy_last_V_reg_952_pp0_iter18_reg;
                packy_last_V_reg_952_pp0_iter20_reg <= packy_last_V_reg_952_pp0_iter19_reg;
                packy_last_V_reg_952_pp0_iter21_reg <= packy_last_V_reg_952_pp0_iter20_reg;
                packy_last_V_reg_952_pp0_iter22_reg <= packy_last_V_reg_952_pp0_iter21_reg;
                packy_last_V_reg_952_pp0_iter23_reg <= packy_last_V_reg_952_pp0_iter22_reg;
                packy_last_V_reg_952_pp0_iter24_reg <= packy_last_V_reg_952_pp0_iter23_reg;
                packy_last_V_reg_952_pp0_iter25_reg <= packy_last_V_reg_952_pp0_iter24_reg;
                packy_last_V_reg_952_pp0_iter26_reg <= packy_last_V_reg_952_pp0_iter25_reg;
                packy_last_V_reg_952_pp0_iter27_reg <= packy_last_V_reg_952_pp0_iter26_reg;
                packy_last_V_reg_952_pp0_iter28_reg <= packy_last_V_reg_952_pp0_iter27_reg;
                packy_last_V_reg_952_pp0_iter2_reg <= packy_last_V_reg_952_pp0_iter1_reg;
                packy_last_V_reg_952_pp0_iter3_reg <= packy_last_V_reg_952_pp0_iter2_reg;
                packy_last_V_reg_952_pp0_iter4_reg <= packy_last_V_reg_952_pp0_iter3_reg;
                packy_last_V_reg_952_pp0_iter5_reg <= packy_last_V_reg_952_pp0_iter4_reg;
                packy_last_V_reg_952_pp0_iter6_reg <= packy_last_V_reg_952_pp0_iter5_reg;
                packy_last_V_reg_952_pp0_iter7_reg <= packy_last_V_reg_952_pp0_iter6_reg;
                packy_last_V_reg_952_pp0_iter8_reg <= packy_last_V_reg_952_pp0_iter7_reg;
                packy_last_V_reg_952_pp0_iter9_reg <= packy_last_V_reg_952_pp0_iter8_reg;
                tmp_26_i_i_reg_1008_pp0_iter10_reg <= tmp_26_i_i_reg_1008_pp0_iter9_reg;
                tmp_26_i_i_reg_1008_pp0_iter11_reg <= tmp_26_i_i_reg_1008_pp0_iter10_reg;
                tmp_26_i_i_reg_1008_pp0_iter12_reg <= tmp_26_i_i_reg_1008_pp0_iter11_reg;
                tmp_26_i_i_reg_1008_pp0_iter13_reg <= tmp_26_i_i_reg_1008_pp0_iter12_reg;
                tmp_26_i_i_reg_1008_pp0_iter14_reg <= tmp_26_i_i_reg_1008_pp0_iter13_reg;
                tmp_26_i_i_reg_1008_pp0_iter15_reg <= tmp_26_i_i_reg_1008_pp0_iter14_reg;
                tmp_26_i_i_reg_1008_pp0_iter16_reg <= tmp_26_i_i_reg_1008_pp0_iter15_reg;
                tmp_26_i_i_reg_1008_pp0_iter17_reg <= tmp_26_i_i_reg_1008_pp0_iter16_reg;
                tmp_26_i_i_reg_1008_pp0_iter18_reg <= tmp_26_i_i_reg_1008_pp0_iter17_reg;
                tmp_26_i_i_reg_1008_pp0_iter19_reg <= tmp_26_i_i_reg_1008_pp0_iter18_reg;
                tmp_26_i_i_reg_1008_pp0_iter20_reg <= tmp_26_i_i_reg_1008_pp0_iter19_reg;
                tmp_26_i_i_reg_1008_pp0_iter4_reg <= tmp_26_i_i_reg_1008;
                tmp_26_i_i_reg_1008_pp0_iter5_reg <= tmp_26_i_i_reg_1008_pp0_iter4_reg;
                tmp_26_i_i_reg_1008_pp0_iter6_reg <= tmp_26_i_i_reg_1008_pp0_iter5_reg;
                tmp_26_i_i_reg_1008_pp0_iter7_reg <= tmp_26_i_i_reg_1008_pp0_iter6_reg;
                tmp_26_i_i_reg_1008_pp0_iter8_reg <= tmp_26_i_i_reg_1008_pp0_iter7_reg;
                tmp_26_i_i_reg_1008_pp0_iter9_reg <= tmp_26_i_i_reg_1008_pp0_iter8_reg;
                tmp_38_i_i_reg_1060_pp0_iter11_reg <= tmp_38_i_i_reg_1060;
                tmp_38_i_i_reg_1060_pp0_iter12_reg <= tmp_38_i_i_reg_1060_pp0_iter11_reg;
                tmp_38_i_i_reg_1060_pp0_iter13_reg <= tmp_38_i_i_reg_1060_pp0_iter12_reg;
                tmp_38_i_i_reg_1060_pp0_iter14_reg <= tmp_38_i_i_reg_1060_pp0_iter13_reg;
                tmp_38_i_i_reg_1060_pp0_iter15_reg <= tmp_38_i_i_reg_1060_pp0_iter14_reg;
                tmp_38_i_i_reg_1060_pp0_iter16_reg <= tmp_38_i_i_reg_1060_pp0_iter15_reg;
                tmp_38_i_i_reg_1060_pp0_iter17_reg <= tmp_38_i_i_reg_1060_pp0_iter16_reg;
                tmp_38_i_i_reg_1060_pp0_iter18_reg <= tmp_38_i_i_reg_1060_pp0_iter17_reg;
                tmp_38_i_i_reg_1060_pp0_iter19_reg <= tmp_38_i_i_reg_1060_pp0_iter18_reg;
                tmp_38_i_i_reg_1060_pp0_iter20_reg <= tmp_38_i_i_reg_1060_pp0_iter19_reg;
                tmp_40_i_i_reg_1065_pp0_iter11_reg <= tmp_40_i_i_reg_1065;
                tmp_40_i_i_reg_1065_pp0_iter12_reg <= tmp_40_i_i_reg_1065_pp0_iter11_reg;
                tmp_40_i_i_reg_1065_pp0_iter13_reg <= tmp_40_i_i_reg_1065_pp0_iter12_reg;
                tmp_40_i_i_reg_1065_pp0_iter14_reg <= tmp_40_i_i_reg_1065_pp0_iter13_reg;
                tmp_40_i_i_reg_1065_pp0_iter15_reg <= tmp_40_i_i_reg_1065_pp0_iter14_reg;
                tmp_40_i_i_reg_1065_pp0_iter16_reg <= tmp_40_i_i_reg_1065_pp0_iter15_reg;
                tmp_40_i_i_reg_1065_pp0_iter17_reg <= tmp_40_i_i_reg_1065_pp0_iter16_reg;
                tmp_40_i_i_reg_1065_pp0_iter18_reg <= tmp_40_i_i_reg_1065_pp0_iter17_reg;
                tmp_40_i_i_reg_1065_pp0_iter19_reg <= tmp_40_i_i_reg_1065_pp0_iter18_reg;
                tmp_40_i_i_reg_1065_pp0_iter20_reg <= tmp_40_i_i_reg_1065_pp0_iter19_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_flatten_reg_938_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                a_x_d_V_reg_991 <= a_x_d_V_fu_460_p2;
                b_x_c_V_reg_997 <= b_x_c_V_fu_469_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((ap_start = ap_const_logic_0) or (width_empty_n = ap_const_logic_0) or (height_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                bound_reg_933 <= bound_fu_911_p2;
                tmp_66_i_reg_928 <= tmp_66_i_fu_355_p2;
                tmp_i_reg_922 <= tmp_i_fu_345_p2;
                width_read_reg_917 <= width_dout;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_flatten_reg_938_pp0_iter3_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1))) then
                cnt_reg_1045 <= cnt_fu_590_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                exitcond_flatten_reg_938 <= exitcond_flatten_fu_378_p2;
                exitcond_flatten_reg_938_pp0_iter1_reg <= exitcond_flatten_reg_938;
                packy_last_V_reg_952_pp0_iter1_reg <= packy_last_V_reg_952;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_flatten_reg_938_pp0_iter2_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                invertible_demorgan_reg_1023 <= invertible_demorgan_fu_542_p2;
                tmp_26_i_i_reg_1008 <= tmp_26_i_i_fu_504_p2;
                tmp_27_i_i_reg_1013 <= tmp_27_i_i_fu_508_p2;
                tmp_37_i_i_reg_1018 <= tmp_37_i_i_fu_530_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((invertible_demorgan_reg_1023 = ap_const_lv1_0) and (exitcond_flatten_reg_938_pp0_iter3_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                op2_2_reg_1040 <= op2_2_fu_575_p2;
                tmp_30_i_i_reg_1030 <= tmp_30_i_i_fu_554_p2;
                tmp_33_i_i_reg_1035 <= tmp_33_i_i_fu_566_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_flatten_reg_938_pp0_iter27_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                p_Result_1_reg_1107 <= p_Val2_2_fu_652_p3(31 downto 31);
                p_Result_s_reg_1091 <= p_Val2_s_fu_619_p3(31 downto 31);
                tmp_V_1_reg_1102 <= tmp_V_1_fu_644_p1;
                tmp_V_2_reg_1112 <= p_Val2_2_fu_652_p3(30 downto 23);
                tmp_V_3_reg_1118 <= tmp_V_3_fu_677_p1;
                tmp_V_reg_1096 <= p_Val2_s_fu_619_p3(30 downto 23);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_flatten_fu_378_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                packy_last_V_reg_952 <= packy_last_V_fu_442_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_26_i_i_reg_1008_pp0_iter19_reg = ap_const_lv1_0) and (exitcond_flatten_reg_938_pp0_iter19_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                recipr_det_A_reg_1070 <= grp_fu_327_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_flatten_reg_938_pp0_iter7_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                tmp_25_i_i_reg_1055 <= grp_fu_332_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((invertible_demorgan_reg_1023_pp0_iter9_reg = ap_const_lv1_0) and (exitcond_flatten_reg_938_pp0_iter9_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                tmp_38_i_i_reg_1060 <= grp_fu_335_p1;
                tmp_40_i_i_reg_1065 <= grp_fu_338_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((invertible_demorgan_reg_1023_pp0_iter23_reg = ap_const_lv1_0) and (exitcond_flatten_reg_938_pp0_iter23_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                tmp_39_i_i_reg_1081 <= grp_fu_309_p2;
                tmp_41_i_i_reg_1086 <= grp_fu_313_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((vx_img_V_data_V_1_load_A = ap_const_logic_1)) then
                vx_img_V_data_V_1_payload_A <= packx_data_V_fu_788_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((vx_img_V_data_V_1_load_B = ap_const_logic_1)) then
                vx_img_V_data_V_1_payload_B <= packx_data_V_fu_788_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((vx_img_V_last_V_1_load_A = ap_const_logic_1)) then
                vx_img_V_last_V_1_payload_A <= packy_last_V_reg_952_pp0_iter28_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((vx_img_V_last_V_1_load_B = ap_const_logic_1)) then
                vx_img_V_last_V_1_payload_B <= packy_last_V_reg_952_pp0_iter28_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((vy_img_V_data_V_1_load_A = ap_const_logic_1)) then
                vy_img_V_data_V_1_payload_A <= packy_data_V_fu_903_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((vy_img_V_data_V_1_load_B = ap_const_logic_1)) then
                vy_img_V_data_V_1_payload_B <= packy_data_V_fu_903_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((vy_img_V_last_V_1_load_A = ap_const_logic_1)) then
                vy_img_V_last_V_1_payload_A <= packy_last_V_reg_952_pp0_iter28_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((vy_img_V_last_V_1_load_B = ap_const_logic_1)) then
                vy_img_V_last_V_1_payload_B <= packy_last_V_reg_952_pp0_iter28_reg;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, vx_img_V_data_V_1_ack_in, vx_img_V_last_V_1_ack_in, vy_img_V_data_V_1_ack_in, vy_img_V_last_V_1_ack_in, height_empty_n, width_empty_n, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter29, ap_enable_reg_pp0_iter30, exitcond_flatten_fu_378_p2, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, ap_CS_fsm_state33)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((ap_start = ap_const_logic_0) or (width_empty_n = ap_const_logic_0) or (height_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (exitcond_flatten_fu_378_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) and not(((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter29 = ap_const_logic_0) and (ap_enable_reg_pp0_iter30 = ap_const_logic_1))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (exitcond_flatten_fu_378_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter29 = ap_const_logic_0) and (ap_enable_reg_pp0_iter30 = ap_const_logic_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_state33;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state33 => 
                if ((not(((vx_img_V_data_V_1_ack_in = ap_const_logic_0) or (vy_img_V_last_V_1_ack_in = ap_const_logic_0) or (vy_img_V_data_V_1_ack_in = ap_const_logic_0) or (vx_img_V_last_V_1_ack_in = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state33))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state33;
                end if;
            when others =>  
                ap_NS_fsm <= "XXX";
        end case;
    end process;

    A11_img_V_blk_n_assign_proc : process(A11_img_V_empty_n, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, exitcond_flatten_reg_938)
    begin
        if (((exitcond_flatten_reg_938 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            A11_img_V_blk_n <= A11_img_V_empty_n;
        else 
            A11_img_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    A11_img_V_read_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, exitcond_flatten_reg_938, ap_block_pp0_stage0_11001)
    begin
        if (((exitcond_flatten_reg_938 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            A11_img_V_read <= ap_const_logic_1;
        else 
            A11_img_V_read <= ap_const_logic_0;
        end if; 
    end process;


    A12_img_V_blk_n_assign_proc : process(A12_img_V_empty_n, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, exitcond_flatten_reg_938)
    begin
        if (((exitcond_flatten_reg_938 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            A12_img_V_blk_n <= A12_img_V_empty_n;
        else 
            A12_img_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    A12_img_V_read_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, exitcond_flatten_reg_938, ap_block_pp0_stage0_11001)
    begin
        if (((exitcond_flatten_reg_938 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            A12_img_V_read <= ap_const_logic_1;
        else 
            A12_img_V_read <= ap_const_logic_0;
        end if; 
    end process;


    A22_img_V_blk_n_assign_proc : process(A22_img_V_empty_n, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, exitcond_flatten_reg_938)
    begin
        if (((exitcond_flatten_reg_938 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            A22_img_V_blk_n <= A22_img_V_empty_n;
        else 
            A22_img_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    A22_img_V_read_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, exitcond_flatten_reg_938, ap_block_pp0_stage0_11001)
    begin
        if (((exitcond_flatten_reg_938 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            A22_img_V_read <= ap_const_logic_1;
        else 
            A22_img_V_read <= ap_const_logic_0;
        end if; 
    end process;


    B1_img_V_blk_n_assign_proc : process(B1_img_V_empty_n, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, exitcond_flatten_reg_938)
    begin
        if (((exitcond_flatten_reg_938 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            B1_img_V_blk_n <= B1_img_V_empty_n;
        else 
            B1_img_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    B1_img_V_read_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, exitcond_flatten_reg_938, ap_block_pp0_stage0_11001)
    begin
        if (((exitcond_flatten_reg_938 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            B1_img_V_read <= ap_const_logic_1;
        else 
            B1_img_V_read <= ap_const_logic_0;
        end if; 
    end process;


    B2_img_V_blk_n_assign_proc : process(B2_img_V_empty_n, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, exitcond_flatten_reg_938)
    begin
        if (((exitcond_flatten_reg_938 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            B2_img_V_blk_n <= B2_img_V_empty_n;
        else 
            B2_img_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    B2_img_V_read_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, exitcond_flatten_reg_938, ap_block_pp0_stage0_11001)
    begin
        if (((exitcond_flatten_reg_938 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            B2_img_V_read <= ap_const_logic_1;
        else 
            B2_img_V_read <= ap_const_logic_0;
        end if; 
    end process;

    a_x_d_V_fu_460_p0 <= A_0_0_V_reg_963;
    a_x_d_V_fu_460_p1 <= A_1_1_V_reg_975;
    a_x_d_V_fu_460_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(a_x_d_V_fu_460_p0) * signed(a_x_d_V_fu_460_p1))), 68));
    abs_det_A_V_fu_491_p3 <= 
        ret_V_fu_475_p2 when (tmp_24_i_i_fu_485_p2(0) = '1') else 
        neg_det_A_V_fu_479_p2;
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(1);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state33 <= ap_CS_fsm(2);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(A11_img_V_empty_n, A12_img_V_empty_n, A22_img_V_empty_n, B1_img_V_empty_n, B2_img_V_empty_n, ap_enable_reg_pp0_iter1, exitcond_flatten_reg_938)
    begin
                ap_block_pp0_stage0_01001 <= ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (((exitcond_flatten_reg_938 = ap_const_lv1_0) and (ap_const_logic_0 = B2_img_V_empty_n)) or ((exitcond_flatten_reg_938 = ap_const_lv1_0) and (ap_const_logic_0 = B1_img_V_empty_n)) or ((exitcond_flatten_reg_938 = ap_const_lv1_0) and (ap_const_logic_0 = A22_img_V_empty_n)) or ((exitcond_flatten_reg_938 = ap_const_lv1_0) and (ap_const_logic_0 = A12_img_V_empty_n)) or ((exitcond_flatten_reg_938 = ap_const_lv1_0) and (ap_const_logic_0 = A11_img_V_empty_n))));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(A11_img_V_empty_n, A12_img_V_empty_n, A22_img_V_empty_n, B1_img_V_empty_n, B2_img_V_empty_n, ap_enable_reg_pp0_iter1, exitcond_flatten_reg_938, ap_enable_reg_pp0_iter29, ap_enable_reg_pp0_iter30, ap_block_state31_io, ap_block_state32_io)
    begin
                ap_block_pp0_stage0_11001 <= (((ap_const_boolean_1 = ap_block_state32_io) and (ap_enable_reg_pp0_iter30 = ap_const_logic_1)) or ((ap_const_boolean_1 = ap_block_state31_io) and (ap_enable_reg_pp0_iter29 = ap_const_logic_1)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (((exitcond_flatten_reg_938 = ap_const_lv1_0) and (ap_const_logic_0 = B2_img_V_empty_n)) or ((exitcond_flatten_reg_938 = ap_const_lv1_0) and (ap_const_logic_0 = B1_img_V_empty_n)) or ((exitcond_flatten_reg_938 = ap_const_lv1_0) and (ap_const_logic_0 = A22_img_V_empty_n)) or ((exitcond_flatten_reg_938 = ap_const_lv1_0) and (ap_const_logic_0 = A12_img_V_empty_n)) or ((exitcond_flatten_reg_938 = ap_const_lv1_0) and (ap_const_logic_0 = A11_img_V_empty_n)))));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(A11_img_V_empty_n, A12_img_V_empty_n, A22_img_V_empty_n, B1_img_V_empty_n, B2_img_V_empty_n, ap_enable_reg_pp0_iter1, exitcond_flatten_reg_938, ap_enable_reg_pp0_iter29, ap_enable_reg_pp0_iter30, ap_block_state31_io, ap_block_state32_io)
    begin
                ap_block_pp0_stage0_subdone <= (((ap_const_boolean_1 = ap_block_state32_io) and (ap_enable_reg_pp0_iter30 = ap_const_logic_1)) or ((ap_const_boolean_1 = ap_block_state31_io) and (ap_enable_reg_pp0_iter29 = ap_const_logic_1)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (((exitcond_flatten_reg_938 = ap_const_lv1_0) and (ap_const_logic_0 = B2_img_V_empty_n)) or ((exitcond_flatten_reg_938 = ap_const_lv1_0) and (ap_const_logic_0 = B1_img_V_empty_n)) or ((exitcond_flatten_reg_938 = ap_const_lv1_0) and (ap_const_logic_0 = A22_img_V_empty_n)) or ((exitcond_flatten_reg_938 = ap_const_lv1_0) and (ap_const_logic_0 = A12_img_V_empty_n)) or ((exitcond_flatten_reg_938 = ap_const_lv1_0) and (ap_const_logic_0 = A11_img_V_empty_n)))));
    end process;


    ap_block_state1_assign_proc : process(ap_start, ap_done_reg, height_empty_n, width_empty_n)
    begin
                ap_block_state1 <= ((ap_start = ap_const_logic_0) or (width_empty_n = ap_const_logic_0) or (height_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;

        ap_block_state10_pp0_stage0_iter8 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp0_stage0_iter9 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state12_pp0_stage0_iter10 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state13_pp0_stage0_iter11 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state14_pp0_stage0_iter12 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state15_pp0_stage0_iter13 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state16_pp0_stage0_iter14 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state17_pp0_stage0_iter15 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state18_pp0_stage0_iter16 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state19_pp0_stage0_iter17 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state20_pp0_stage0_iter18 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state21_pp0_stage0_iter19 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state22_pp0_stage0_iter20 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state23_pp0_stage0_iter21 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state24_pp0_stage0_iter22 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state25_pp0_stage0_iter23 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state26_pp0_stage0_iter24 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state27_pp0_stage0_iter25 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state28_pp0_stage0_iter26 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state29_pp0_stage0_iter27 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state30_pp0_stage0_iter28 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state31_io_assign_proc : process(vx_img_V_data_V_1_ack_in, vy_img_V_data_V_1_ack_in, exitcond_flatten_reg_938_pp0_iter28_reg)
    begin
                ap_block_state31_io <= (((exitcond_flatten_reg_938_pp0_iter28_reg = ap_const_lv1_0) and (vy_img_V_data_V_1_ack_in = ap_const_logic_0)) or ((exitcond_flatten_reg_938_pp0_iter28_reg = ap_const_lv1_0) and (vx_img_V_data_V_1_ack_in = ap_const_logic_0)));
    end process;

        ap_block_state31_pp0_stage0_iter29 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state32_io_assign_proc : process(vx_img_V_data_V_1_ack_in, vy_img_V_data_V_1_ack_in, exitcond_flatten_reg_938_pp0_iter29_reg)
    begin
                ap_block_state32_io <= (((exitcond_flatten_reg_938_pp0_iter29_reg = ap_const_lv1_0) and (vy_img_V_data_V_1_ack_in = ap_const_logic_0)) or ((exitcond_flatten_reg_938_pp0_iter29_reg = ap_const_lv1_0) and (vx_img_V_data_V_1_ack_in = ap_const_logic_0)));
    end process;

        ap_block_state32_pp0_stage0_iter30 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state33_assign_proc : process(vx_img_V_data_V_1_ack_in, vx_img_V_last_V_1_ack_in, vy_img_V_data_V_1_ack_in, vy_img_V_last_V_1_ack_in)
    begin
                ap_block_state33 <= ((vx_img_V_data_V_1_ack_in = ap_const_logic_0) or (vy_img_V_last_V_1_ack_in = ap_const_logic_0) or (vy_img_V_data_V_1_ack_in = ap_const_logic_0) or (vx_img_V_last_V_1_ack_in = ap_const_logic_0));
    end process;


    ap_block_state3_pp0_stage0_iter1_assign_proc : process(A11_img_V_empty_n, A12_img_V_empty_n, A22_img_V_empty_n, B1_img_V_empty_n, B2_img_V_empty_n, exitcond_flatten_reg_938)
    begin
                ap_block_state3_pp0_stage0_iter1 <= (((exitcond_flatten_reg_938 = ap_const_lv1_0) and (ap_const_logic_0 = B2_img_V_empty_n)) or ((exitcond_flatten_reg_938 = ap_const_lv1_0) and (ap_const_logic_0 = B1_img_V_empty_n)) or ((exitcond_flatten_reg_938 = ap_const_lv1_0) and (ap_const_logic_0 = A22_img_V_empty_n)) or ((exitcond_flatten_reg_938 = ap_const_lv1_0) and (ap_const_logic_0 = A12_img_V_empty_n)) or ((exitcond_flatten_reg_938 = ap_const_lv1_0) and (ap_const_logic_0 = A11_img_V_empty_n)));
    end process;

        ap_block_state4_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage0_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage0_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state2_assign_proc : process(exitcond_flatten_fu_378_p2)
    begin
        if ((exitcond_flatten_fu_378_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_done_reg, vx_img_V_data_V_1_ack_in, vx_img_V_last_V_1_ack_in, vy_img_V_data_V_1_ack_in, vy_img_V_last_V_1_ack_in, ap_CS_fsm_state33)
    begin
        if ((not(((vx_img_V_data_V_1_ack_in = ap_const_logic_0) or (vy_img_V_last_V_1_ack_in = ap_const_logic_0) or (vy_img_V_data_V_1_ack_in = ap_const_logic_0) or (vx_img_V_last_V_1_ack_in = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state33))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter29, ap_enable_reg_pp0_iter30, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter9, ap_enable_reg_pp0_iter10, ap_enable_reg_pp0_iter11, ap_enable_reg_pp0_iter12, ap_enable_reg_pp0_iter13, ap_enable_reg_pp0_iter14, ap_enable_reg_pp0_iter15, ap_enable_reg_pp0_iter16, ap_enable_reg_pp0_iter17, ap_enable_reg_pp0_iter18, ap_enable_reg_pp0_iter19, ap_enable_reg_pp0_iter20, ap_enable_reg_pp0_iter21, ap_enable_reg_pp0_iter22, ap_enable_reg_pp0_iter23, ap_enable_reg_pp0_iter24, ap_enable_reg_pp0_iter25, ap_enable_reg_pp0_iter26, ap_enable_reg_pp0_iter27, ap_enable_reg_pp0_iter28)
    begin
        if (((ap_enable_reg_pp0_iter28 = ap_const_logic_0) and (ap_enable_reg_pp0_iter27 = ap_const_logic_0) and (ap_enable_reg_pp0_iter26 = ap_const_logic_0) and (ap_enable_reg_pp0_iter25 = ap_const_logic_0) and (ap_enable_reg_pp0_iter24 = ap_const_logic_0) and (ap_enable_reg_pp0_iter23 = ap_const_logic_0) and (ap_enable_reg_pp0_iter22 = ap_const_logic_0) and (ap_enable_reg_pp0_iter21 = ap_const_logic_0) and (ap_enable_reg_pp0_iter20 = ap_const_logic_0) and (ap_enable_reg_pp0_iter19 = ap_const_logic_0) and (ap_enable_reg_pp0_iter18 = ap_const_logic_0) and (ap_enable_reg_pp0_iter17 = ap_const_logic_0) and (ap_enable_reg_pp0_iter16 = ap_const_logic_0) and (ap_enable_reg_pp0_iter15 = ap_const_logic_0) and (ap_enable_reg_pp0_iter14 = ap_const_logic_0) and (ap_enable_reg_pp0_iter13 = ap_const_logic_0) and (ap_enable_reg_pp0_iter12 = ap_const_logic_0) and (ap_enable_reg_pp0_iter11 = ap_const_logic_0) and (ap_enable_reg_pp0_iter10 = ap_const_logic_0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter30 = ap_const_logic_0) and (ap_enable_reg_pp0_iter29 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_cnt_1_i_phi_fu_301_p4_assign_proc : process(ap_block_pp0_stage0, cnt_1_i_reg_297, exitcond_flatten_reg_938_pp0_iter4_reg, cnt_reg_1045, ap_enable_reg_pp0_iter5)
    begin
        if (((exitcond_flatten_reg_938_pp0_iter4_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1))) then 
            ap_phi_mux_cnt_1_i_phi_fu_301_p4 <= cnt_reg_1045;
        else 
            ap_phi_mux_cnt_1_i_phi_fu_301_p4 <= cnt_1_i_reg_297;
        end if; 
    end process;


    ap_ready_assign_proc : process(vx_img_V_data_V_1_ack_in, vx_img_V_last_V_1_ack_in, vy_img_V_data_V_1_ack_in, vy_img_V_last_V_1_ack_in, ap_CS_fsm_state33)
    begin
        if ((not(((vx_img_V_data_V_1_ack_in = ap_const_logic_0) or (vy_img_V_last_V_1_ack_in = ap_const_logic_0) or (vy_img_V_data_V_1_ack_in = ap_const_logic_0) or (vx_img_V_last_V_1_ack_in = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state33))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    ap_return <= cnt_1_i_reg_297;
    b_x_c_V_fu_469_p0 <= tmp_23_i_i_fu_466_p1(34 - 1 downto 0);
    b_x_c_V_fu_469_p1 <= tmp_23_i_i_fu_466_p1(34 - 1 downto 0);
    b_x_c_V_fu_469_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(b_x_c_V_fu_469_p0) * signed(b_x_c_V_fu_469_p1))), 68));
    bound_fu_911_p0 <= bound_fu_911_p00(16 - 1 downto 0);
    bound_fu_911_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(width_dout),32));
    bound_fu_911_p1 <= bound_fu_911_p10(16 - 1 downto 0);
    bound_fu_911_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(height_dout),32));
    cnt_fu_590_p2 <= std_logic_vector(unsigned(ap_phi_mux_cnt_1_i_phi_fu_301_p4) + unsigned(tmp_73_i_fu_586_p1));
    col_fu_448_p2 <= std_logic_vector(unsigned(ap_const_lv16_1) + unsigned(col_i_mid2_fu_394_p3));
    col_i_mid2_fu_394_p3 <= 
        ap_const_lv16_0 when (exitcond_i6_fu_389_p2(0) = '1') else 
        col_i_reg_286;
    exitcond_flatten_fu_378_p2 <= "1" when (indvar_flatten_reg_264 = bound_reg_933) else "0";
    exitcond_i6_fu_389_p2 <= "1" when (col_i_reg_286 = width_read_reg_917) else "0";

    grp_fu_309_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_309_ce <= ap_const_logic_1;
        else 
            grp_fu_309_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_313_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_313_ce <= ap_const_logic_1;
        else 
            grp_fu_313_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_317_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_317_ce <= ap_const_logic_1;
        else 
            grp_fu_317_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_322_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_322_ce <= ap_const_logic_1;
        else 
            grp_fu_322_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_327_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_327_ce <= ap_const_logic_1;
        else 
            grp_fu_327_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_332_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_332_ce <= ap_const_logic_1;
        else 
            grp_fu_332_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_332_p0 <= ret_V_fu_475_p2(64 - 1 downto 0);

    grp_fu_335_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_335_ce <= ap_const_logic_1;
        else 
            grp_fu_335_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_335_p0 <= std_logic_vector(unsigned(ap_const_lv64_0) - unsigned(tmp_35_i_i_fu_596_p2));

    grp_fu_338_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_338_ce <= ap_const_logic_1;
        else 
            grp_fu_338_ce <= ap_const_logic_0;
        end if; 
    end process;


    height_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, height_empty_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            height_blk_n <= height_empty_n;
        else 
            height_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    height_read_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, height_empty_n, width_empty_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (width_empty_n = ap_const_logic_0) or (height_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            height_read <= ap_const_logic_1;
        else 
            height_read <= ap_const_logic_0;
        end if; 
    end process;

    i_op_assign_fu_607_p3 <= 
        ap_const_lv32_0 when (tmp_26_i_i_reg_1008_pp0_iter20_reg(0) = '1') else 
        recipr_det_A_reg_1070;
    indvar_flatten_next_fu_383_p2 <= std_logic_vector(unsigned(indvar_flatten_reg_264) + unsigned(ap_const_lv32_1));
    invertible_demorgan_fu_542_p2 <= (tmp_42_i_i_fu_536_p2 or tmp_26_i_i_fu_504_p2);
    invertible_fu_581_p2 <= (invertible_demorgan_reg_1023 xor ap_const_lv1_1);
    isNeg_1_fu_818_p3 <= sh_assign_3_fu_812_p2(8 downto 8);
    isNeg_fu_703_p3 <= sh_assign_fu_697_p2(8 downto 8);
    mantissa_V_1_fu_796_p4 <= ((ap_const_lv1_1 & tmp_V_3_reg_1118) & ap_const_lv1_0);
    mantissa_V_1_i_i_i_c_fu_690_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mantissa_V_fu_681_p4),63));
    mantissa_V_1_i_i_i_fu_805_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mantissa_V_1_fu_796_p4),63));
    mantissa_V_fu_681_p4 <= ((ap_const_lv1_1 & tmp_V_1_reg_1102) & ap_const_lv1_0);
    neg_det_A_V_fu_479_p2 <= std_logic_vector(unsigned(ap_const_lv68_0) - unsigned(ret_V_fu_475_p2));
    op2_2_fu_575_p0 <= tmp_32_i_i_fu_563_p1(34 - 1 downto 0);
    op2_2_fu_575_p1 <= tmp_37_i_i_reg_1018;
    op2_2_fu_575_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(op2_2_fu_575_p0) * signed(op2_2_fu_575_p1))), 64));
    p_Val2_2_fu_652_p3 <= 
        ap_const_lv32_0 when (invertible_demorgan_reg_1023_pp0_iter27_reg(0) = '1') else 
        tmp_s_fu_648_p1;
    p_Val2_s_fu_619_p3 <= 
        ap_const_lv32_0 when (invertible_demorgan_reg_1023_pp0_iter27_reg(0) = '1') else 
        tmp_fu_615_p1;
    packx_data_V_fu_788_p3 <= 
        result_V_1_fu_782_p2 when (p_Result_s_reg_1091(0) = '1') else 
        tmp_66_fu_774_p3;
    packy_data_V_fu_903_p3 <= 
        result_V_3_fu_897_p2 when (p_Result_1_reg_1107(0) = '1') else 
        tmp_69_fu_889_p3;
    packy_last_V_fu_442_p2 <= (tmp_75_i_fu_437_p2 and tmp_69_i_mid2_fu_417_p3);
    r_V_1_fu_746_p2 <= std_logic_vector(shift_left(unsigned(mantissa_V_1_i_i_i_c_fu_690_p1),to_integer(unsigned('0' & tmp_i_i_i_i_51_fu_736_p1(31-1 downto 0)))));
    r_V_2_fu_855_p2 <= std_logic_vector(shift_right(unsigned(mantissa_V_1_fu_796_p4),to_integer(unsigned('0' & sh_assign_2_i_i_i45_1_fu_847_p1(25-1 downto 0)))));
    r_V_3_fu_861_p2 <= std_logic_vector(shift_left(unsigned(mantissa_V_1_i_i_i_fu_805_p1),to_integer(unsigned('0' & tmp_i_i_i46_i_fu_851_p1(31-1 downto 0)))));
    r_V_fu_740_p2 <= std_logic_vector(shift_right(unsigned(mantissa_V_fu_681_p4),to_integer(unsigned('0' & sh_assign_2_i_i_i_ca_1_fu_732_p1(25-1 downto 0)))));
    result_V_1_fu_782_p2 <= std_logic_vector(unsigned(ap_const_lv8_0) - unsigned(tmp_66_fu_774_p3));
    result_V_3_fu_897_p2 <= std_logic_vector(unsigned(ap_const_lv8_0) - unsigned(tmp_69_fu_889_p3));
    ret_V_fu_475_p2 <= std_logic_vector(unsigned(a_x_d_V_reg_991) - unsigned(b_x_c_V_reg_997));
    row3_fu_402_p2 <= std_logic_vector(unsigned(ap_const_lv16_1) + unsigned(row_i_reg_275));
    row_i_mid2_fu_425_p3 <= 
        row3_fu_402_p2 when (exitcond_i6_fu_389_p2(0) = '1') else 
        row_i_reg_275;
        sh_assign_2_i_i_i45_1_fu_847_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(ush_1_fu_835_p3),25));

        sh_assign_2_i_i_i45_s_fu_843_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(ush_1_fu_835_p3),32));

        sh_assign_2_i_i_i_ca_1_fu_732_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(ush_fu_720_p3),25));

        sh_assign_2_i_i_i_ca_fu_728_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(ush_fu_720_p3),32));

    sh_assign_3_fu_812_p2 <= std_logic_vector(signed(ap_const_lv9_181) + signed(tmp_i_i_i_i41_cast_i_fu_809_p1));
    sh_assign_fu_697_p2 <= std_logic_vector(signed(ap_const_lv9_181) + signed(tmp_i_i_i_i_cast_i_fu_694_p1));
        tmp_23_i_i_fu_466_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(A_0_1_V_reg_969),68));

    tmp_24_i_i_fu_485_p2 <= "1" when (signed(ret_V_fu_475_p2) > signed(ap_const_lv68_0)) else "0";
    tmp_26_i_i_fu_504_p2 <= "1" when (a_x_d_V_reg_991 = b_x_c_V_reg_997) else "0";
    tmp_27_i_i_fu_508_p2 <= std_logic_vector(unsigned(ap_const_lv34_0) - unsigned(A_0_1_V_reg_969_pp0_iter2_reg));
    tmp_30_i_i_fu_554_p0 <= A_1_1_V_reg_975_pp0_iter3_reg;
    tmp_30_i_i_fu_554_p1 <= B_0_V_reg_981_pp0_iter3_reg;
    tmp_30_i_i_fu_554_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(tmp_30_i_i_fu_554_p0) * signed(tmp_30_i_i_fu_554_p1))), 64));
        tmp_31_i_cast_i_fu_513_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_27_i_i_fu_508_p2),35));

        tmp_32_i_i_fu_563_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(B_1_V_reg_986_pp0_iter3_reg),64));

    tmp_33_i_i_fu_566_p0 <= tmp_27_i_i_reg_1013;
    tmp_33_i_i_fu_566_p1 <= tmp_32_i_i_fu_563_p1(34 - 1 downto 0);
    tmp_33_i_i_fu_566_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(tmp_33_i_i_fu_566_p0) * signed(tmp_33_i_i_fu_566_p1))), 64));
        tmp_34_i_cast_i_fu_517_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(A_0_0_V_reg_963_pp0_iter2_reg),35));

    tmp_35_i_i_fu_596_p2 <= std_logic_vector(unsigned(tmp_33_i_i_reg_1035) + unsigned(tmp_30_i_i_reg_1030));
        tmp_36_i_cast_i_fu_526_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_36_i_i_fu_520_p2),36));

    tmp_36_i_i_fu_520_p2 <= std_logic_vector(signed(tmp_34_i_cast_i_fu_517_p1) + signed(tmp_31_i_cast_i_fu_513_p1));
    tmp_37_i_i_fu_530_p2 <= std_logic_vector(unsigned(ap_const_lv36_0) - unsigned(tmp_36_i_cast_i_fu_526_p1));
    tmp_42_i_i_fu_536_p2 <= "1" when (signed(abs_det_A_V_fu_491_p3) < signed(ap_const_lv68_79)) else "0";
    tmp_64_fu_760_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_71_fu_752_p3),8));
    tmp_65_cast_i_fu_351_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(width_dout),17));
    tmp_65_fu_764_p4 <= r_V_1_fu_746_p2(31 downto 24);
    tmp_66_fu_774_p3 <= 
        tmp_64_fu_760_p1 when (isNeg_fu_703_p3(0) = '1') else 
        tmp_65_fu_764_p4;
    tmp_66_i_fu_355_p2 <= std_logic_vector(unsigned(tmp_65_cast_i_fu_351_p1) + unsigned(ap_const_lv17_1FFFF));
    tmp_67_cast_i_fu_369_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(row_i_reg_275),17));
    tmp_67_cast_i_mid1_fu_408_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(row3_fu_402_p2),17));
    tmp_67_fu_875_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_75_fu_867_p3),8));
    tmp_68_fu_879_p4 <= r_V_3_fu_861_p2(31 downto 24);
    tmp_69_fu_889_p3 <= 
        tmp_67_fu_875_p1 when (isNeg_1_fu_818_p3(0) = '1') else 
        tmp_68_fu_879_p4;
    tmp_69_i_fu_373_p2 <= "1" when (tmp_67_cast_i_fu_369_p1 = tmp_i_reg_922) else "0";
    tmp_69_i_mid1_fu_412_p2 <= "1" when (tmp_67_cast_i_mid1_fu_408_p1 = tmp_i_reg_922) else "0";
    tmp_69_i_mid2_fu_417_p3 <= 
        tmp_69_i_mid1_fu_412_p2 when (exitcond_i6_fu_389_p2(0) = '1') else 
        tmp_69_i_fu_373_p2;
    tmp_70_cast_i_fu_433_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(col_i_mid2_fu_394_p3),17));
    tmp_71_fu_752_p3 <= r_V_fu_740_p2(24 downto 24);
    tmp_73_i_fu_586_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(invertible_fu_581_p2),32));
    tmp_75_fu_867_p3 <= r_V_2_fu_855_p2(24 downto 24);
    tmp_75_i_fu_437_p2 <= "1" when (tmp_70_cast_i_fu_433_p1 = tmp_66_i_reg_928) else "0";
    tmp_V_1_fu_644_p1 <= p_Val2_s_fu_619_p3(23 - 1 downto 0);
    tmp_V_3_fu_677_p1 <= p_Val2_2_fu_652_p3(23 - 1 downto 0);
    tmp_cast_i_fu_341_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(height_dout),17));
    tmp_fu_615_p1 <= grp_fu_317_p2;
    tmp_i_fu_345_p2 <= std_logic_vector(unsigned(tmp_cast_i_fu_341_p1) + unsigned(ap_const_lv17_1FFFF));
        tmp_i_i_i44_cast_i_fu_831_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_i_i_i44_i_fu_826_p2),9));

    tmp_i_i_i44_i_fu_826_p2 <= std_logic_vector(unsigned(ap_const_lv8_7F) - unsigned(tmp_V_2_reg_1112));
    tmp_i_i_i46_i_fu_851_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sh_assign_2_i_i_i45_s_fu_843_p1),63));
        tmp_i_i_i_cast_i_fu_716_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_i_i_i_i_fu_711_p2),9));

    tmp_i_i_i_i41_cast_i_fu_809_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_V_2_reg_1112),9));
    tmp_i_i_i_i_51_fu_736_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sh_assign_2_i_i_i_ca_fu_728_p1),63));
    tmp_i_i_i_i_cast_i_fu_694_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_V_reg_1096),9));
    tmp_i_i_i_i_fu_711_p2 <= std_logic_vector(unsigned(ap_const_lv8_7F) - unsigned(tmp_V_reg_1096));
    tmp_s_fu_648_p1 <= grp_fu_322_p2;
    ush_1_fu_835_p3 <= 
        tmp_i_i_i44_cast_i_fu_831_p1 when (isNeg_1_fu_818_p3(0) = '1') else 
        sh_assign_3_fu_812_p2;
    ush_fu_720_p3 <= 
        tmp_i_i_i_cast_i_fu_716_p1 when (isNeg_fu_703_p3(0) = '1') else 
        sh_assign_fu_697_p2;
    vx_img_TDATA <= vx_img_V_data_V_1_data_out;

    vx_img_TDATA_blk_n_assign_proc : process(vx_img_V_data_V_1_state, ap_block_pp0_stage0, ap_enable_reg_pp0_iter29, exitcond_flatten_reg_938_pp0_iter28_reg, ap_enable_reg_pp0_iter30, exitcond_flatten_reg_938_pp0_iter29_reg)
    begin
        if ((((exitcond_flatten_reg_938_pp0_iter29_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter30 = ap_const_logic_1)) or ((exitcond_flatten_reg_938_pp0_iter28_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter29 = ap_const_logic_1)))) then 
            vx_img_TDATA_blk_n <= vx_img_V_data_V_1_state(1);
        else 
            vx_img_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    vx_img_TLAST <= vx_img_V_last_V_1_data_out;
    vx_img_TVALID <= vx_img_V_last_V_1_state(0);
    vx_img_V_data_V_1_ack_in <= vx_img_V_data_V_1_state(1);
    vx_img_V_data_V_1_ack_out <= vx_img_TREADY;

    vx_img_V_data_V_1_data_out_assign_proc : process(vx_img_V_data_V_1_payload_A, vx_img_V_data_V_1_payload_B, vx_img_V_data_V_1_sel)
    begin
        if ((vx_img_V_data_V_1_sel = ap_const_logic_1)) then 
            vx_img_V_data_V_1_data_out <= vx_img_V_data_V_1_payload_B;
        else 
            vx_img_V_data_V_1_data_out <= vx_img_V_data_V_1_payload_A;
        end if; 
    end process;

    vx_img_V_data_V_1_load_A <= (vx_img_V_data_V_1_state_cmp_full and not(vx_img_V_data_V_1_sel_wr));
    vx_img_V_data_V_1_load_B <= (vx_img_V_data_V_1_state_cmp_full and vx_img_V_data_V_1_sel_wr);
    vx_img_V_data_V_1_sel <= vx_img_V_data_V_1_sel_rd;
    vx_img_V_data_V_1_state_cmp_full <= '0' when (vx_img_V_data_V_1_state = ap_const_lv2_1) else '1';

    vx_img_V_data_V_1_vld_in_assign_proc : process(ap_enable_reg_pp0_iter29, exitcond_flatten_reg_938_pp0_iter28_reg, ap_block_pp0_stage0_11001)
    begin
        if (((exitcond_flatten_reg_938_pp0_iter28_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter29 = ap_const_logic_1))) then 
            vx_img_V_data_V_1_vld_in <= ap_const_logic_1;
        else 
            vx_img_V_data_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    vx_img_V_data_V_1_vld_out <= vx_img_V_data_V_1_state(0);
    vx_img_V_last_V_1_ack_in <= vx_img_V_last_V_1_state(1);
    vx_img_V_last_V_1_ack_out <= vx_img_TREADY;

    vx_img_V_last_V_1_data_out_assign_proc : process(vx_img_V_last_V_1_payload_A, vx_img_V_last_V_1_payload_B, vx_img_V_last_V_1_sel)
    begin
        if ((vx_img_V_last_V_1_sel = ap_const_logic_1)) then 
            vx_img_V_last_V_1_data_out <= vx_img_V_last_V_1_payload_B;
        else 
            vx_img_V_last_V_1_data_out <= vx_img_V_last_V_1_payload_A;
        end if; 
    end process;

    vx_img_V_last_V_1_load_A <= (vx_img_V_last_V_1_state_cmp_full and not(vx_img_V_last_V_1_sel_wr));
    vx_img_V_last_V_1_load_B <= (vx_img_V_last_V_1_state_cmp_full and vx_img_V_last_V_1_sel_wr);
    vx_img_V_last_V_1_sel <= vx_img_V_last_V_1_sel_rd;
    vx_img_V_last_V_1_state_cmp_full <= '0' when (vx_img_V_last_V_1_state = ap_const_lv2_1) else '1';

    vx_img_V_last_V_1_vld_in_assign_proc : process(ap_enable_reg_pp0_iter29, exitcond_flatten_reg_938_pp0_iter28_reg, ap_block_pp0_stage0_11001)
    begin
        if (((exitcond_flatten_reg_938_pp0_iter28_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter29 = ap_const_logic_1))) then 
            vx_img_V_last_V_1_vld_in <= ap_const_logic_1;
        else 
            vx_img_V_last_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    vx_img_V_last_V_1_vld_out <= vx_img_V_last_V_1_state(0);
    vy_img_TDATA <= vy_img_V_data_V_1_data_out;

    vy_img_TDATA_blk_n_assign_proc : process(vy_img_V_data_V_1_state, ap_block_pp0_stage0, ap_enable_reg_pp0_iter29, exitcond_flatten_reg_938_pp0_iter28_reg, ap_enable_reg_pp0_iter30, exitcond_flatten_reg_938_pp0_iter29_reg)
    begin
        if ((((exitcond_flatten_reg_938_pp0_iter29_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter30 = ap_const_logic_1)) or ((exitcond_flatten_reg_938_pp0_iter28_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter29 = ap_const_logic_1)))) then 
            vy_img_TDATA_blk_n <= vy_img_V_data_V_1_state(1);
        else 
            vy_img_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    vy_img_TLAST <= vy_img_V_last_V_1_data_out;
    vy_img_TVALID <= vy_img_V_last_V_1_state(0);
    vy_img_V_data_V_1_ack_in <= vy_img_V_data_V_1_state(1);
    vy_img_V_data_V_1_ack_out <= vy_img_TREADY;

    vy_img_V_data_V_1_data_out_assign_proc : process(vy_img_V_data_V_1_payload_A, vy_img_V_data_V_1_payload_B, vy_img_V_data_V_1_sel)
    begin
        if ((vy_img_V_data_V_1_sel = ap_const_logic_1)) then 
            vy_img_V_data_V_1_data_out <= vy_img_V_data_V_1_payload_B;
        else 
            vy_img_V_data_V_1_data_out <= vy_img_V_data_V_1_payload_A;
        end if; 
    end process;

    vy_img_V_data_V_1_load_A <= (vy_img_V_data_V_1_state_cmp_full and not(vy_img_V_data_V_1_sel_wr));
    vy_img_V_data_V_1_load_B <= (vy_img_V_data_V_1_state_cmp_full and vy_img_V_data_V_1_sel_wr);
    vy_img_V_data_V_1_sel <= vy_img_V_data_V_1_sel_rd;
    vy_img_V_data_V_1_state_cmp_full <= '0' when (vy_img_V_data_V_1_state = ap_const_lv2_1) else '1';

    vy_img_V_data_V_1_vld_in_assign_proc : process(ap_enable_reg_pp0_iter29, exitcond_flatten_reg_938_pp0_iter28_reg, ap_block_pp0_stage0_11001)
    begin
        if (((exitcond_flatten_reg_938_pp0_iter28_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter29 = ap_const_logic_1))) then 
            vy_img_V_data_V_1_vld_in <= ap_const_logic_1;
        else 
            vy_img_V_data_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    vy_img_V_data_V_1_vld_out <= vy_img_V_data_V_1_state(0);
    vy_img_V_last_V_1_ack_in <= vy_img_V_last_V_1_state(1);
    vy_img_V_last_V_1_ack_out <= vy_img_TREADY;

    vy_img_V_last_V_1_data_out_assign_proc : process(vy_img_V_last_V_1_payload_A, vy_img_V_last_V_1_payload_B, vy_img_V_last_V_1_sel)
    begin
        if ((vy_img_V_last_V_1_sel = ap_const_logic_1)) then 
            vy_img_V_last_V_1_data_out <= vy_img_V_last_V_1_payload_B;
        else 
            vy_img_V_last_V_1_data_out <= vy_img_V_last_V_1_payload_A;
        end if; 
    end process;

    vy_img_V_last_V_1_load_A <= (vy_img_V_last_V_1_state_cmp_full and not(vy_img_V_last_V_1_sel_wr));
    vy_img_V_last_V_1_load_B <= (vy_img_V_last_V_1_state_cmp_full and vy_img_V_last_V_1_sel_wr);
    vy_img_V_last_V_1_sel <= vy_img_V_last_V_1_sel_rd;
    vy_img_V_last_V_1_state_cmp_full <= '0' when (vy_img_V_last_V_1_state = ap_const_lv2_1) else '1';

    vy_img_V_last_V_1_vld_in_assign_proc : process(ap_enable_reg_pp0_iter29, exitcond_flatten_reg_938_pp0_iter28_reg, ap_block_pp0_stage0_11001)
    begin
        if (((exitcond_flatten_reg_938_pp0_iter28_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter29 = ap_const_logic_1))) then 
            vy_img_V_last_V_1_vld_in <= ap_const_logic_1;
        else 
            vy_img_V_last_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    vy_img_V_last_V_1_vld_out <= vy_img_V_last_V_1_state(0);

    width_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, width_empty_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            width_blk_n <= width_empty_n;
        else 
            width_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    width_read_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, height_empty_n, width_empty_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (width_empty_n = ap_const_logic_0) or (height_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            width_read <= ap_const_logic_1;
        else 
            width_read <= ap_const_logic_0;
        end if; 
    end process;

end behav;
