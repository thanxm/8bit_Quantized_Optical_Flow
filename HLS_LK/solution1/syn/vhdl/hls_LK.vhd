-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.3
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity hls_LK is
generic (
    C_S_AXI_CONTROL_BUS_ADDR_WIDTH : INTEGER := 6;
    C_S_AXI_CONTROL_BUS_DATA_WIDTH : INTEGER := 32 );
port (
    s_axi_CONTROL_BUS_AWVALID : IN STD_LOGIC;
    s_axi_CONTROL_BUS_AWREADY : OUT STD_LOGIC;
    s_axi_CONTROL_BUS_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_BUS_ADDR_WIDTH-1 downto 0);
    s_axi_CONTROL_BUS_WVALID : IN STD_LOGIC;
    s_axi_CONTROL_BUS_WREADY : OUT STD_LOGIC;
    s_axi_CONTROL_BUS_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_BUS_DATA_WIDTH-1 downto 0);
    s_axi_CONTROL_BUS_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_BUS_DATA_WIDTH/8-1 downto 0);
    s_axi_CONTROL_BUS_ARVALID : IN STD_LOGIC;
    s_axi_CONTROL_BUS_ARREADY : OUT STD_LOGIC;
    s_axi_CONTROL_BUS_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_BUS_ADDR_WIDTH-1 downto 0);
    s_axi_CONTROL_BUS_RVALID : OUT STD_LOGIC;
    s_axi_CONTROL_BUS_RREADY : IN STD_LOGIC;
    s_axi_CONTROL_BUS_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_CONTROL_BUS_DATA_WIDTH-1 downto 0);
    s_axi_CONTROL_BUS_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_CONTROL_BUS_BVALID : OUT STD_LOGIC;
    s_axi_CONTROL_BUS_BREADY : IN STD_LOGIC;
    s_axi_CONTROL_BUS_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    interrupt : OUT STD_LOGIC;
    inp1_img_TDATA : IN STD_LOGIC_VECTOR (7 downto 0);
    inp1_img_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
    inp2_img_TDATA : IN STD_LOGIC_VECTOR (7 downto 0);
    inp2_img_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
    vx_img_TDATA : OUT STD_LOGIC_VECTOR (7 downto 0);
    vx_img_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
    vy_img_TDATA : OUT STD_LOGIC_VECTOR (7 downto 0);
    vy_img_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
    inp1_img_TVALID : IN STD_LOGIC;
    inp1_img_TREADY : OUT STD_LOGIC;
    inp2_img_TVALID : IN STD_LOGIC;
    inp2_img_TREADY : OUT STD_LOGIC;
    vx_img_TVALID : OUT STD_LOGIC;
    vx_img_TREADY : IN STD_LOGIC;
    vy_img_TVALID : OUT STD_LOGIC;
    vy_img_TREADY : IN STD_LOGIC );
end;


architecture behav of hls_LK is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "hls_LK,hls_ip_2018_3,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xczu7ev-ffvc1156-2-e,HLS_INPUT_CLOCK=5.000000,HLS_INPUT_ARCH=dataflow,HLS_SYN_CLOCK=4.371000,HLS_SYN_LAT=-1,HLS_SYN_TPT=-1,HLS_SYN_MEM=40,HLS_SYN_DSP=48,HLS_SYN_FF=8277,HLS_SYN_LUT=12009,HLS_VERSION=2018_3}";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant C_S_AXI_WSTRB_WIDTH : INTEGER range 63 downto 0 := 4;
    constant C_S_AXI_ADDR_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_logic_0 : STD_LOGIC := '0';

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_start : STD_LOGIC;
    signal ap_ready : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal height : STD_LOGIC_VECTOR (15 downto 0);
    signal width : STD_LOGIC_VECTOR (15 downto 0);
    signal hls_twoIsotropicFilt_U0_ap_start : STD_LOGIC;
    signal hls_twoIsotropicFilt_U0_ap_done : STD_LOGIC;
    signal hls_twoIsotropicFilt_U0_ap_continue : STD_LOGIC;
    signal hls_twoIsotropicFilt_U0_ap_idle : STD_LOGIC;
    signal hls_twoIsotropicFilt_U0_ap_ready : STD_LOGIC;
    signal hls_twoIsotropicFilt_U0_start_out : STD_LOGIC;
    signal hls_twoIsotropicFilt_U0_start_write : STD_LOGIC;
    signal hls_twoIsotropicFilt_U0_inp1_img_TREADY : STD_LOGIC;
    signal hls_twoIsotropicFilt_U0_inp2_img_TREADY : STD_LOGIC;
    signal hls_twoIsotropicFilt_U0_out1_img_V_din : STD_LOGIC_VECTOR (11 downto 0);
    signal hls_twoIsotropicFilt_U0_out1_img_V_write : STD_LOGIC;
    signal hls_twoIsotropicFilt_U0_out2_img_V_din : STD_LOGIC_VECTOR (11 downto 0);
    signal hls_twoIsotropicFilt_U0_out2_img_V_write : STD_LOGIC;
    signal hls_twoIsotropicFilt_U0_height_out_din : STD_LOGIC_VECTOR (15 downto 0);
    signal hls_twoIsotropicFilt_U0_height_out_write : STD_LOGIC;
    signal hls_twoIsotropicFilt_U0_width_out_din : STD_LOGIC_VECTOR (15 downto 0);
    signal hls_twoIsotropicFilt_U0_width_out_write : STD_LOGIC;
    signal hls_SpatialTemporalD_U0_ap_start : STD_LOGIC;
    signal hls_SpatialTemporalD_U0_ap_done : STD_LOGIC;
    signal hls_SpatialTemporalD_U0_ap_continue : STD_LOGIC;
    signal hls_SpatialTemporalD_U0_ap_idle : STD_LOGIC;
    signal hls_SpatialTemporalD_U0_ap_ready : STD_LOGIC;
    signal hls_SpatialTemporalD_U0_start_out : STD_LOGIC;
    signal hls_SpatialTemporalD_U0_start_write : STD_LOGIC;
    signal hls_SpatialTemporalD_U0_inp1_img_V_read : STD_LOGIC;
    signal hls_SpatialTemporalD_U0_inp2_img_V_read : STD_LOGIC;
    signal hls_SpatialTemporalD_U0_out_Ix_img_V_din : STD_LOGIC_VECTOR (12 downto 0);
    signal hls_SpatialTemporalD_U0_out_Ix_img_V_write : STD_LOGIC;
    signal hls_SpatialTemporalD_U0_out_Iy_img_V_din : STD_LOGIC_VECTOR (12 downto 0);
    signal hls_SpatialTemporalD_U0_out_Iy_img_V_write : STD_LOGIC;
    signal hls_SpatialTemporalD_U0_out_It_img_V_din : STD_LOGIC_VECTOR (12 downto 0);
    signal hls_SpatialTemporalD_U0_out_It_img_V_write : STD_LOGIC;
    signal hls_SpatialTemporalD_U0_height_read : STD_LOGIC;
    signal hls_SpatialTemporalD_U0_width_read : STD_LOGIC;
    signal hls_SpatialTemporalD_U0_height_out_din : STD_LOGIC_VECTOR (15 downto 0);
    signal hls_SpatialTemporalD_U0_height_out_write : STD_LOGIC;
    signal hls_SpatialTemporalD_U0_width_out_din : STD_LOGIC_VECTOR (15 downto 0);
    signal hls_SpatialTemporalD_U0_width_out_write : STD_LOGIC;
    signal hls_ComputeIntegrals_U0_ap_start : STD_LOGIC;
    signal hls_ComputeIntegrals_U0_ap_done : STD_LOGIC;
    signal hls_ComputeIntegrals_U0_ap_continue : STD_LOGIC;
    signal hls_ComputeIntegrals_U0_ap_idle : STD_LOGIC;
    signal hls_ComputeIntegrals_U0_ap_ready : STD_LOGIC;
    signal hls_ComputeIntegrals_U0_start_out : STD_LOGIC;
    signal hls_ComputeIntegrals_U0_start_write : STD_LOGIC;
    signal hls_ComputeIntegrals_U0_Ix_img_V_read : STD_LOGIC;
    signal hls_ComputeIntegrals_U0_Iy_img_V_read : STD_LOGIC;
    signal hls_ComputeIntegrals_U0_It_img_V_read : STD_LOGIC;
    signal hls_ComputeIntegrals_U0_A11_img_V_din : STD_LOGIC_VECTOR (33 downto 0);
    signal hls_ComputeIntegrals_U0_A11_img_V_write : STD_LOGIC;
    signal hls_ComputeIntegrals_U0_A12_img_V_din : STD_LOGIC_VECTOR (33 downto 0);
    signal hls_ComputeIntegrals_U0_A12_img_V_write : STD_LOGIC;
    signal hls_ComputeIntegrals_U0_A22_img_V_din : STD_LOGIC_VECTOR (33 downto 0);
    signal hls_ComputeIntegrals_U0_A22_img_V_write : STD_LOGIC;
    signal hls_ComputeIntegrals_U0_B1_img_V_din : STD_LOGIC_VECTOR (33 downto 0);
    signal hls_ComputeIntegrals_U0_B1_img_V_write : STD_LOGIC;
    signal hls_ComputeIntegrals_U0_B2_img_V_din : STD_LOGIC_VECTOR (33 downto 0);
    signal hls_ComputeIntegrals_U0_B2_img_V_write : STD_LOGIC;
    signal hls_ComputeIntegrals_U0_height_read : STD_LOGIC;
    signal hls_ComputeIntegrals_U0_width_read : STD_LOGIC;
    signal hls_ComputeIntegrals_U0_height_out_din : STD_LOGIC_VECTOR (15 downto 0);
    signal hls_ComputeIntegrals_U0_height_out_write : STD_LOGIC;
    signal hls_ComputeIntegrals_U0_width_out_din : STD_LOGIC_VECTOR (15 downto 0);
    signal hls_ComputeIntegrals_U0_width_out_write : STD_LOGIC;
    signal hls_ComputeVectors_U0_ap_start : STD_LOGIC;
    signal hls_ComputeVectors_U0_ap_done : STD_LOGIC;
    signal hls_ComputeVectors_U0_ap_continue : STD_LOGIC;
    signal hls_ComputeVectors_U0_ap_idle : STD_LOGIC;
    signal hls_ComputeVectors_U0_ap_ready : STD_LOGIC;
    signal hls_ComputeVectors_U0_A11_img_V_read : STD_LOGIC;
    signal hls_ComputeVectors_U0_A12_img_V_read : STD_LOGIC;
    signal hls_ComputeVectors_U0_A22_img_V_read : STD_LOGIC;
    signal hls_ComputeVectors_U0_B1_img_V_read : STD_LOGIC;
    signal hls_ComputeVectors_U0_B2_img_V_read : STD_LOGIC;
    signal hls_ComputeVectors_U0_vx_img_TDATA : STD_LOGIC_VECTOR (7 downto 0);
    signal hls_ComputeVectors_U0_vx_img_TVALID : STD_LOGIC;
    signal hls_ComputeVectors_U0_vx_img_TLAST : STD_LOGIC_VECTOR (0 downto 0);
    signal hls_ComputeVectors_U0_vy_img_TDATA : STD_LOGIC_VECTOR (7 downto 0);
    signal hls_ComputeVectors_U0_vy_img_TVALID : STD_LOGIC;
    signal hls_ComputeVectors_U0_vy_img_TLAST : STD_LOGIC_VECTOR (0 downto 0);
    signal hls_ComputeVectors_U0_height_read : STD_LOGIC;
    signal hls_ComputeVectors_U0_width_read : STD_LOGIC;
    signal hls_ComputeVectors_U0_ap_return : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sync_continue : STD_LOGIC;
    signal flt1_img_channel_full_n : STD_LOGIC;
    signal flt1_img_channel_dout : STD_LOGIC_VECTOR (11 downto 0);
    signal flt1_img_channel_empty_n : STD_LOGIC;
    signal flt2_img_channel_full_n : STD_LOGIC;
    signal flt2_img_channel_dout : STD_LOGIC_VECTOR (11 downto 0);
    signal flt2_img_channel_empty_n : STD_LOGIC;
    signal height_c_full_n : STD_LOGIC;
    signal height_c_dout : STD_LOGIC_VECTOR (15 downto 0);
    signal height_c_empty_n : STD_LOGIC;
    signal width_c_full_n : STD_LOGIC;
    signal width_c_dout : STD_LOGIC_VECTOR (15 downto 0);
    signal width_c_empty_n : STD_LOGIC;
    signal Dx1_img_channel_full_n : STD_LOGIC;
    signal Dx1_img_channel_dout : STD_LOGIC_VECTOR (12 downto 0);
    signal Dx1_img_channel_empty_n : STD_LOGIC;
    signal Dy1_img_channel_full_n : STD_LOGIC;
    signal Dy1_img_channel_dout : STD_LOGIC_VECTOR (12 downto 0);
    signal Dy1_img_channel_empty_n : STD_LOGIC;
    signal Dt_img_channel_full_n : STD_LOGIC;
    signal Dt_img_channel_dout : STD_LOGIC_VECTOR (12 downto 0);
    signal Dt_img_channel_empty_n : STD_LOGIC;
    signal height_c9_full_n : STD_LOGIC;
    signal height_c9_dout : STD_LOGIC_VECTOR (15 downto 0);
    signal height_c9_empty_n : STD_LOGIC;
    signal width_c10_full_n : STD_LOGIC;
    signal width_c10_dout : STD_LOGIC_VECTOR (15 downto 0);
    signal width_c10_empty_n : STD_LOGIC;
    signal A11_img_channel_full_n : STD_LOGIC;
    signal A11_img_channel_dout : STD_LOGIC_VECTOR (33 downto 0);
    signal A11_img_channel_empty_n : STD_LOGIC;
    signal A12_img_channel_full_n : STD_LOGIC;
    signal A12_img_channel_dout : STD_LOGIC_VECTOR (33 downto 0);
    signal A12_img_channel_empty_n : STD_LOGIC;
    signal A22_img_channel_full_n : STD_LOGIC;
    signal A22_img_channel_dout : STD_LOGIC_VECTOR (33 downto 0);
    signal A22_img_channel_empty_n : STD_LOGIC;
    signal B1_img_channel_full_n : STD_LOGIC;
    signal B1_img_channel_dout : STD_LOGIC_VECTOR (33 downto 0);
    signal B1_img_channel_empty_n : STD_LOGIC;
    signal B2_img_channel_full_n : STD_LOGIC;
    signal B2_img_channel_dout : STD_LOGIC_VECTOR (33 downto 0);
    signal B2_img_channel_empty_n : STD_LOGIC;
    signal height_c11_full_n : STD_LOGIC;
    signal height_c11_dout : STD_LOGIC_VECTOR (15 downto 0);
    signal height_c11_empty_n : STD_LOGIC;
    signal width_c12_full_n : STD_LOGIC;
    signal width_c12_dout : STD_LOGIC_VECTOR (15 downto 0);
    signal width_c12_empty_n : STD_LOGIC;
    signal ap_sync_done : STD_LOGIC;
    signal ap_sync_ready : STD_LOGIC;
    signal start_for_hls_SpatialTemporalD_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_hls_SpatialTemporalD_U0_full_n : STD_LOGIC;
    signal start_for_hls_SpatialTemporalD_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_hls_SpatialTemporalD_U0_empty_n : STD_LOGIC;
    signal start_for_hls_ComputeIntegrals_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_hls_ComputeIntegrals_U0_full_n : STD_LOGIC;
    signal start_for_hls_ComputeIntegrals_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_hls_ComputeIntegrals_U0_empty_n : STD_LOGIC;
    signal start_for_hls_ComputeVectors_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_hls_ComputeVectors_U0_full_n : STD_LOGIC;
    signal start_for_hls_ComputeVectors_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_hls_ComputeVectors_U0_empty_n : STD_LOGIC;
    signal hls_ComputeVectors_U0_start_full_n : STD_LOGIC;
    signal hls_ComputeVectors_U0_start_write : STD_LOGIC;
    signal ap_return : STD_LOGIC_VECTOR (31 downto 0);

    component hls_twoIsotropicFilt IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        start_full_n : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        start_out : OUT STD_LOGIC;
        start_write : OUT STD_LOGIC;
        inp1_img_TDATA : IN STD_LOGIC_VECTOR (7 downto 0);
        inp1_img_TVALID : IN STD_LOGIC;
        inp1_img_TREADY : OUT STD_LOGIC;
        inp1_img_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
        inp2_img_TDATA : IN STD_LOGIC_VECTOR (7 downto 0);
        inp2_img_TVALID : IN STD_LOGIC;
        inp2_img_TREADY : OUT STD_LOGIC;
        inp2_img_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
        out1_img_V_din : OUT STD_LOGIC_VECTOR (11 downto 0);
        out1_img_V_full_n : IN STD_LOGIC;
        out1_img_V_write : OUT STD_LOGIC;
        out2_img_V_din : OUT STD_LOGIC_VECTOR (11 downto 0);
        out2_img_V_full_n : IN STD_LOGIC;
        out2_img_V_write : OUT STD_LOGIC;
        height : IN STD_LOGIC_VECTOR (15 downto 0);
        width : IN STD_LOGIC_VECTOR (15 downto 0);
        height_out_din : OUT STD_LOGIC_VECTOR (15 downto 0);
        height_out_full_n : IN STD_LOGIC;
        height_out_write : OUT STD_LOGIC;
        width_out_din : OUT STD_LOGIC_VECTOR (15 downto 0);
        width_out_full_n : IN STD_LOGIC;
        width_out_write : OUT STD_LOGIC );
    end component;


    component hls_SpatialTemporalD IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        start_full_n : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        start_out : OUT STD_LOGIC;
        start_write : OUT STD_LOGIC;
        inp1_img_V_dout : IN STD_LOGIC_VECTOR (11 downto 0);
        inp1_img_V_empty_n : IN STD_LOGIC;
        inp1_img_V_read : OUT STD_LOGIC;
        inp2_img_V_dout : IN STD_LOGIC_VECTOR (11 downto 0);
        inp2_img_V_empty_n : IN STD_LOGIC;
        inp2_img_V_read : OUT STD_LOGIC;
        out_Ix_img_V_din : OUT STD_LOGIC_VECTOR (12 downto 0);
        out_Ix_img_V_full_n : IN STD_LOGIC;
        out_Ix_img_V_write : OUT STD_LOGIC;
        out_Iy_img_V_din : OUT STD_LOGIC_VECTOR (12 downto 0);
        out_Iy_img_V_full_n : IN STD_LOGIC;
        out_Iy_img_V_write : OUT STD_LOGIC;
        out_It_img_V_din : OUT STD_LOGIC_VECTOR (12 downto 0);
        out_It_img_V_full_n : IN STD_LOGIC;
        out_It_img_V_write : OUT STD_LOGIC;
        height_dout : IN STD_LOGIC_VECTOR (15 downto 0);
        height_empty_n : IN STD_LOGIC;
        height_read : OUT STD_LOGIC;
        width_dout : IN STD_LOGIC_VECTOR (15 downto 0);
        width_empty_n : IN STD_LOGIC;
        width_read : OUT STD_LOGIC;
        height_out_din : OUT STD_LOGIC_VECTOR (15 downto 0);
        height_out_full_n : IN STD_LOGIC;
        height_out_write : OUT STD_LOGIC;
        width_out_din : OUT STD_LOGIC_VECTOR (15 downto 0);
        width_out_full_n : IN STD_LOGIC;
        width_out_write : OUT STD_LOGIC );
    end component;


    component hls_ComputeIntegrals IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        start_full_n : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        start_out : OUT STD_LOGIC;
        start_write : OUT STD_LOGIC;
        Ix_img_V_dout : IN STD_LOGIC_VECTOR (12 downto 0);
        Ix_img_V_empty_n : IN STD_LOGIC;
        Ix_img_V_read : OUT STD_LOGIC;
        Iy_img_V_dout : IN STD_LOGIC_VECTOR (12 downto 0);
        Iy_img_V_empty_n : IN STD_LOGIC;
        Iy_img_V_read : OUT STD_LOGIC;
        It_img_V_dout : IN STD_LOGIC_VECTOR (12 downto 0);
        It_img_V_empty_n : IN STD_LOGIC;
        It_img_V_read : OUT STD_LOGIC;
        A11_img_V_din : OUT STD_LOGIC_VECTOR (33 downto 0);
        A11_img_V_full_n : IN STD_LOGIC;
        A11_img_V_write : OUT STD_LOGIC;
        A12_img_V_din : OUT STD_LOGIC_VECTOR (33 downto 0);
        A12_img_V_full_n : IN STD_LOGIC;
        A12_img_V_write : OUT STD_LOGIC;
        A22_img_V_din : OUT STD_LOGIC_VECTOR (33 downto 0);
        A22_img_V_full_n : IN STD_LOGIC;
        A22_img_V_write : OUT STD_LOGIC;
        B1_img_V_din : OUT STD_LOGIC_VECTOR (33 downto 0);
        B1_img_V_full_n : IN STD_LOGIC;
        B1_img_V_write : OUT STD_LOGIC;
        B2_img_V_din : OUT STD_LOGIC_VECTOR (33 downto 0);
        B2_img_V_full_n : IN STD_LOGIC;
        B2_img_V_write : OUT STD_LOGIC;
        height_dout : IN STD_LOGIC_VECTOR (15 downto 0);
        height_empty_n : IN STD_LOGIC;
        height_read : OUT STD_LOGIC;
        width_dout : IN STD_LOGIC_VECTOR (15 downto 0);
        width_empty_n : IN STD_LOGIC;
        width_read : OUT STD_LOGIC;
        height_out_din : OUT STD_LOGIC_VECTOR (15 downto 0);
        height_out_full_n : IN STD_LOGIC;
        height_out_write : OUT STD_LOGIC;
        width_out_din : OUT STD_LOGIC_VECTOR (15 downto 0);
        width_out_full_n : IN STD_LOGIC;
        width_out_write : OUT STD_LOGIC );
    end component;


    component hls_ComputeVectors IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        A11_img_V_dout : IN STD_LOGIC_VECTOR (33 downto 0);
        A11_img_V_empty_n : IN STD_LOGIC;
        A11_img_V_read : OUT STD_LOGIC;
        A12_img_V_dout : IN STD_LOGIC_VECTOR (33 downto 0);
        A12_img_V_empty_n : IN STD_LOGIC;
        A12_img_V_read : OUT STD_LOGIC;
        A22_img_V_dout : IN STD_LOGIC_VECTOR (33 downto 0);
        A22_img_V_empty_n : IN STD_LOGIC;
        A22_img_V_read : OUT STD_LOGIC;
        B1_img_V_dout : IN STD_LOGIC_VECTOR (33 downto 0);
        B1_img_V_empty_n : IN STD_LOGIC;
        B1_img_V_read : OUT STD_LOGIC;
        B2_img_V_dout : IN STD_LOGIC_VECTOR (33 downto 0);
        B2_img_V_empty_n : IN STD_LOGIC;
        B2_img_V_read : OUT STD_LOGIC;
        vx_img_TDATA : OUT STD_LOGIC_VECTOR (7 downto 0);
        vx_img_TVALID : OUT STD_LOGIC;
        vx_img_TREADY : IN STD_LOGIC;
        vx_img_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
        vy_img_TDATA : OUT STD_LOGIC_VECTOR (7 downto 0);
        vy_img_TVALID : OUT STD_LOGIC;
        vy_img_TREADY : IN STD_LOGIC;
        vy_img_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
        height_dout : IN STD_LOGIC_VECTOR (15 downto 0);
        height_empty_n : IN STD_LOGIC;
        height_read : OUT STD_LOGIC;
        width_dout : IN STD_LOGIC_VECTOR (15 downto 0);
        width_empty_n : IN STD_LOGIC;
        width_read : OUT STD_LOGIC;
        ap_return : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component fifo_w12_d10_A IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (11 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (11 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component fifo_w16_d2_A IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (15 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (15 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component fifo_w13_d10_A IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (12 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (12 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component fifo_w34_d10_A IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (33 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (33 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component start_for_hls_SpatialTemporalD_U0 IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component start_for_hls_ComputeIntegrals_U0 IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component start_for_hls_ComputeVectors_U0 IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component hls_LK_CONTROL_BUS_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_idle : IN STD_LOGIC;
        ap_return : IN STD_LOGIC_VECTOR (31 downto 0);
        height : OUT STD_LOGIC_VECTOR (15 downto 0);
        width : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;



begin
    hls_LK_CONTROL_BUS_s_axi_U : component hls_LK_CONTROL_BUS_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_CONTROL_BUS_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_CONTROL_BUS_DATA_WIDTH)
    port map (
        AWVALID => s_axi_CONTROL_BUS_AWVALID,
        AWREADY => s_axi_CONTROL_BUS_AWREADY,
        AWADDR => s_axi_CONTROL_BUS_AWADDR,
        WVALID => s_axi_CONTROL_BUS_WVALID,
        WREADY => s_axi_CONTROL_BUS_WREADY,
        WDATA => s_axi_CONTROL_BUS_WDATA,
        WSTRB => s_axi_CONTROL_BUS_WSTRB,
        ARVALID => s_axi_CONTROL_BUS_ARVALID,
        ARREADY => s_axi_CONTROL_BUS_ARREADY,
        ARADDR => s_axi_CONTROL_BUS_ARADDR,
        RVALID => s_axi_CONTROL_BUS_RVALID,
        RREADY => s_axi_CONTROL_BUS_RREADY,
        RDATA => s_axi_CONTROL_BUS_RDATA,
        RRESP => s_axi_CONTROL_BUS_RRESP,
        BVALID => s_axi_CONTROL_BUS_BVALID,
        BREADY => s_axi_CONTROL_BUS_BREADY,
        BRESP => s_axi_CONTROL_BUS_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_idle => ap_idle,
        ap_return => hls_ComputeVectors_U0_ap_return,
        height => height,
        width => width);

    hls_twoIsotropicFilt_U0 : component hls_twoIsotropicFilt
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => hls_twoIsotropicFilt_U0_ap_start,
        start_full_n => start_for_hls_SpatialTemporalD_U0_full_n,
        ap_done => hls_twoIsotropicFilt_U0_ap_done,
        ap_continue => hls_twoIsotropicFilt_U0_ap_continue,
        ap_idle => hls_twoIsotropicFilt_U0_ap_idle,
        ap_ready => hls_twoIsotropicFilt_U0_ap_ready,
        start_out => hls_twoIsotropicFilt_U0_start_out,
        start_write => hls_twoIsotropicFilt_U0_start_write,
        inp1_img_TDATA => inp1_img_TDATA,
        inp1_img_TVALID => inp1_img_TVALID,
        inp1_img_TREADY => hls_twoIsotropicFilt_U0_inp1_img_TREADY,
        inp1_img_TLAST => inp1_img_TLAST,
        inp2_img_TDATA => inp2_img_TDATA,
        inp2_img_TVALID => inp2_img_TVALID,
        inp2_img_TREADY => hls_twoIsotropicFilt_U0_inp2_img_TREADY,
        inp2_img_TLAST => inp2_img_TLAST,
        out1_img_V_din => hls_twoIsotropicFilt_U0_out1_img_V_din,
        out1_img_V_full_n => flt1_img_channel_full_n,
        out1_img_V_write => hls_twoIsotropicFilt_U0_out1_img_V_write,
        out2_img_V_din => hls_twoIsotropicFilt_U0_out2_img_V_din,
        out2_img_V_full_n => flt2_img_channel_full_n,
        out2_img_V_write => hls_twoIsotropicFilt_U0_out2_img_V_write,
        height => height,
        width => width,
        height_out_din => hls_twoIsotropicFilt_U0_height_out_din,
        height_out_full_n => height_c_full_n,
        height_out_write => hls_twoIsotropicFilt_U0_height_out_write,
        width_out_din => hls_twoIsotropicFilt_U0_width_out_din,
        width_out_full_n => width_c_full_n,
        width_out_write => hls_twoIsotropicFilt_U0_width_out_write);

    hls_SpatialTemporalD_U0 : component hls_SpatialTemporalD
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => hls_SpatialTemporalD_U0_ap_start,
        start_full_n => start_for_hls_ComputeIntegrals_U0_full_n,
        ap_done => hls_SpatialTemporalD_U0_ap_done,
        ap_continue => hls_SpatialTemporalD_U0_ap_continue,
        ap_idle => hls_SpatialTemporalD_U0_ap_idle,
        ap_ready => hls_SpatialTemporalD_U0_ap_ready,
        start_out => hls_SpatialTemporalD_U0_start_out,
        start_write => hls_SpatialTemporalD_U0_start_write,
        inp1_img_V_dout => flt1_img_channel_dout,
        inp1_img_V_empty_n => flt1_img_channel_empty_n,
        inp1_img_V_read => hls_SpatialTemporalD_U0_inp1_img_V_read,
        inp2_img_V_dout => flt2_img_channel_dout,
        inp2_img_V_empty_n => flt2_img_channel_empty_n,
        inp2_img_V_read => hls_SpatialTemporalD_U0_inp2_img_V_read,
        out_Ix_img_V_din => hls_SpatialTemporalD_U0_out_Ix_img_V_din,
        out_Ix_img_V_full_n => Dx1_img_channel_full_n,
        out_Ix_img_V_write => hls_SpatialTemporalD_U0_out_Ix_img_V_write,
        out_Iy_img_V_din => hls_SpatialTemporalD_U0_out_Iy_img_V_din,
        out_Iy_img_V_full_n => Dy1_img_channel_full_n,
        out_Iy_img_V_write => hls_SpatialTemporalD_U0_out_Iy_img_V_write,
        out_It_img_V_din => hls_SpatialTemporalD_U0_out_It_img_V_din,
        out_It_img_V_full_n => Dt_img_channel_full_n,
        out_It_img_V_write => hls_SpatialTemporalD_U0_out_It_img_V_write,
        height_dout => height_c_dout,
        height_empty_n => height_c_empty_n,
        height_read => hls_SpatialTemporalD_U0_height_read,
        width_dout => width_c_dout,
        width_empty_n => width_c_empty_n,
        width_read => hls_SpatialTemporalD_U0_width_read,
        height_out_din => hls_SpatialTemporalD_U0_height_out_din,
        height_out_full_n => height_c9_full_n,
        height_out_write => hls_SpatialTemporalD_U0_height_out_write,
        width_out_din => hls_SpatialTemporalD_U0_width_out_din,
        width_out_full_n => width_c10_full_n,
        width_out_write => hls_SpatialTemporalD_U0_width_out_write);

    hls_ComputeIntegrals_U0 : component hls_ComputeIntegrals
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => hls_ComputeIntegrals_U0_ap_start,
        start_full_n => start_for_hls_ComputeVectors_U0_full_n,
        ap_done => hls_ComputeIntegrals_U0_ap_done,
        ap_continue => hls_ComputeIntegrals_U0_ap_continue,
        ap_idle => hls_ComputeIntegrals_U0_ap_idle,
        ap_ready => hls_ComputeIntegrals_U0_ap_ready,
        start_out => hls_ComputeIntegrals_U0_start_out,
        start_write => hls_ComputeIntegrals_U0_start_write,
        Ix_img_V_dout => Dx1_img_channel_dout,
        Ix_img_V_empty_n => Dx1_img_channel_empty_n,
        Ix_img_V_read => hls_ComputeIntegrals_U0_Ix_img_V_read,
        Iy_img_V_dout => Dy1_img_channel_dout,
        Iy_img_V_empty_n => Dy1_img_channel_empty_n,
        Iy_img_V_read => hls_ComputeIntegrals_U0_Iy_img_V_read,
        It_img_V_dout => Dt_img_channel_dout,
        It_img_V_empty_n => Dt_img_channel_empty_n,
        It_img_V_read => hls_ComputeIntegrals_U0_It_img_V_read,
        A11_img_V_din => hls_ComputeIntegrals_U0_A11_img_V_din,
        A11_img_V_full_n => A11_img_channel_full_n,
        A11_img_V_write => hls_ComputeIntegrals_U0_A11_img_V_write,
        A12_img_V_din => hls_ComputeIntegrals_U0_A12_img_V_din,
        A12_img_V_full_n => A12_img_channel_full_n,
        A12_img_V_write => hls_ComputeIntegrals_U0_A12_img_V_write,
        A22_img_V_din => hls_ComputeIntegrals_U0_A22_img_V_din,
        A22_img_V_full_n => A22_img_channel_full_n,
        A22_img_V_write => hls_ComputeIntegrals_U0_A22_img_V_write,
        B1_img_V_din => hls_ComputeIntegrals_U0_B1_img_V_din,
        B1_img_V_full_n => B1_img_channel_full_n,
        B1_img_V_write => hls_ComputeIntegrals_U0_B1_img_V_write,
        B2_img_V_din => hls_ComputeIntegrals_U0_B2_img_V_din,
        B2_img_V_full_n => B2_img_channel_full_n,
        B2_img_V_write => hls_ComputeIntegrals_U0_B2_img_V_write,
        height_dout => height_c9_dout,
        height_empty_n => height_c9_empty_n,
        height_read => hls_ComputeIntegrals_U0_height_read,
        width_dout => width_c10_dout,
        width_empty_n => width_c10_empty_n,
        width_read => hls_ComputeIntegrals_U0_width_read,
        height_out_din => hls_ComputeIntegrals_U0_height_out_din,
        height_out_full_n => height_c11_full_n,
        height_out_write => hls_ComputeIntegrals_U0_height_out_write,
        width_out_din => hls_ComputeIntegrals_U0_width_out_din,
        width_out_full_n => width_c12_full_n,
        width_out_write => hls_ComputeIntegrals_U0_width_out_write);

    hls_ComputeVectors_U0 : component hls_ComputeVectors
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => hls_ComputeVectors_U0_ap_start,
        ap_done => hls_ComputeVectors_U0_ap_done,
        ap_continue => hls_ComputeVectors_U0_ap_continue,
        ap_idle => hls_ComputeVectors_U0_ap_idle,
        ap_ready => hls_ComputeVectors_U0_ap_ready,
        A11_img_V_dout => A11_img_channel_dout,
        A11_img_V_empty_n => A11_img_channel_empty_n,
        A11_img_V_read => hls_ComputeVectors_U0_A11_img_V_read,
        A12_img_V_dout => A12_img_channel_dout,
        A12_img_V_empty_n => A12_img_channel_empty_n,
        A12_img_V_read => hls_ComputeVectors_U0_A12_img_V_read,
        A22_img_V_dout => A22_img_channel_dout,
        A22_img_V_empty_n => A22_img_channel_empty_n,
        A22_img_V_read => hls_ComputeVectors_U0_A22_img_V_read,
        B1_img_V_dout => B1_img_channel_dout,
        B1_img_V_empty_n => B1_img_channel_empty_n,
        B1_img_V_read => hls_ComputeVectors_U0_B1_img_V_read,
        B2_img_V_dout => B2_img_channel_dout,
        B2_img_V_empty_n => B2_img_channel_empty_n,
        B2_img_V_read => hls_ComputeVectors_U0_B2_img_V_read,
        vx_img_TDATA => hls_ComputeVectors_U0_vx_img_TDATA,
        vx_img_TVALID => hls_ComputeVectors_U0_vx_img_TVALID,
        vx_img_TREADY => vx_img_TREADY,
        vx_img_TLAST => hls_ComputeVectors_U0_vx_img_TLAST,
        vy_img_TDATA => hls_ComputeVectors_U0_vy_img_TDATA,
        vy_img_TVALID => hls_ComputeVectors_U0_vy_img_TVALID,
        vy_img_TREADY => vy_img_TREADY,
        vy_img_TLAST => hls_ComputeVectors_U0_vy_img_TLAST,
        height_dout => height_c11_dout,
        height_empty_n => height_c11_empty_n,
        height_read => hls_ComputeVectors_U0_height_read,
        width_dout => width_c12_dout,
        width_empty_n => width_c12_empty_n,
        width_read => hls_ComputeVectors_U0_width_read,
        ap_return => hls_ComputeVectors_U0_ap_return);

    flt1_img_channel_U : component fifo_w12_d10_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => hls_twoIsotropicFilt_U0_out1_img_V_din,
        if_full_n => flt1_img_channel_full_n,
        if_write => hls_twoIsotropicFilt_U0_out1_img_V_write,
        if_dout => flt1_img_channel_dout,
        if_empty_n => flt1_img_channel_empty_n,
        if_read => hls_SpatialTemporalD_U0_inp1_img_V_read);

    flt2_img_channel_U : component fifo_w12_d10_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => hls_twoIsotropicFilt_U0_out2_img_V_din,
        if_full_n => flt2_img_channel_full_n,
        if_write => hls_twoIsotropicFilt_U0_out2_img_V_write,
        if_dout => flt2_img_channel_dout,
        if_empty_n => flt2_img_channel_empty_n,
        if_read => hls_SpatialTemporalD_U0_inp2_img_V_read);

    height_c_U : component fifo_w16_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => hls_twoIsotropicFilt_U0_height_out_din,
        if_full_n => height_c_full_n,
        if_write => hls_twoIsotropicFilt_U0_height_out_write,
        if_dout => height_c_dout,
        if_empty_n => height_c_empty_n,
        if_read => hls_SpatialTemporalD_U0_height_read);

    width_c_U : component fifo_w16_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => hls_twoIsotropicFilt_U0_width_out_din,
        if_full_n => width_c_full_n,
        if_write => hls_twoIsotropicFilt_U0_width_out_write,
        if_dout => width_c_dout,
        if_empty_n => width_c_empty_n,
        if_read => hls_SpatialTemporalD_U0_width_read);

    Dx1_img_channel_U : component fifo_w13_d10_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => hls_SpatialTemporalD_U0_out_Ix_img_V_din,
        if_full_n => Dx1_img_channel_full_n,
        if_write => hls_SpatialTemporalD_U0_out_Ix_img_V_write,
        if_dout => Dx1_img_channel_dout,
        if_empty_n => Dx1_img_channel_empty_n,
        if_read => hls_ComputeIntegrals_U0_Ix_img_V_read);

    Dy1_img_channel_U : component fifo_w13_d10_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => hls_SpatialTemporalD_U0_out_Iy_img_V_din,
        if_full_n => Dy1_img_channel_full_n,
        if_write => hls_SpatialTemporalD_U0_out_Iy_img_V_write,
        if_dout => Dy1_img_channel_dout,
        if_empty_n => Dy1_img_channel_empty_n,
        if_read => hls_ComputeIntegrals_U0_Iy_img_V_read);

    Dt_img_channel_U : component fifo_w13_d10_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => hls_SpatialTemporalD_U0_out_It_img_V_din,
        if_full_n => Dt_img_channel_full_n,
        if_write => hls_SpatialTemporalD_U0_out_It_img_V_write,
        if_dout => Dt_img_channel_dout,
        if_empty_n => Dt_img_channel_empty_n,
        if_read => hls_ComputeIntegrals_U0_It_img_V_read);

    height_c9_U : component fifo_w16_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => hls_SpatialTemporalD_U0_height_out_din,
        if_full_n => height_c9_full_n,
        if_write => hls_SpatialTemporalD_U0_height_out_write,
        if_dout => height_c9_dout,
        if_empty_n => height_c9_empty_n,
        if_read => hls_ComputeIntegrals_U0_height_read);

    width_c10_U : component fifo_w16_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => hls_SpatialTemporalD_U0_width_out_din,
        if_full_n => width_c10_full_n,
        if_write => hls_SpatialTemporalD_U0_width_out_write,
        if_dout => width_c10_dout,
        if_empty_n => width_c10_empty_n,
        if_read => hls_ComputeIntegrals_U0_width_read);

    A11_img_channel_U : component fifo_w34_d10_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => hls_ComputeIntegrals_U0_A11_img_V_din,
        if_full_n => A11_img_channel_full_n,
        if_write => hls_ComputeIntegrals_U0_A11_img_V_write,
        if_dout => A11_img_channel_dout,
        if_empty_n => A11_img_channel_empty_n,
        if_read => hls_ComputeVectors_U0_A11_img_V_read);

    A12_img_channel_U : component fifo_w34_d10_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => hls_ComputeIntegrals_U0_A12_img_V_din,
        if_full_n => A12_img_channel_full_n,
        if_write => hls_ComputeIntegrals_U0_A12_img_V_write,
        if_dout => A12_img_channel_dout,
        if_empty_n => A12_img_channel_empty_n,
        if_read => hls_ComputeVectors_U0_A12_img_V_read);

    A22_img_channel_U : component fifo_w34_d10_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => hls_ComputeIntegrals_U0_A22_img_V_din,
        if_full_n => A22_img_channel_full_n,
        if_write => hls_ComputeIntegrals_U0_A22_img_V_write,
        if_dout => A22_img_channel_dout,
        if_empty_n => A22_img_channel_empty_n,
        if_read => hls_ComputeVectors_U0_A22_img_V_read);

    B1_img_channel_U : component fifo_w34_d10_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => hls_ComputeIntegrals_U0_B1_img_V_din,
        if_full_n => B1_img_channel_full_n,
        if_write => hls_ComputeIntegrals_U0_B1_img_V_write,
        if_dout => B1_img_channel_dout,
        if_empty_n => B1_img_channel_empty_n,
        if_read => hls_ComputeVectors_U0_B1_img_V_read);

    B2_img_channel_U : component fifo_w34_d10_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => hls_ComputeIntegrals_U0_B2_img_V_din,
        if_full_n => B2_img_channel_full_n,
        if_write => hls_ComputeIntegrals_U0_B2_img_V_write,
        if_dout => B2_img_channel_dout,
        if_empty_n => B2_img_channel_empty_n,
        if_read => hls_ComputeVectors_U0_B2_img_V_read);

    height_c11_U : component fifo_w16_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => hls_ComputeIntegrals_U0_height_out_din,
        if_full_n => height_c11_full_n,
        if_write => hls_ComputeIntegrals_U0_height_out_write,
        if_dout => height_c11_dout,
        if_empty_n => height_c11_empty_n,
        if_read => hls_ComputeVectors_U0_height_read);

    width_c12_U : component fifo_w16_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => hls_ComputeIntegrals_U0_width_out_din,
        if_full_n => width_c12_full_n,
        if_write => hls_ComputeIntegrals_U0_width_out_write,
        if_dout => width_c12_dout,
        if_empty_n => width_c12_empty_n,
        if_read => hls_ComputeVectors_U0_width_read);

    start_for_hls_SpatialTemporalD_U0_U : component start_for_hls_SpatialTemporalD_U0
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_hls_SpatialTemporalD_U0_din,
        if_full_n => start_for_hls_SpatialTemporalD_U0_full_n,
        if_write => hls_twoIsotropicFilt_U0_start_write,
        if_dout => start_for_hls_SpatialTemporalD_U0_dout,
        if_empty_n => start_for_hls_SpatialTemporalD_U0_empty_n,
        if_read => hls_SpatialTemporalD_U0_ap_ready);

    start_for_hls_ComputeIntegrals_U0_U : component start_for_hls_ComputeIntegrals_U0
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_hls_ComputeIntegrals_U0_din,
        if_full_n => start_for_hls_ComputeIntegrals_U0_full_n,
        if_write => hls_SpatialTemporalD_U0_start_write,
        if_dout => start_for_hls_ComputeIntegrals_U0_dout,
        if_empty_n => start_for_hls_ComputeIntegrals_U0_empty_n,
        if_read => hls_ComputeIntegrals_U0_ap_ready);

    start_for_hls_ComputeVectors_U0_U : component start_for_hls_ComputeVectors_U0
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_hls_ComputeVectors_U0_din,
        if_full_n => start_for_hls_ComputeVectors_U0_full_n,
        if_write => hls_ComputeIntegrals_U0_start_write,
        if_dout => start_for_hls_ComputeVectors_U0_dout,
        if_empty_n => start_for_hls_ComputeVectors_U0_empty_n,
        if_read => hls_ComputeVectors_U0_ap_ready);




    ap_done <= hls_ComputeVectors_U0_ap_done;
    ap_idle <= (hls_twoIsotropicFilt_U0_ap_idle and hls_SpatialTemporalD_U0_ap_idle and hls_ComputeVectors_U0_ap_idle and hls_ComputeIntegrals_U0_ap_idle);
    ap_ready <= hls_twoIsotropicFilt_U0_ap_ready;

    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    ap_sync_continue <= ap_const_logic_1;
    ap_sync_done <= hls_ComputeVectors_U0_ap_done;
    ap_sync_ready <= hls_twoIsotropicFilt_U0_ap_ready;
    hls_ComputeIntegrals_U0_ap_continue <= ap_const_logic_1;
    hls_ComputeIntegrals_U0_ap_start <= start_for_hls_ComputeIntegrals_U0_empty_n;
    hls_ComputeVectors_U0_ap_continue <= ap_const_logic_1;
    hls_ComputeVectors_U0_ap_start <= start_for_hls_ComputeVectors_U0_empty_n;
    hls_ComputeVectors_U0_start_full_n <= ap_const_logic_1;
    hls_ComputeVectors_U0_start_write <= ap_const_logic_0;
    hls_SpatialTemporalD_U0_ap_continue <= ap_const_logic_1;
    hls_SpatialTemporalD_U0_ap_start <= start_for_hls_SpatialTemporalD_U0_empty_n;
    hls_twoIsotropicFilt_U0_ap_continue <= ap_const_logic_1;
    hls_twoIsotropicFilt_U0_ap_start <= ap_start;
    inp1_img_TREADY <= hls_twoIsotropicFilt_U0_inp1_img_TREADY;
    inp2_img_TREADY <= hls_twoIsotropicFilt_U0_inp2_img_TREADY;
    start_for_hls_ComputeIntegrals_U0_din <= (0=>ap_const_logic_1, others=>'-');
    start_for_hls_ComputeVectors_U0_din <= (0=>ap_const_logic_1, others=>'-');
    start_for_hls_SpatialTemporalD_U0_din <= (0=>ap_const_logic_1, others=>'-');
    vx_img_TDATA <= hls_ComputeVectors_U0_vx_img_TDATA;
    vx_img_TLAST <= hls_ComputeVectors_U0_vx_img_TLAST;
    vx_img_TVALID <= hls_ComputeVectors_U0_vx_img_TVALID;
    vy_img_TDATA <= hls_ComputeVectors_U0_vy_img_TDATA;
    vy_img_TLAST <= hls_ComputeVectors_U0_vy_img_TLAST;
    vy_img_TVALID <= hls_ComputeVectors_U0_vy_img_TVALID;
end behav;
