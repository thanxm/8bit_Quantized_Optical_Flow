// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module hls_ComputeVectors (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        A11_img_V_dout,
        A11_img_V_empty_n,
        A11_img_V_read,
        A12_img_V_dout,
        A12_img_V_empty_n,
        A12_img_V_read,
        A22_img_V_dout,
        A22_img_V_empty_n,
        A22_img_V_read,
        B1_img_V_dout,
        B1_img_V_empty_n,
        B1_img_V_read,
        B2_img_V_dout,
        B2_img_V_empty_n,
        B2_img_V_read,
        vx_img_TDATA,
        vx_img_TVALID,
        vx_img_TREADY,
        vx_img_TLAST,
        vy_img_TDATA,
        vy_img_TVALID,
        vy_img_TREADY,
        vy_img_TLAST,
        height_dout,
        height_empty_n,
        height_read,
        width_dout,
        width_empty_n,
        width_read,
        ap_return
);

parameter    ap_ST_fsm_state1 = 3'd1;
parameter    ap_ST_fsm_pp0_stage0 = 3'd2;
parameter    ap_ST_fsm_state33 = 3'd4;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [33:0] A11_img_V_dout;
input   A11_img_V_empty_n;
output   A11_img_V_read;
input  [33:0] A12_img_V_dout;
input   A12_img_V_empty_n;
output   A12_img_V_read;
input  [33:0] A22_img_V_dout;
input   A22_img_V_empty_n;
output   A22_img_V_read;
input  [33:0] B1_img_V_dout;
input   B1_img_V_empty_n;
output   B1_img_V_read;
input  [33:0] B2_img_V_dout;
input   B2_img_V_empty_n;
output   B2_img_V_read;
output  [7:0] vx_img_TDATA;
output   vx_img_TVALID;
input   vx_img_TREADY;
output  [0:0] vx_img_TLAST;
output  [7:0] vy_img_TDATA;
output   vy_img_TVALID;
input   vy_img_TREADY;
output  [0:0] vy_img_TLAST;
input  [15:0] height_dout;
input   height_empty_n;
output   height_read;
input  [15:0] width_dout;
input   width_empty_n;
output   width_read;
output  [31:0] ap_return;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg A11_img_V_read;
reg A12_img_V_read;
reg A22_img_V_read;
reg B1_img_V_read;
reg B2_img_V_read;
reg height_read;
reg width_read;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [7:0] vx_img_V_data_V_1_data_out;
reg    vx_img_V_data_V_1_vld_in;
wire    vx_img_V_data_V_1_vld_out;
wire    vx_img_V_data_V_1_ack_in;
wire    vx_img_V_data_V_1_ack_out;
reg   [7:0] vx_img_V_data_V_1_payload_A;
reg   [7:0] vx_img_V_data_V_1_payload_B;
reg    vx_img_V_data_V_1_sel_rd;
reg    vx_img_V_data_V_1_sel_wr;
wire    vx_img_V_data_V_1_sel;
wire    vx_img_V_data_V_1_load_A;
wire    vx_img_V_data_V_1_load_B;
reg   [1:0] vx_img_V_data_V_1_state;
wire    vx_img_V_data_V_1_state_cmp_full;
reg   [0:0] vx_img_V_last_V_1_data_out;
reg    vx_img_V_last_V_1_vld_in;
wire    vx_img_V_last_V_1_vld_out;
wire    vx_img_V_last_V_1_ack_in;
wire    vx_img_V_last_V_1_ack_out;
reg   [0:0] vx_img_V_last_V_1_payload_A;
reg   [0:0] vx_img_V_last_V_1_payload_B;
reg    vx_img_V_last_V_1_sel_rd;
reg    vx_img_V_last_V_1_sel_wr;
wire    vx_img_V_last_V_1_sel;
wire    vx_img_V_last_V_1_load_A;
wire    vx_img_V_last_V_1_load_B;
reg   [1:0] vx_img_V_last_V_1_state;
wire    vx_img_V_last_V_1_state_cmp_full;
reg   [7:0] vy_img_V_data_V_1_data_out;
reg    vy_img_V_data_V_1_vld_in;
wire    vy_img_V_data_V_1_vld_out;
wire    vy_img_V_data_V_1_ack_in;
wire    vy_img_V_data_V_1_ack_out;
reg   [7:0] vy_img_V_data_V_1_payload_A;
reg   [7:0] vy_img_V_data_V_1_payload_B;
reg    vy_img_V_data_V_1_sel_rd;
reg    vy_img_V_data_V_1_sel_wr;
wire    vy_img_V_data_V_1_sel;
wire    vy_img_V_data_V_1_load_A;
wire    vy_img_V_data_V_1_load_B;
reg   [1:0] vy_img_V_data_V_1_state;
wire    vy_img_V_data_V_1_state_cmp_full;
reg   [0:0] vy_img_V_last_V_1_data_out;
reg    vy_img_V_last_V_1_vld_in;
wire    vy_img_V_last_V_1_vld_out;
wire    vy_img_V_last_V_1_ack_in;
wire    vy_img_V_last_V_1_ack_out;
reg   [0:0] vy_img_V_last_V_1_payload_A;
reg   [0:0] vy_img_V_last_V_1_payload_B;
reg    vy_img_V_last_V_1_sel_rd;
reg    vy_img_V_last_V_1_sel_wr;
wire    vy_img_V_last_V_1_sel;
wire    vy_img_V_last_V_1_load_A;
wire    vy_img_V_last_V_1_load_B;
reg   [1:0] vy_img_V_last_V_1_state;
wire    vy_img_V_last_V_1_state_cmp_full;
reg    A11_img_V_blk_n;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0;
reg   [0:0] exitcond_flatten_reg_938;
reg    A12_img_V_blk_n;
reg    A22_img_V_blk_n;
reg    B1_img_V_blk_n;
reg    B2_img_V_blk_n;
reg    vx_img_TDATA_blk_n;
reg    ap_enable_reg_pp0_iter29;
reg   [0:0] exitcond_flatten_reg_938_pp0_iter28_reg;
reg    ap_enable_reg_pp0_iter30;
reg   [0:0] exitcond_flatten_reg_938_pp0_iter29_reg;
reg    vy_img_TDATA_blk_n;
reg    height_blk_n;
reg    width_blk_n;
reg   [31:0] indvar_flatten_reg_264;
reg   [15:0] row_i_reg_275;
reg   [15:0] col_i_reg_286;
reg   [31:0] cnt_1_i_reg_297;
reg   [15:0] width_read_reg_917;
reg    ap_block_state1;
wire   [16:0] tmp_i_fu_345_p2;
reg   [16:0] tmp_i_reg_922;
wire   [16:0] tmp_66_i_fu_355_p2;
reg   [16:0] tmp_66_i_reg_928;
wire   [31:0] bound_fu_911_p2;
reg   [31:0] bound_reg_933;
wire   [0:0] exitcond_flatten_fu_378_p2;
wire    ap_block_state2_pp0_stage0_iter0;
reg    ap_block_state3_pp0_stage0_iter1;
wire    ap_block_state4_pp0_stage0_iter2;
wire    ap_block_state5_pp0_stage0_iter3;
wire    ap_block_state6_pp0_stage0_iter4;
wire    ap_block_state7_pp0_stage0_iter5;
wire    ap_block_state8_pp0_stage0_iter6;
wire    ap_block_state9_pp0_stage0_iter7;
wire    ap_block_state10_pp0_stage0_iter8;
wire    ap_block_state11_pp0_stage0_iter9;
wire    ap_block_state12_pp0_stage0_iter10;
wire    ap_block_state13_pp0_stage0_iter11;
wire    ap_block_state14_pp0_stage0_iter12;
wire    ap_block_state15_pp0_stage0_iter13;
wire    ap_block_state16_pp0_stage0_iter14;
wire    ap_block_state17_pp0_stage0_iter15;
wire    ap_block_state18_pp0_stage0_iter16;
wire    ap_block_state19_pp0_stage0_iter17;
wire    ap_block_state20_pp0_stage0_iter18;
wire    ap_block_state21_pp0_stage0_iter19;
wire    ap_block_state22_pp0_stage0_iter20;
wire    ap_block_state23_pp0_stage0_iter21;
wire    ap_block_state24_pp0_stage0_iter22;
wire    ap_block_state25_pp0_stage0_iter23;
wire    ap_block_state26_pp0_stage0_iter24;
wire    ap_block_state27_pp0_stage0_iter25;
wire    ap_block_state28_pp0_stage0_iter26;
wire    ap_block_state29_pp0_stage0_iter27;
wire    ap_block_state30_pp0_stage0_iter28;
wire    ap_block_state31_pp0_stage0_iter29;
reg    ap_block_state31_io;
wire    ap_block_state32_pp0_stage0_iter30;
reg    ap_block_state32_io;
reg    ap_block_pp0_stage0_11001;
reg   [0:0] exitcond_flatten_reg_938_pp0_iter1_reg;
reg   [0:0] exitcond_flatten_reg_938_pp0_iter2_reg;
reg   [0:0] exitcond_flatten_reg_938_pp0_iter3_reg;
reg   [0:0] exitcond_flatten_reg_938_pp0_iter4_reg;
reg   [0:0] exitcond_flatten_reg_938_pp0_iter5_reg;
reg   [0:0] exitcond_flatten_reg_938_pp0_iter6_reg;
reg   [0:0] exitcond_flatten_reg_938_pp0_iter7_reg;
reg   [0:0] exitcond_flatten_reg_938_pp0_iter8_reg;
reg   [0:0] exitcond_flatten_reg_938_pp0_iter9_reg;
reg   [0:0] exitcond_flatten_reg_938_pp0_iter10_reg;
reg   [0:0] exitcond_flatten_reg_938_pp0_iter11_reg;
reg   [0:0] exitcond_flatten_reg_938_pp0_iter12_reg;
reg   [0:0] exitcond_flatten_reg_938_pp0_iter13_reg;
reg   [0:0] exitcond_flatten_reg_938_pp0_iter14_reg;
reg   [0:0] exitcond_flatten_reg_938_pp0_iter15_reg;
reg   [0:0] exitcond_flatten_reg_938_pp0_iter16_reg;
reg   [0:0] exitcond_flatten_reg_938_pp0_iter17_reg;
reg   [0:0] exitcond_flatten_reg_938_pp0_iter18_reg;
reg   [0:0] exitcond_flatten_reg_938_pp0_iter19_reg;
reg   [0:0] exitcond_flatten_reg_938_pp0_iter20_reg;
reg   [0:0] exitcond_flatten_reg_938_pp0_iter21_reg;
reg   [0:0] exitcond_flatten_reg_938_pp0_iter22_reg;
reg   [0:0] exitcond_flatten_reg_938_pp0_iter23_reg;
reg   [0:0] exitcond_flatten_reg_938_pp0_iter24_reg;
reg   [0:0] exitcond_flatten_reg_938_pp0_iter25_reg;
reg   [0:0] exitcond_flatten_reg_938_pp0_iter26_reg;
reg   [0:0] exitcond_flatten_reg_938_pp0_iter27_reg;
wire   [31:0] indvar_flatten_next_fu_383_p2;
reg    ap_enable_reg_pp0_iter0;
wire   [15:0] row_i_mid2_fu_425_p3;
wire   [0:0] packy_last_V_fu_442_p2;
reg   [0:0] packy_last_V_reg_952;
reg   [0:0] packy_last_V_reg_952_pp0_iter1_reg;
reg   [0:0] packy_last_V_reg_952_pp0_iter2_reg;
reg   [0:0] packy_last_V_reg_952_pp0_iter3_reg;
reg   [0:0] packy_last_V_reg_952_pp0_iter4_reg;
reg   [0:0] packy_last_V_reg_952_pp0_iter5_reg;
reg   [0:0] packy_last_V_reg_952_pp0_iter6_reg;
reg   [0:0] packy_last_V_reg_952_pp0_iter7_reg;
reg   [0:0] packy_last_V_reg_952_pp0_iter8_reg;
reg   [0:0] packy_last_V_reg_952_pp0_iter9_reg;
reg   [0:0] packy_last_V_reg_952_pp0_iter10_reg;
reg   [0:0] packy_last_V_reg_952_pp0_iter11_reg;
reg   [0:0] packy_last_V_reg_952_pp0_iter12_reg;
reg   [0:0] packy_last_V_reg_952_pp0_iter13_reg;
reg   [0:0] packy_last_V_reg_952_pp0_iter14_reg;
reg   [0:0] packy_last_V_reg_952_pp0_iter15_reg;
reg   [0:0] packy_last_V_reg_952_pp0_iter16_reg;
reg   [0:0] packy_last_V_reg_952_pp0_iter17_reg;
reg   [0:0] packy_last_V_reg_952_pp0_iter18_reg;
reg   [0:0] packy_last_V_reg_952_pp0_iter19_reg;
reg   [0:0] packy_last_V_reg_952_pp0_iter20_reg;
reg   [0:0] packy_last_V_reg_952_pp0_iter21_reg;
reg   [0:0] packy_last_V_reg_952_pp0_iter22_reg;
reg   [0:0] packy_last_V_reg_952_pp0_iter23_reg;
reg   [0:0] packy_last_V_reg_952_pp0_iter24_reg;
reg   [0:0] packy_last_V_reg_952_pp0_iter25_reg;
reg   [0:0] packy_last_V_reg_952_pp0_iter26_reg;
reg   [0:0] packy_last_V_reg_952_pp0_iter27_reg;
reg   [0:0] packy_last_V_reg_952_pp0_iter28_reg;
wire   [15:0] col_fu_448_p2;
reg  signed [33:0] A_0_0_V_reg_963;
reg  signed [33:0] A_0_0_V_reg_963_pp0_iter2_reg;
reg  signed [33:0] A_0_1_V_reg_969;
reg  signed [33:0] A_0_1_V_reg_969_pp0_iter2_reg;
reg  signed [33:0] A_1_1_V_reg_975;
reg  signed [33:0] A_1_1_V_reg_975_pp0_iter2_reg;
reg  signed [33:0] A_1_1_V_reg_975_pp0_iter3_reg;
reg   [33:0] B_0_V_reg_981;
reg   [33:0] B_0_V_reg_981_pp0_iter2_reg;
reg   [33:0] B_0_V_reg_981_pp0_iter3_reg;
reg   [33:0] B_1_V_reg_986;
reg   [33:0] B_1_V_reg_986_pp0_iter2_reg;
reg   [33:0] B_1_V_reg_986_pp0_iter3_reg;
wire   [67:0] a_x_d_V_fu_460_p2;
reg   [67:0] a_x_d_V_reg_991;
wire   [67:0] b_x_c_V_fu_469_p2;
reg   [67:0] b_x_c_V_reg_997;
wire   [0:0] tmp_26_i_i_fu_504_p2;
reg   [0:0] tmp_26_i_i_reg_1008;
reg   [0:0] tmp_26_i_i_reg_1008_pp0_iter4_reg;
reg   [0:0] tmp_26_i_i_reg_1008_pp0_iter5_reg;
reg   [0:0] tmp_26_i_i_reg_1008_pp0_iter6_reg;
reg   [0:0] tmp_26_i_i_reg_1008_pp0_iter7_reg;
reg   [0:0] tmp_26_i_i_reg_1008_pp0_iter8_reg;
reg   [0:0] tmp_26_i_i_reg_1008_pp0_iter9_reg;
reg   [0:0] tmp_26_i_i_reg_1008_pp0_iter10_reg;
reg   [0:0] tmp_26_i_i_reg_1008_pp0_iter11_reg;
reg   [0:0] tmp_26_i_i_reg_1008_pp0_iter12_reg;
reg   [0:0] tmp_26_i_i_reg_1008_pp0_iter13_reg;
reg   [0:0] tmp_26_i_i_reg_1008_pp0_iter14_reg;
reg   [0:0] tmp_26_i_i_reg_1008_pp0_iter15_reg;
reg   [0:0] tmp_26_i_i_reg_1008_pp0_iter16_reg;
reg   [0:0] tmp_26_i_i_reg_1008_pp0_iter17_reg;
reg   [0:0] tmp_26_i_i_reg_1008_pp0_iter18_reg;
reg   [0:0] tmp_26_i_i_reg_1008_pp0_iter19_reg;
reg   [0:0] tmp_26_i_i_reg_1008_pp0_iter20_reg;
wire  signed [33:0] tmp_27_i_i_fu_508_p2;
reg  signed [33:0] tmp_27_i_i_reg_1013;
wire   [35:0] tmp_37_i_i_fu_530_p2;
reg   [35:0] tmp_37_i_i_reg_1018;
wire   [0:0] invertible_demorgan_fu_542_p2;
reg   [0:0] invertible_demorgan_reg_1023;
reg   [0:0] invertible_demorgan_reg_1023_pp0_iter4_reg;
reg   [0:0] invertible_demorgan_reg_1023_pp0_iter5_reg;
reg   [0:0] invertible_demorgan_reg_1023_pp0_iter6_reg;
reg   [0:0] invertible_demorgan_reg_1023_pp0_iter7_reg;
reg   [0:0] invertible_demorgan_reg_1023_pp0_iter8_reg;
reg   [0:0] invertible_demorgan_reg_1023_pp0_iter9_reg;
reg   [0:0] invertible_demorgan_reg_1023_pp0_iter10_reg;
reg   [0:0] invertible_demorgan_reg_1023_pp0_iter11_reg;
reg   [0:0] invertible_demorgan_reg_1023_pp0_iter12_reg;
reg   [0:0] invertible_demorgan_reg_1023_pp0_iter13_reg;
reg   [0:0] invertible_demorgan_reg_1023_pp0_iter14_reg;
reg   [0:0] invertible_demorgan_reg_1023_pp0_iter15_reg;
reg   [0:0] invertible_demorgan_reg_1023_pp0_iter16_reg;
reg   [0:0] invertible_demorgan_reg_1023_pp0_iter17_reg;
reg   [0:0] invertible_demorgan_reg_1023_pp0_iter18_reg;
reg   [0:0] invertible_demorgan_reg_1023_pp0_iter19_reg;
reg   [0:0] invertible_demorgan_reg_1023_pp0_iter20_reg;
reg   [0:0] invertible_demorgan_reg_1023_pp0_iter21_reg;
reg   [0:0] invertible_demorgan_reg_1023_pp0_iter22_reg;
reg   [0:0] invertible_demorgan_reg_1023_pp0_iter23_reg;
reg   [0:0] invertible_demorgan_reg_1023_pp0_iter24_reg;
reg   [0:0] invertible_demorgan_reg_1023_pp0_iter25_reg;
reg   [0:0] invertible_demorgan_reg_1023_pp0_iter26_reg;
reg   [0:0] invertible_demorgan_reg_1023_pp0_iter27_reg;
wire   [63:0] tmp_30_i_i_fu_554_p2;
reg   [63:0] tmp_30_i_i_reg_1030;
wire   [63:0] tmp_33_i_i_fu_566_p2;
reg   [63:0] tmp_33_i_i_reg_1035;
wire   [63:0] op2_2_fu_575_p2;
reg   [63:0] op2_2_reg_1040;
wire   [31:0] cnt_fu_590_p2;
reg   [31:0] cnt_reg_1045;
reg    ap_enable_reg_pp0_iter4;
wire   [31:0] grp_fu_332_p1;
reg   [31:0] tmp_25_i_i_reg_1055;
wire   [31:0] grp_fu_335_p1;
reg   [31:0] tmp_38_i_i_reg_1060;
reg   [31:0] tmp_38_i_i_reg_1060_pp0_iter11_reg;
reg   [31:0] tmp_38_i_i_reg_1060_pp0_iter12_reg;
reg   [31:0] tmp_38_i_i_reg_1060_pp0_iter13_reg;
reg   [31:0] tmp_38_i_i_reg_1060_pp0_iter14_reg;
reg   [31:0] tmp_38_i_i_reg_1060_pp0_iter15_reg;
reg   [31:0] tmp_38_i_i_reg_1060_pp0_iter16_reg;
reg   [31:0] tmp_38_i_i_reg_1060_pp0_iter17_reg;
reg   [31:0] tmp_38_i_i_reg_1060_pp0_iter18_reg;
reg   [31:0] tmp_38_i_i_reg_1060_pp0_iter19_reg;
reg   [31:0] tmp_38_i_i_reg_1060_pp0_iter20_reg;
wire   [31:0] grp_fu_338_p1;
reg   [31:0] tmp_40_i_i_reg_1065;
reg   [31:0] tmp_40_i_i_reg_1065_pp0_iter11_reg;
reg   [31:0] tmp_40_i_i_reg_1065_pp0_iter12_reg;
reg   [31:0] tmp_40_i_i_reg_1065_pp0_iter13_reg;
reg   [31:0] tmp_40_i_i_reg_1065_pp0_iter14_reg;
reg   [31:0] tmp_40_i_i_reg_1065_pp0_iter15_reg;
reg   [31:0] tmp_40_i_i_reg_1065_pp0_iter16_reg;
reg   [31:0] tmp_40_i_i_reg_1065_pp0_iter17_reg;
reg   [31:0] tmp_40_i_i_reg_1065_pp0_iter18_reg;
reg   [31:0] tmp_40_i_i_reg_1065_pp0_iter19_reg;
reg   [31:0] tmp_40_i_i_reg_1065_pp0_iter20_reg;
wire   [31:0] grp_fu_327_p2;
reg   [31:0] recipr_det_A_reg_1070;
wire   [31:0] i_op_assign_fu_607_p3;
wire   [31:0] grp_fu_309_p2;
reg   [31:0] tmp_39_i_i_reg_1081;
wire   [31:0] grp_fu_313_p2;
reg   [31:0] tmp_41_i_i_reg_1086;
reg   [0:0] p_Result_s_reg_1091;
reg   [7:0] tmp_V_reg_1096;
wire   [22:0] tmp_V_1_fu_644_p1;
reg   [22:0] tmp_V_1_reg_1102;
reg   [0:0] p_Result_1_reg_1107;
reg   [7:0] tmp_V_2_reg_1112;
wire   [22:0] tmp_V_3_fu_677_p1;
reg   [22:0] tmp_V_3_reg_1118;
wire   [7:0] packx_data_V_fu_788_p3;
wire   [7:0] packy_data_V_fu_903_p3;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state2;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter5;
reg    ap_enable_reg_pp0_iter6;
reg    ap_enable_reg_pp0_iter7;
reg    ap_enable_reg_pp0_iter8;
reg    ap_enable_reg_pp0_iter9;
reg    ap_enable_reg_pp0_iter10;
reg    ap_enable_reg_pp0_iter11;
reg    ap_enable_reg_pp0_iter12;
reg    ap_enable_reg_pp0_iter13;
reg    ap_enable_reg_pp0_iter14;
reg    ap_enable_reg_pp0_iter15;
reg    ap_enable_reg_pp0_iter16;
reg    ap_enable_reg_pp0_iter17;
reg    ap_enable_reg_pp0_iter18;
reg    ap_enable_reg_pp0_iter19;
reg    ap_enable_reg_pp0_iter20;
reg    ap_enable_reg_pp0_iter21;
reg    ap_enable_reg_pp0_iter22;
reg    ap_enable_reg_pp0_iter23;
reg    ap_enable_reg_pp0_iter24;
reg    ap_enable_reg_pp0_iter25;
reg    ap_enable_reg_pp0_iter26;
reg    ap_enable_reg_pp0_iter27;
reg    ap_enable_reg_pp0_iter28;
reg   [31:0] ap_phi_mux_cnt_1_i_phi_fu_301_p4;
reg    ap_block_pp0_stage0_01001;
wire   [63:0] grp_fu_332_p0;
wire   [63:0] grp_fu_335_p0;
wire   [16:0] tmp_cast_i_fu_341_p1;
wire   [16:0] tmp_65_cast_i_fu_351_p1;
wire   [16:0] tmp_67_cast_i_fu_369_p1;
wire   [0:0] exitcond_i6_fu_389_p2;
wire   [15:0] row3_fu_402_p2;
wire   [16:0] tmp_67_cast_i_mid1_fu_408_p1;
wire   [0:0] tmp_69_i_mid1_fu_412_p2;
wire   [0:0] tmp_69_i_fu_373_p2;
wire   [15:0] col_i_mid2_fu_394_p3;
wire   [16:0] tmp_70_cast_i_fu_433_p1;
wire   [0:0] tmp_69_i_mid2_fu_417_p3;
wire   [0:0] tmp_75_i_fu_437_p2;
wire  signed [33:0] a_x_d_V_fu_460_p0;
wire  signed [33:0] a_x_d_V_fu_460_p1;
wire  signed [33:0] b_x_c_V_fu_469_p0;
wire  signed [67:0] tmp_23_i_i_fu_466_p1;
wire  signed [33:0] b_x_c_V_fu_469_p1;
wire   [67:0] ret_V_fu_475_p2;
wire   [0:0] tmp_24_i_i_fu_485_p2;
wire   [67:0] neg_det_A_V_fu_479_p2;
wire  signed [34:0] tmp_34_i_cast_i_fu_517_p1;
wire  signed [34:0] tmp_31_i_cast_i_fu_513_p1;
wire   [34:0] tmp_36_i_i_fu_520_p2;
wire  signed [35:0] tmp_36_i_cast_i_fu_526_p1;
wire   [67:0] abs_det_A_V_fu_491_p3;
wire   [0:0] tmp_42_i_i_fu_536_p2;
wire  signed [33:0] tmp_30_i_i_fu_554_p0;
wire  signed [33:0] tmp_30_i_i_fu_554_p1;
wire  signed [33:0] tmp_33_i_i_fu_566_p0;
wire  signed [33:0] tmp_33_i_i_fu_566_p1;
wire  signed [63:0] tmp_32_i_i_fu_563_p1;
wire  signed [33:0] op2_2_fu_575_p0;
wire  signed [35:0] op2_2_fu_575_p1;
wire   [0:0] invertible_fu_581_p2;
wire   [31:0] tmp_73_i_fu_586_p1;
wire   [63:0] tmp_35_i_i_fu_596_p2;
wire   [31:0] grp_fu_317_p2;
wire   [31:0] tmp_fu_615_p1;
wire   [31:0] p_Val2_s_fu_619_p3;
wire   [31:0] grp_fu_322_p2;
wire   [31:0] tmp_s_fu_648_p1;
wire   [31:0] p_Val2_2_fu_652_p3;
wire   [24:0] mantissa_V_fu_681_p4;
wire   [8:0] tmp_i_i_i_i_cast_i_fu_694_p1;
wire   [8:0] sh_assign_fu_697_p2;
wire   [7:0] tmp_i_i_i_i_fu_711_p2;
wire   [0:0] isNeg_fu_703_p3;
wire  signed [8:0] tmp_i_i_i_cast_i_fu_716_p1;
wire  signed [8:0] ush_fu_720_p3;
wire  signed [31:0] sh_assign_2_i_i_i_ca_fu_728_p1;
wire  signed [24:0] sh_assign_2_i_i_i_ca_1_fu_732_p1;
wire   [62:0] mantissa_V_1_i_i_i_c_fu_690_p1;
wire   [62:0] tmp_i_i_i_i_51_fu_736_p1;
wire   [24:0] r_V_fu_740_p2;
wire   [0:0] tmp_71_fu_752_p3;
wire   [62:0] r_V_1_fu_746_p2;
wire   [7:0] tmp_64_fu_760_p1;
wire   [7:0] tmp_65_fu_764_p4;
wire   [7:0] tmp_66_fu_774_p3;
wire   [7:0] result_V_1_fu_782_p2;
wire   [24:0] mantissa_V_1_fu_796_p4;
wire   [8:0] tmp_i_i_i_i41_cast_i_fu_809_p1;
wire   [8:0] sh_assign_3_fu_812_p2;
wire   [7:0] tmp_i_i_i44_i_fu_826_p2;
wire   [0:0] isNeg_1_fu_818_p3;
wire  signed [8:0] tmp_i_i_i44_cast_i_fu_831_p1;
wire  signed [8:0] ush_1_fu_835_p3;
wire  signed [31:0] sh_assign_2_i_i_i45_s_fu_843_p1;
wire  signed [24:0] sh_assign_2_i_i_i45_1_fu_847_p1;
wire   [62:0] mantissa_V_1_i_i_i_fu_805_p1;
wire   [62:0] tmp_i_i_i46_i_fu_851_p1;
wire   [24:0] r_V_2_fu_855_p2;
wire   [0:0] tmp_75_fu_867_p3;
wire   [62:0] r_V_3_fu_861_p2;
wire   [7:0] tmp_67_fu_875_p1;
wire   [7:0] tmp_68_fu_879_p4;
wire   [7:0] tmp_69_fu_889_p3;
wire   [7:0] result_V_3_fu_897_p2;
wire   [15:0] bound_fu_911_p0;
wire   [15:0] bound_fu_911_p1;
reg    grp_fu_309_ce;
reg    grp_fu_313_ce;
reg    grp_fu_317_ce;
reg    grp_fu_322_ce;
reg    grp_fu_327_ce;
reg    grp_fu_332_ce;
reg    grp_fu_335_ce;
reg    grp_fu_338_ce;
wire    ap_CS_fsm_state33;
reg    ap_block_state33;
reg   [2:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
wire   [31:0] bound_fu_911_p00;
wire   [31:0] bound_fu_911_p10;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 3'd1;
#0 vx_img_V_data_V_1_sel_rd = 1'b0;
#0 vx_img_V_data_V_1_sel_wr = 1'b0;
#0 vx_img_V_data_V_1_state = 2'd0;
#0 vx_img_V_last_V_1_sel_rd = 1'b0;
#0 vx_img_V_last_V_1_sel_wr = 1'b0;
#0 vx_img_V_last_V_1_state = 2'd0;
#0 vy_img_V_data_V_1_sel_rd = 1'b0;
#0 vy_img_V_data_V_1_sel_wr = 1'b0;
#0 vy_img_V_data_V_1_state = 2'd0;
#0 vy_img_V_last_V_1_sel_rd = 1'b0;
#0 vy_img_V_last_V_1_sel_wr = 1'b0;
#0 vy_img_V_last_V_1_state = 2'd0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter29 = 1'b0;
#0 ap_enable_reg_pp0_iter30 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_enable_reg_pp0_iter6 = 1'b0;
#0 ap_enable_reg_pp0_iter7 = 1'b0;
#0 ap_enable_reg_pp0_iter8 = 1'b0;
#0 ap_enable_reg_pp0_iter9 = 1'b0;
#0 ap_enable_reg_pp0_iter10 = 1'b0;
#0 ap_enable_reg_pp0_iter11 = 1'b0;
#0 ap_enable_reg_pp0_iter12 = 1'b0;
#0 ap_enable_reg_pp0_iter13 = 1'b0;
#0 ap_enable_reg_pp0_iter14 = 1'b0;
#0 ap_enable_reg_pp0_iter15 = 1'b0;
#0 ap_enable_reg_pp0_iter16 = 1'b0;
#0 ap_enable_reg_pp0_iter17 = 1'b0;
#0 ap_enable_reg_pp0_iter18 = 1'b0;
#0 ap_enable_reg_pp0_iter19 = 1'b0;
#0 ap_enable_reg_pp0_iter20 = 1'b0;
#0 ap_enable_reg_pp0_iter21 = 1'b0;
#0 ap_enable_reg_pp0_iter22 = 1'b0;
#0 ap_enable_reg_pp0_iter23 = 1'b0;
#0 ap_enable_reg_pp0_iter24 = 1'b0;
#0 ap_enable_reg_pp0_iter25 = 1'b0;
#0 ap_enable_reg_pp0_iter26 = 1'b0;
#0 ap_enable_reg_pp0_iter27 = 1'b0;
#0 ap_enable_reg_pp0_iter28 = 1'b0;
end

hls_LK_fmul_32ns_32ns_32_4_max_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
hls_LK_fmul_32ns_32ns_32_4_max_dsp_1_U83(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(tmp_38_i_i_reg_1060_pp0_iter20_reg),
    .din1(i_op_assign_fu_607_p3),
    .ce(grp_fu_309_ce),
    .dout(grp_fu_309_p2)
);

hls_LK_fmul_32ns_32ns_32_4_max_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
hls_LK_fmul_32ns_32ns_32_4_max_dsp_1_U84(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(tmp_40_i_i_reg_1065_pp0_iter20_reg),
    .din1(i_op_assign_fu_607_p3),
    .ce(grp_fu_313_ce),
    .dout(grp_fu_313_p2)
);

hls_LK_fmul_32ns_32ns_32_4_max_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
hls_LK_fmul_32ns_32ns_32_4_max_dsp_1_U85(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(tmp_39_i_i_reg_1081),
    .din1(32'd1090519040),
    .ce(grp_fu_317_ce),
    .dout(grp_fu_317_p2)
);

hls_LK_fmul_32ns_32ns_32_4_max_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
hls_LK_fmul_32ns_32ns_32_4_max_dsp_1_U86(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(tmp_41_i_i_reg_1086),
    .din1(32'd1090519040),
    .ce(grp_fu_322_ce),
    .dout(grp_fu_322_p2)
);

hls_LK_fdiv_32ns_32ns_32_12_1 #(
    .ID( 1 ),
    .NUM_STAGE( 12 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
hls_LK_fdiv_32ns_32ns_32_12_1_U87(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(32'd1065353216),
    .din1(tmp_25_i_i_reg_1055),
    .ce(grp_fu_327_ce),
    .dout(grp_fu_327_p2)
);

hls_LK_sitofp_64ns_32_6_1 #(
    .ID( 1 ),
    .NUM_STAGE( 6 ),
    .din0_WIDTH( 64 ),
    .dout_WIDTH( 32 ))
hls_LK_sitofp_64ns_32_6_1_U88(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_332_p0),
    .ce(grp_fu_332_ce),
    .dout(grp_fu_332_p1)
);

hls_LK_sitofp_64ns_32_6_1 #(
    .ID( 1 ),
    .NUM_STAGE( 6 ),
    .din0_WIDTH( 64 ),
    .dout_WIDTH( 32 ))
hls_LK_sitofp_64ns_32_6_1_U89(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_335_p0),
    .ce(grp_fu_335_ce),
    .dout(grp_fu_335_p1)
);

hls_LK_sitofp_64ns_32_6_1 #(
    .ID( 1 ),
    .NUM_STAGE( 6 ),
    .din0_WIDTH( 64 ),
    .dout_WIDTH( 32 ))
hls_LK_sitofp_64ns_32_6_1_U90(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(op2_2_reg_1040),
    .ce(grp_fu_338_ce),
    .dout(grp_fu_338_p1)
);

hls_LK_mul_mul_16ns_16ns_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 32 ))
hls_LK_mul_mul_16ns_16ns_32_1_1_U91(
    .din0(bound_fu_911_p0),
    .din1(bound_fu_911_p1),
    .dout(bound_fu_911_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((~((vx_img_V_data_V_1_ack_in == 1'b0) | (vy_img_V_last_V_1_ack_in == 1'b0) | (vy_img_V_data_V_1_ack_in == 1'b0) | (vx_img_V_last_V_1_ack_in == 1'b0)) & (1'b1 == ap_CS_fsm_state33))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state2) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((~((ap_start == 1'b0) | (width_empty_n == 1'b0) | (height_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state2)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state2);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter10 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter11 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter12 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter12 <= ap_enable_reg_pp0_iter11;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter13 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter13 <= ap_enable_reg_pp0_iter12;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter14 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter14 <= ap_enable_reg_pp0_iter13;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter15 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter15 <= ap_enable_reg_pp0_iter14;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter16 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter16 <= ap_enable_reg_pp0_iter15;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter17 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter17 <= ap_enable_reg_pp0_iter16;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter18 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter18 <= ap_enable_reg_pp0_iter17;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter19 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter19 <= ap_enable_reg_pp0_iter18;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter20 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter20 <= ap_enable_reg_pp0_iter19;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter21 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter21 <= ap_enable_reg_pp0_iter20;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter22 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter22 <= ap_enable_reg_pp0_iter21;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter23 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter23 <= ap_enable_reg_pp0_iter22;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter24 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter24 <= ap_enable_reg_pp0_iter23;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter25 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter25 <= ap_enable_reg_pp0_iter24;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter26 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter26 <= ap_enable_reg_pp0_iter25;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter27 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter27 <= ap_enable_reg_pp0_iter26;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter28 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter28 <= ap_enable_reg_pp0_iter27;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter29 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter29 <= ap_enable_reg_pp0_iter28;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter30 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter30 <= ap_enable_reg_pp0_iter29;
        end else if ((~((ap_start == 1'b0) | (width_empty_n == 1'b0) | (height_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter30 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter6 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter7 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter8 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter9 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        vx_img_V_data_V_1_sel_rd <= 1'b0;
    end else begin
        if (((vx_img_V_data_V_1_ack_out == 1'b1) & (vx_img_V_data_V_1_vld_out == 1'b1))) begin
            vx_img_V_data_V_1_sel_rd <= ~vx_img_V_data_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        vx_img_V_data_V_1_sel_wr <= 1'b0;
    end else begin
        if (((vx_img_V_data_V_1_ack_in == 1'b1) & (vx_img_V_data_V_1_vld_in == 1'b1))) begin
            vx_img_V_data_V_1_sel_wr <= ~vx_img_V_data_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        vx_img_V_data_V_1_state <= 2'd0;
    end else begin
        if ((((vx_img_V_data_V_1_state == 2'd2) & (vx_img_V_data_V_1_vld_in == 1'b0)) | ((vx_img_V_data_V_1_state == 2'd3) & (vx_img_V_data_V_1_vld_in == 1'b0) & (vx_img_V_data_V_1_ack_out == 1'b1)))) begin
            vx_img_V_data_V_1_state <= 2'd2;
        end else if ((((vx_img_V_data_V_1_state == 2'd1) & (vx_img_V_data_V_1_ack_out == 1'b0)) | ((vx_img_V_data_V_1_state == 2'd3) & (vx_img_V_data_V_1_ack_out == 1'b0) & (vx_img_V_data_V_1_vld_in == 1'b1)))) begin
            vx_img_V_data_V_1_state <= 2'd1;
        end else if (((~((vx_img_V_data_V_1_vld_in == 1'b0) & (vx_img_V_data_V_1_ack_out == 1'b1)) & ~((vx_img_V_data_V_1_ack_out == 1'b0) & (vx_img_V_data_V_1_vld_in == 1'b1)) & (vx_img_V_data_V_1_state == 2'd3)) | ((vx_img_V_data_V_1_state == 2'd1) & (vx_img_V_data_V_1_ack_out == 1'b1)) | ((vx_img_V_data_V_1_state == 2'd2) & (vx_img_V_data_V_1_vld_in == 1'b1)))) begin
            vx_img_V_data_V_1_state <= 2'd3;
        end else begin
            vx_img_V_data_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        vx_img_V_last_V_1_sel_rd <= 1'b0;
    end else begin
        if (((vx_img_V_last_V_1_ack_out == 1'b1) & (vx_img_V_last_V_1_vld_out == 1'b1))) begin
            vx_img_V_last_V_1_sel_rd <= ~vx_img_V_last_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        vx_img_V_last_V_1_sel_wr <= 1'b0;
    end else begin
        if (((vx_img_V_last_V_1_ack_in == 1'b1) & (vx_img_V_last_V_1_vld_in == 1'b1))) begin
            vx_img_V_last_V_1_sel_wr <= ~vx_img_V_last_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        vx_img_V_last_V_1_state <= 2'd0;
    end else begin
        if ((((vx_img_V_last_V_1_state == 2'd2) & (vx_img_V_last_V_1_vld_in == 1'b0)) | ((vx_img_V_last_V_1_state == 2'd3) & (vx_img_V_last_V_1_vld_in == 1'b0) & (vx_img_V_last_V_1_ack_out == 1'b1)))) begin
            vx_img_V_last_V_1_state <= 2'd2;
        end else if ((((vx_img_V_last_V_1_state == 2'd1) & (vx_img_V_last_V_1_ack_out == 1'b0)) | ((vx_img_V_last_V_1_state == 2'd3) & (vx_img_V_last_V_1_ack_out == 1'b0) & (vx_img_V_last_V_1_vld_in == 1'b1)))) begin
            vx_img_V_last_V_1_state <= 2'd1;
        end else if (((~((vx_img_V_last_V_1_vld_in == 1'b0) & (vx_img_V_last_V_1_ack_out == 1'b1)) & ~((vx_img_V_last_V_1_ack_out == 1'b0) & (vx_img_V_last_V_1_vld_in == 1'b1)) & (vx_img_V_last_V_1_state == 2'd3)) | ((vx_img_V_last_V_1_state == 2'd1) & (vx_img_V_last_V_1_ack_out == 1'b1)) | ((vx_img_V_last_V_1_state == 2'd2) & (vx_img_V_last_V_1_vld_in == 1'b1)))) begin
            vx_img_V_last_V_1_state <= 2'd3;
        end else begin
            vx_img_V_last_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        vy_img_V_data_V_1_sel_rd <= 1'b0;
    end else begin
        if (((vy_img_V_data_V_1_ack_out == 1'b1) & (vy_img_V_data_V_1_vld_out == 1'b1))) begin
            vy_img_V_data_V_1_sel_rd <= ~vy_img_V_data_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        vy_img_V_data_V_1_sel_wr <= 1'b0;
    end else begin
        if (((vy_img_V_data_V_1_ack_in == 1'b1) & (vy_img_V_data_V_1_vld_in == 1'b1))) begin
            vy_img_V_data_V_1_sel_wr <= ~vy_img_V_data_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        vy_img_V_data_V_1_state <= 2'd0;
    end else begin
        if ((((vy_img_V_data_V_1_state == 2'd2) & (vy_img_V_data_V_1_vld_in == 1'b0)) | ((vy_img_V_data_V_1_state == 2'd3) & (vy_img_V_data_V_1_vld_in == 1'b0) & (vy_img_V_data_V_1_ack_out == 1'b1)))) begin
            vy_img_V_data_V_1_state <= 2'd2;
        end else if ((((vy_img_V_data_V_1_state == 2'd1) & (vy_img_V_data_V_1_ack_out == 1'b0)) | ((vy_img_V_data_V_1_state == 2'd3) & (vy_img_V_data_V_1_ack_out == 1'b0) & (vy_img_V_data_V_1_vld_in == 1'b1)))) begin
            vy_img_V_data_V_1_state <= 2'd1;
        end else if (((~((vy_img_V_data_V_1_vld_in == 1'b0) & (vy_img_V_data_V_1_ack_out == 1'b1)) & ~((vy_img_V_data_V_1_ack_out == 1'b0) & (vy_img_V_data_V_1_vld_in == 1'b1)) & (vy_img_V_data_V_1_state == 2'd3)) | ((vy_img_V_data_V_1_state == 2'd1) & (vy_img_V_data_V_1_ack_out == 1'b1)) | ((vy_img_V_data_V_1_state == 2'd2) & (vy_img_V_data_V_1_vld_in == 1'b1)))) begin
            vy_img_V_data_V_1_state <= 2'd3;
        end else begin
            vy_img_V_data_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        vy_img_V_last_V_1_sel_rd <= 1'b0;
    end else begin
        if (((vy_img_V_last_V_1_ack_out == 1'b1) & (vy_img_V_last_V_1_vld_out == 1'b1))) begin
            vy_img_V_last_V_1_sel_rd <= ~vy_img_V_last_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        vy_img_V_last_V_1_sel_wr <= 1'b0;
    end else begin
        if (((vy_img_V_last_V_1_ack_in == 1'b1) & (vy_img_V_last_V_1_vld_in == 1'b1))) begin
            vy_img_V_last_V_1_sel_wr <= ~vy_img_V_last_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        vy_img_V_last_V_1_state <= 2'd0;
    end else begin
        if ((((vy_img_V_last_V_1_state == 2'd2) & (vy_img_V_last_V_1_vld_in == 1'b0)) | ((vy_img_V_last_V_1_state == 2'd3) & (vy_img_V_last_V_1_vld_in == 1'b0) & (vy_img_V_last_V_1_ack_out == 1'b1)))) begin
            vy_img_V_last_V_1_state <= 2'd2;
        end else if ((((vy_img_V_last_V_1_state == 2'd1) & (vy_img_V_last_V_1_ack_out == 1'b0)) | ((vy_img_V_last_V_1_state == 2'd3) & (vy_img_V_last_V_1_ack_out == 1'b0) & (vy_img_V_last_V_1_vld_in == 1'b1)))) begin
            vy_img_V_last_V_1_state <= 2'd1;
        end else if (((~((vy_img_V_last_V_1_vld_in == 1'b0) & (vy_img_V_last_V_1_ack_out == 1'b1)) & ~((vy_img_V_last_V_1_ack_out == 1'b0) & (vy_img_V_last_V_1_vld_in == 1'b1)) & (vy_img_V_last_V_1_state == 2'd3)) | ((vy_img_V_last_V_1_state == 2'd1) & (vy_img_V_last_V_1_ack_out == 1'b1)) | ((vy_img_V_last_V_1_state == 2'd2) & (vy_img_V_last_V_1_vld_in == 1'b1)))) begin
            vy_img_V_last_V_1_state <= 2'd3;
        end else begin
            vy_img_V_last_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_flatten_reg_938_pp0_iter4_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter5 == 1'b1))) begin
        cnt_1_i_reg_297 <= cnt_reg_1045;
    end else if ((~((ap_start == 1'b0) | (width_empty_n == 1'b0) | (height_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        cnt_1_i_reg_297 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_flatten_fu_378_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        col_i_reg_286 <= col_fu_448_p2;
    end else if ((~((ap_start == 1'b0) | (width_empty_n == 1'b0) | (height_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        col_i_reg_286 <= 16'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_flatten_fu_378_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        indvar_flatten_reg_264 <= indvar_flatten_next_fu_383_p2;
    end else if ((~((ap_start == 1'b0) | (width_empty_n == 1'b0) | (height_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        indvar_flatten_reg_264 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_flatten_fu_378_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        row_i_reg_275 <= row_i_mid2_fu_425_p3;
    end else if ((~((ap_start == 1'b0) | (width_empty_n == 1'b0) | (height_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        row_i_reg_275 <= 16'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_flatten_reg_938 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        A_0_0_V_reg_963 <= A11_img_V_dout;
        A_0_1_V_reg_969 <= A12_img_V_dout;
        A_1_1_V_reg_975 <= A22_img_V_dout;
        B_0_V_reg_981 <= B1_img_V_dout;
        B_1_V_reg_986 <= B2_img_V_dout;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        A_0_0_V_reg_963_pp0_iter2_reg <= A_0_0_V_reg_963;
        A_0_1_V_reg_969_pp0_iter2_reg <= A_0_1_V_reg_969;
        A_1_1_V_reg_975_pp0_iter2_reg <= A_1_1_V_reg_975;
        A_1_1_V_reg_975_pp0_iter3_reg <= A_1_1_V_reg_975_pp0_iter2_reg;
        B_0_V_reg_981_pp0_iter2_reg <= B_0_V_reg_981;
        B_0_V_reg_981_pp0_iter3_reg <= B_0_V_reg_981_pp0_iter2_reg;
        B_1_V_reg_986_pp0_iter2_reg <= B_1_V_reg_986;
        B_1_V_reg_986_pp0_iter3_reg <= B_1_V_reg_986_pp0_iter2_reg;
        exitcond_flatten_reg_938_pp0_iter10_reg <= exitcond_flatten_reg_938_pp0_iter9_reg;
        exitcond_flatten_reg_938_pp0_iter11_reg <= exitcond_flatten_reg_938_pp0_iter10_reg;
        exitcond_flatten_reg_938_pp0_iter12_reg <= exitcond_flatten_reg_938_pp0_iter11_reg;
        exitcond_flatten_reg_938_pp0_iter13_reg <= exitcond_flatten_reg_938_pp0_iter12_reg;
        exitcond_flatten_reg_938_pp0_iter14_reg <= exitcond_flatten_reg_938_pp0_iter13_reg;
        exitcond_flatten_reg_938_pp0_iter15_reg <= exitcond_flatten_reg_938_pp0_iter14_reg;
        exitcond_flatten_reg_938_pp0_iter16_reg <= exitcond_flatten_reg_938_pp0_iter15_reg;
        exitcond_flatten_reg_938_pp0_iter17_reg <= exitcond_flatten_reg_938_pp0_iter16_reg;
        exitcond_flatten_reg_938_pp0_iter18_reg <= exitcond_flatten_reg_938_pp0_iter17_reg;
        exitcond_flatten_reg_938_pp0_iter19_reg <= exitcond_flatten_reg_938_pp0_iter18_reg;
        exitcond_flatten_reg_938_pp0_iter20_reg <= exitcond_flatten_reg_938_pp0_iter19_reg;
        exitcond_flatten_reg_938_pp0_iter21_reg <= exitcond_flatten_reg_938_pp0_iter20_reg;
        exitcond_flatten_reg_938_pp0_iter22_reg <= exitcond_flatten_reg_938_pp0_iter21_reg;
        exitcond_flatten_reg_938_pp0_iter23_reg <= exitcond_flatten_reg_938_pp0_iter22_reg;
        exitcond_flatten_reg_938_pp0_iter24_reg <= exitcond_flatten_reg_938_pp0_iter23_reg;
        exitcond_flatten_reg_938_pp0_iter25_reg <= exitcond_flatten_reg_938_pp0_iter24_reg;
        exitcond_flatten_reg_938_pp0_iter26_reg <= exitcond_flatten_reg_938_pp0_iter25_reg;
        exitcond_flatten_reg_938_pp0_iter27_reg <= exitcond_flatten_reg_938_pp0_iter26_reg;
        exitcond_flatten_reg_938_pp0_iter28_reg <= exitcond_flatten_reg_938_pp0_iter27_reg;
        exitcond_flatten_reg_938_pp0_iter29_reg <= exitcond_flatten_reg_938_pp0_iter28_reg;
        exitcond_flatten_reg_938_pp0_iter2_reg <= exitcond_flatten_reg_938_pp0_iter1_reg;
        exitcond_flatten_reg_938_pp0_iter3_reg <= exitcond_flatten_reg_938_pp0_iter2_reg;
        exitcond_flatten_reg_938_pp0_iter4_reg <= exitcond_flatten_reg_938_pp0_iter3_reg;
        exitcond_flatten_reg_938_pp0_iter5_reg <= exitcond_flatten_reg_938_pp0_iter4_reg;
        exitcond_flatten_reg_938_pp0_iter6_reg <= exitcond_flatten_reg_938_pp0_iter5_reg;
        exitcond_flatten_reg_938_pp0_iter7_reg <= exitcond_flatten_reg_938_pp0_iter6_reg;
        exitcond_flatten_reg_938_pp0_iter8_reg <= exitcond_flatten_reg_938_pp0_iter7_reg;
        exitcond_flatten_reg_938_pp0_iter9_reg <= exitcond_flatten_reg_938_pp0_iter8_reg;
        invertible_demorgan_reg_1023_pp0_iter10_reg <= invertible_demorgan_reg_1023_pp0_iter9_reg;
        invertible_demorgan_reg_1023_pp0_iter11_reg <= invertible_demorgan_reg_1023_pp0_iter10_reg;
        invertible_demorgan_reg_1023_pp0_iter12_reg <= invertible_demorgan_reg_1023_pp0_iter11_reg;
        invertible_demorgan_reg_1023_pp0_iter13_reg <= invertible_demorgan_reg_1023_pp0_iter12_reg;
        invertible_demorgan_reg_1023_pp0_iter14_reg <= invertible_demorgan_reg_1023_pp0_iter13_reg;
        invertible_demorgan_reg_1023_pp0_iter15_reg <= invertible_demorgan_reg_1023_pp0_iter14_reg;
        invertible_demorgan_reg_1023_pp0_iter16_reg <= invertible_demorgan_reg_1023_pp0_iter15_reg;
        invertible_demorgan_reg_1023_pp0_iter17_reg <= invertible_demorgan_reg_1023_pp0_iter16_reg;
        invertible_demorgan_reg_1023_pp0_iter18_reg <= invertible_demorgan_reg_1023_pp0_iter17_reg;
        invertible_demorgan_reg_1023_pp0_iter19_reg <= invertible_demorgan_reg_1023_pp0_iter18_reg;
        invertible_demorgan_reg_1023_pp0_iter20_reg <= invertible_demorgan_reg_1023_pp0_iter19_reg;
        invertible_demorgan_reg_1023_pp0_iter21_reg <= invertible_demorgan_reg_1023_pp0_iter20_reg;
        invertible_demorgan_reg_1023_pp0_iter22_reg <= invertible_demorgan_reg_1023_pp0_iter21_reg;
        invertible_demorgan_reg_1023_pp0_iter23_reg <= invertible_demorgan_reg_1023_pp0_iter22_reg;
        invertible_demorgan_reg_1023_pp0_iter24_reg <= invertible_demorgan_reg_1023_pp0_iter23_reg;
        invertible_demorgan_reg_1023_pp0_iter25_reg <= invertible_demorgan_reg_1023_pp0_iter24_reg;
        invertible_demorgan_reg_1023_pp0_iter26_reg <= invertible_demorgan_reg_1023_pp0_iter25_reg;
        invertible_demorgan_reg_1023_pp0_iter27_reg <= invertible_demorgan_reg_1023_pp0_iter26_reg;
        invertible_demorgan_reg_1023_pp0_iter4_reg <= invertible_demorgan_reg_1023;
        invertible_demorgan_reg_1023_pp0_iter5_reg <= invertible_demorgan_reg_1023_pp0_iter4_reg;
        invertible_demorgan_reg_1023_pp0_iter6_reg <= invertible_demorgan_reg_1023_pp0_iter5_reg;
        invertible_demorgan_reg_1023_pp0_iter7_reg <= invertible_demorgan_reg_1023_pp0_iter6_reg;
        invertible_demorgan_reg_1023_pp0_iter8_reg <= invertible_demorgan_reg_1023_pp0_iter7_reg;
        invertible_demorgan_reg_1023_pp0_iter9_reg <= invertible_demorgan_reg_1023_pp0_iter8_reg;
        packy_last_V_reg_952_pp0_iter10_reg <= packy_last_V_reg_952_pp0_iter9_reg;
        packy_last_V_reg_952_pp0_iter11_reg <= packy_last_V_reg_952_pp0_iter10_reg;
        packy_last_V_reg_952_pp0_iter12_reg <= packy_last_V_reg_952_pp0_iter11_reg;
        packy_last_V_reg_952_pp0_iter13_reg <= packy_last_V_reg_952_pp0_iter12_reg;
        packy_last_V_reg_952_pp0_iter14_reg <= packy_last_V_reg_952_pp0_iter13_reg;
        packy_last_V_reg_952_pp0_iter15_reg <= packy_last_V_reg_952_pp0_iter14_reg;
        packy_last_V_reg_952_pp0_iter16_reg <= packy_last_V_reg_952_pp0_iter15_reg;
        packy_last_V_reg_952_pp0_iter17_reg <= packy_last_V_reg_952_pp0_iter16_reg;
        packy_last_V_reg_952_pp0_iter18_reg <= packy_last_V_reg_952_pp0_iter17_reg;
        packy_last_V_reg_952_pp0_iter19_reg <= packy_last_V_reg_952_pp0_iter18_reg;
        packy_last_V_reg_952_pp0_iter20_reg <= packy_last_V_reg_952_pp0_iter19_reg;
        packy_last_V_reg_952_pp0_iter21_reg <= packy_last_V_reg_952_pp0_iter20_reg;
        packy_last_V_reg_952_pp0_iter22_reg <= packy_last_V_reg_952_pp0_iter21_reg;
        packy_last_V_reg_952_pp0_iter23_reg <= packy_last_V_reg_952_pp0_iter22_reg;
        packy_last_V_reg_952_pp0_iter24_reg <= packy_last_V_reg_952_pp0_iter23_reg;
        packy_last_V_reg_952_pp0_iter25_reg <= packy_last_V_reg_952_pp0_iter24_reg;
        packy_last_V_reg_952_pp0_iter26_reg <= packy_last_V_reg_952_pp0_iter25_reg;
        packy_last_V_reg_952_pp0_iter27_reg <= packy_last_V_reg_952_pp0_iter26_reg;
        packy_last_V_reg_952_pp0_iter28_reg <= packy_last_V_reg_952_pp0_iter27_reg;
        packy_last_V_reg_952_pp0_iter2_reg <= packy_last_V_reg_952_pp0_iter1_reg;
        packy_last_V_reg_952_pp0_iter3_reg <= packy_last_V_reg_952_pp0_iter2_reg;
        packy_last_V_reg_952_pp0_iter4_reg <= packy_last_V_reg_952_pp0_iter3_reg;
        packy_last_V_reg_952_pp0_iter5_reg <= packy_last_V_reg_952_pp0_iter4_reg;
        packy_last_V_reg_952_pp0_iter6_reg <= packy_last_V_reg_952_pp0_iter5_reg;
        packy_last_V_reg_952_pp0_iter7_reg <= packy_last_V_reg_952_pp0_iter6_reg;
        packy_last_V_reg_952_pp0_iter8_reg <= packy_last_V_reg_952_pp0_iter7_reg;
        packy_last_V_reg_952_pp0_iter9_reg <= packy_last_V_reg_952_pp0_iter8_reg;
        tmp_26_i_i_reg_1008_pp0_iter10_reg <= tmp_26_i_i_reg_1008_pp0_iter9_reg;
        tmp_26_i_i_reg_1008_pp0_iter11_reg <= tmp_26_i_i_reg_1008_pp0_iter10_reg;
        tmp_26_i_i_reg_1008_pp0_iter12_reg <= tmp_26_i_i_reg_1008_pp0_iter11_reg;
        tmp_26_i_i_reg_1008_pp0_iter13_reg <= tmp_26_i_i_reg_1008_pp0_iter12_reg;
        tmp_26_i_i_reg_1008_pp0_iter14_reg <= tmp_26_i_i_reg_1008_pp0_iter13_reg;
        tmp_26_i_i_reg_1008_pp0_iter15_reg <= tmp_26_i_i_reg_1008_pp0_iter14_reg;
        tmp_26_i_i_reg_1008_pp0_iter16_reg <= tmp_26_i_i_reg_1008_pp0_iter15_reg;
        tmp_26_i_i_reg_1008_pp0_iter17_reg <= tmp_26_i_i_reg_1008_pp0_iter16_reg;
        tmp_26_i_i_reg_1008_pp0_iter18_reg <= tmp_26_i_i_reg_1008_pp0_iter17_reg;
        tmp_26_i_i_reg_1008_pp0_iter19_reg <= tmp_26_i_i_reg_1008_pp0_iter18_reg;
        tmp_26_i_i_reg_1008_pp0_iter20_reg <= tmp_26_i_i_reg_1008_pp0_iter19_reg;
        tmp_26_i_i_reg_1008_pp0_iter4_reg <= tmp_26_i_i_reg_1008;
        tmp_26_i_i_reg_1008_pp0_iter5_reg <= tmp_26_i_i_reg_1008_pp0_iter4_reg;
        tmp_26_i_i_reg_1008_pp0_iter6_reg <= tmp_26_i_i_reg_1008_pp0_iter5_reg;
        tmp_26_i_i_reg_1008_pp0_iter7_reg <= tmp_26_i_i_reg_1008_pp0_iter6_reg;
        tmp_26_i_i_reg_1008_pp0_iter8_reg <= tmp_26_i_i_reg_1008_pp0_iter7_reg;
        tmp_26_i_i_reg_1008_pp0_iter9_reg <= tmp_26_i_i_reg_1008_pp0_iter8_reg;
        tmp_38_i_i_reg_1060_pp0_iter11_reg <= tmp_38_i_i_reg_1060;
        tmp_38_i_i_reg_1060_pp0_iter12_reg <= tmp_38_i_i_reg_1060_pp0_iter11_reg;
        tmp_38_i_i_reg_1060_pp0_iter13_reg <= tmp_38_i_i_reg_1060_pp0_iter12_reg;
        tmp_38_i_i_reg_1060_pp0_iter14_reg <= tmp_38_i_i_reg_1060_pp0_iter13_reg;
        tmp_38_i_i_reg_1060_pp0_iter15_reg <= tmp_38_i_i_reg_1060_pp0_iter14_reg;
        tmp_38_i_i_reg_1060_pp0_iter16_reg <= tmp_38_i_i_reg_1060_pp0_iter15_reg;
        tmp_38_i_i_reg_1060_pp0_iter17_reg <= tmp_38_i_i_reg_1060_pp0_iter16_reg;
        tmp_38_i_i_reg_1060_pp0_iter18_reg <= tmp_38_i_i_reg_1060_pp0_iter17_reg;
        tmp_38_i_i_reg_1060_pp0_iter19_reg <= tmp_38_i_i_reg_1060_pp0_iter18_reg;
        tmp_38_i_i_reg_1060_pp0_iter20_reg <= tmp_38_i_i_reg_1060_pp0_iter19_reg;
        tmp_40_i_i_reg_1065_pp0_iter11_reg <= tmp_40_i_i_reg_1065;
        tmp_40_i_i_reg_1065_pp0_iter12_reg <= tmp_40_i_i_reg_1065_pp0_iter11_reg;
        tmp_40_i_i_reg_1065_pp0_iter13_reg <= tmp_40_i_i_reg_1065_pp0_iter12_reg;
        tmp_40_i_i_reg_1065_pp0_iter14_reg <= tmp_40_i_i_reg_1065_pp0_iter13_reg;
        tmp_40_i_i_reg_1065_pp0_iter15_reg <= tmp_40_i_i_reg_1065_pp0_iter14_reg;
        tmp_40_i_i_reg_1065_pp0_iter16_reg <= tmp_40_i_i_reg_1065_pp0_iter15_reg;
        tmp_40_i_i_reg_1065_pp0_iter17_reg <= tmp_40_i_i_reg_1065_pp0_iter16_reg;
        tmp_40_i_i_reg_1065_pp0_iter18_reg <= tmp_40_i_i_reg_1065_pp0_iter17_reg;
        tmp_40_i_i_reg_1065_pp0_iter19_reg <= tmp_40_i_i_reg_1065_pp0_iter18_reg;
        tmp_40_i_i_reg_1065_pp0_iter20_reg <= tmp_40_i_i_reg_1065_pp0_iter19_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_flatten_reg_938_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        a_x_d_V_reg_991 <= a_x_d_V_fu_460_p2;
        b_x_c_V_reg_997 <= b_x_c_V_fu_469_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_start == 1'b0) | (width_empty_n == 1'b0) | (height_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        bound_reg_933 <= bound_fu_911_p2;
        tmp_66_i_reg_928 <= tmp_66_i_fu_355_p2;
        tmp_i_reg_922 <= tmp_i_fu_345_p2;
        width_read_reg_917 <= width_dout;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_flatten_reg_938_pp0_iter3_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter4 == 1'b1))) begin
        cnt_reg_1045 <= cnt_fu_590_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        exitcond_flatten_reg_938 <= exitcond_flatten_fu_378_p2;
        exitcond_flatten_reg_938_pp0_iter1_reg <= exitcond_flatten_reg_938;
        packy_last_V_reg_952_pp0_iter1_reg <= packy_last_V_reg_952;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_flatten_reg_938_pp0_iter2_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        invertible_demorgan_reg_1023 <= invertible_demorgan_fu_542_p2;
        tmp_26_i_i_reg_1008 <= tmp_26_i_i_fu_504_p2;
        tmp_27_i_i_reg_1013 <= tmp_27_i_i_fu_508_p2;
        tmp_37_i_i_reg_1018 <= tmp_37_i_i_fu_530_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((invertible_demorgan_reg_1023 == 1'd0) & (exitcond_flatten_reg_938_pp0_iter3_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        op2_2_reg_1040 <= op2_2_fu_575_p2;
        tmp_30_i_i_reg_1030 <= tmp_30_i_i_fu_554_p2;
        tmp_33_i_i_reg_1035 <= tmp_33_i_i_fu_566_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_flatten_reg_938_pp0_iter27_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        p_Result_1_reg_1107 <= p_Val2_2_fu_652_p3[32'd31];
        p_Result_s_reg_1091 <= p_Val2_s_fu_619_p3[32'd31];
        tmp_V_1_reg_1102 <= tmp_V_1_fu_644_p1;
        tmp_V_2_reg_1112 <= {{p_Val2_2_fu_652_p3[30:23]}};
        tmp_V_3_reg_1118 <= tmp_V_3_fu_677_p1;
        tmp_V_reg_1096 <= {{p_Val2_s_fu_619_p3[30:23]}};
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_flatten_fu_378_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        packy_last_V_reg_952 <= packy_last_V_fu_442_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_26_i_i_reg_1008_pp0_iter19_reg == 1'd0) & (exitcond_flatten_reg_938_pp0_iter19_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        recipr_det_A_reg_1070 <= grp_fu_327_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_flatten_reg_938_pp0_iter7_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        tmp_25_i_i_reg_1055 <= grp_fu_332_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((invertible_demorgan_reg_1023_pp0_iter9_reg == 1'd0) & (exitcond_flatten_reg_938_pp0_iter9_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        tmp_38_i_i_reg_1060 <= grp_fu_335_p1;
        tmp_40_i_i_reg_1065 <= grp_fu_338_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((invertible_demorgan_reg_1023_pp0_iter23_reg == 1'd0) & (exitcond_flatten_reg_938_pp0_iter23_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        tmp_39_i_i_reg_1081 <= grp_fu_309_p2;
        tmp_41_i_i_reg_1086 <= grp_fu_313_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((vx_img_V_data_V_1_load_A == 1'b1)) begin
        vx_img_V_data_V_1_payload_A <= packx_data_V_fu_788_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((vx_img_V_data_V_1_load_B == 1'b1)) begin
        vx_img_V_data_V_1_payload_B <= packx_data_V_fu_788_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((vx_img_V_last_V_1_load_A == 1'b1)) begin
        vx_img_V_last_V_1_payload_A <= packy_last_V_reg_952_pp0_iter28_reg;
    end
end

always @ (posedge ap_clk) begin
    if ((vx_img_V_last_V_1_load_B == 1'b1)) begin
        vx_img_V_last_V_1_payload_B <= packy_last_V_reg_952_pp0_iter28_reg;
    end
end

always @ (posedge ap_clk) begin
    if ((vy_img_V_data_V_1_load_A == 1'b1)) begin
        vy_img_V_data_V_1_payload_A <= packy_data_V_fu_903_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((vy_img_V_data_V_1_load_B == 1'b1)) begin
        vy_img_V_data_V_1_payload_B <= packy_data_V_fu_903_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((vy_img_V_last_V_1_load_A == 1'b1)) begin
        vy_img_V_last_V_1_payload_A <= packy_last_V_reg_952_pp0_iter28_reg;
    end
end

always @ (posedge ap_clk) begin
    if ((vy_img_V_last_V_1_load_B == 1'b1)) begin
        vy_img_V_last_V_1_payload_B <= packy_last_V_reg_952_pp0_iter28_reg;
    end
end

always @ (*) begin
    if (((exitcond_flatten_reg_938 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        A11_img_V_blk_n = A11_img_V_empty_n;
    end else begin
        A11_img_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((exitcond_flatten_reg_938 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        A11_img_V_read = 1'b1;
    end else begin
        A11_img_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond_flatten_reg_938 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        A12_img_V_blk_n = A12_img_V_empty_n;
    end else begin
        A12_img_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((exitcond_flatten_reg_938 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        A12_img_V_read = 1'b1;
    end else begin
        A12_img_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond_flatten_reg_938 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        A22_img_V_blk_n = A22_img_V_empty_n;
    end else begin
        A22_img_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((exitcond_flatten_reg_938 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        A22_img_V_read = 1'b1;
    end else begin
        A22_img_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond_flatten_reg_938 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        B1_img_V_blk_n = B1_img_V_empty_n;
    end else begin
        B1_img_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((exitcond_flatten_reg_938 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        B1_img_V_read = 1'b1;
    end else begin
        B1_img_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond_flatten_reg_938 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        B2_img_V_blk_n = B2_img_V_empty_n;
    end else begin
        B2_img_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((exitcond_flatten_reg_938 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        B2_img_V_read = 1'b1;
    end else begin
        B2_img_V_read = 1'b0;
    end
end

always @ (*) begin
    if ((exitcond_flatten_fu_378_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state2 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state2 = 1'b0;
    end
end

always @ (*) begin
    if ((~((vx_img_V_data_V_1_ack_in == 1'b0) | (vy_img_V_last_V_1_ack_in == 1'b0) | (vy_img_V_data_V_1_ack_in == 1'b0) | (vx_img_V_last_V_1_ack_in == 1'b0)) & (1'b1 == ap_CS_fsm_state33))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter28 == 1'b0) & (ap_enable_reg_pp0_iter27 == 1'b0) & (ap_enable_reg_pp0_iter26 == 1'b0) & (ap_enable_reg_pp0_iter25 == 1'b0) & (ap_enable_reg_pp0_iter24 == 1'b0) & (ap_enable_reg_pp0_iter23 == 1'b0) & (ap_enable_reg_pp0_iter22 == 1'b0) & (ap_enable_reg_pp0_iter21 == 1'b0) & (ap_enable_reg_pp0_iter20 == 1'b0) & (ap_enable_reg_pp0_iter19 == 1'b0) & (ap_enable_reg_pp0_iter18 == 1'b0) & (ap_enable_reg_pp0_iter17 == 1'b0) & (ap_enable_reg_pp0_iter16 == 1'b0) & (ap_enable_reg_pp0_iter15 == 1'b0) & (ap_enable_reg_pp0_iter14 == 1'b0) & (ap_enable_reg_pp0_iter13 == 1'b0) & (ap_enable_reg_pp0_iter12 == 1'b0) & (ap_enable_reg_pp0_iter11 == 1'b0) & (ap_enable_reg_pp0_iter10 == 1'b0) & (ap_enable_reg_pp0_iter9 == 1'b0) & (ap_enable_reg_pp0_iter8 == 1'b0) & (ap_enable_reg_pp0_iter7 == 1'b0) & (ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter30 == 1'b0) & (ap_enable_reg_pp0_iter29 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond_flatten_reg_938_pp0_iter4_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter5 == 1'b1))) begin
        ap_phi_mux_cnt_1_i_phi_fu_301_p4 = cnt_reg_1045;
    end else begin
        ap_phi_mux_cnt_1_i_phi_fu_301_p4 = cnt_1_i_reg_297;
    end
end

always @ (*) begin
    if ((~((vx_img_V_data_V_1_ack_in == 1'b0) | (vy_img_V_last_V_1_ack_in == 1'b0) | (vy_img_V_data_V_1_ack_in == 1'b0) | (vx_img_V_last_V_1_ack_in == 1'b0)) & (1'b1 == ap_CS_fsm_state33))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_309_ce = 1'b1;
    end else begin
        grp_fu_309_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_313_ce = 1'b1;
    end else begin
        grp_fu_313_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_317_ce = 1'b1;
    end else begin
        grp_fu_317_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_322_ce = 1'b1;
    end else begin
        grp_fu_322_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_327_ce = 1'b1;
    end else begin
        grp_fu_327_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_332_ce = 1'b1;
    end else begin
        grp_fu_332_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_335_ce = 1'b1;
    end else begin
        grp_fu_335_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_338_ce = 1'b1;
    end else begin
        grp_fu_338_ce = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        height_blk_n = height_empty_n;
    end else begin
        height_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (width_empty_n == 1'b0) | (height_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        height_read = 1'b1;
    end else begin
        height_read = 1'b0;
    end
end

always @ (*) begin
    if ((((exitcond_flatten_reg_938_pp0_iter29_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter30 == 1'b1)) | ((exitcond_flatten_reg_938_pp0_iter28_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter29 == 1'b1)))) begin
        vx_img_TDATA_blk_n = vx_img_V_data_V_1_state[1'd1];
    end else begin
        vx_img_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((vx_img_V_data_V_1_sel == 1'b1)) begin
        vx_img_V_data_V_1_data_out = vx_img_V_data_V_1_payload_B;
    end else begin
        vx_img_V_data_V_1_data_out = vx_img_V_data_V_1_payload_A;
    end
end

always @ (*) begin
    if (((exitcond_flatten_reg_938_pp0_iter28_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter29 == 1'b1))) begin
        vx_img_V_data_V_1_vld_in = 1'b1;
    end else begin
        vx_img_V_data_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((vx_img_V_last_V_1_sel == 1'b1)) begin
        vx_img_V_last_V_1_data_out = vx_img_V_last_V_1_payload_B;
    end else begin
        vx_img_V_last_V_1_data_out = vx_img_V_last_V_1_payload_A;
    end
end

always @ (*) begin
    if (((exitcond_flatten_reg_938_pp0_iter28_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter29 == 1'b1))) begin
        vx_img_V_last_V_1_vld_in = 1'b1;
    end else begin
        vx_img_V_last_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((((exitcond_flatten_reg_938_pp0_iter29_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter30 == 1'b1)) | ((exitcond_flatten_reg_938_pp0_iter28_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter29 == 1'b1)))) begin
        vy_img_TDATA_blk_n = vy_img_V_data_V_1_state[1'd1];
    end else begin
        vy_img_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((vy_img_V_data_V_1_sel == 1'b1)) begin
        vy_img_V_data_V_1_data_out = vy_img_V_data_V_1_payload_B;
    end else begin
        vy_img_V_data_V_1_data_out = vy_img_V_data_V_1_payload_A;
    end
end

always @ (*) begin
    if (((exitcond_flatten_reg_938_pp0_iter28_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter29 == 1'b1))) begin
        vy_img_V_data_V_1_vld_in = 1'b1;
    end else begin
        vy_img_V_data_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((vy_img_V_last_V_1_sel == 1'b1)) begin
        vy_img_V_last_V_1_data_out = vy_img_V_last_V_1_payload_B;
    end else begin
        vy_img_V_last_V_1_data_out = vy_img_V_last_V_1_payload_A;
    end
end

always @ (*) begin
    if (((exitcond_flatten_reg_938_pp0_iter28_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter29 == 1'b1))) begin
        vy_img_V_last_V_1_vld_in = 1'b1;
    end else begin
        vy_img_V_last_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        width_blk_n = width_empty_n;
    end else begin
        width_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (width_empty_n == 1'b0) | (height_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        width_read = 1'b1;
    end else begin
        width_read = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((ap_start == 1'b0) | (width_empty_n == 1'b0) | (height_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((1'b0 == ap_block_pp0_stage0_subdone) & (exitcond_flatten_fu_378_p2 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1)) & ~((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter29 == 1'b0) & (ap_enable_reg_pp0_iter30 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((1'b0 == ap_block_pp0_stage0_subdone) & (exitcond_flatten_fu_378_p2 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter29 == 1'b0) & (ap_enable_reg_pp0_iter30 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_state33;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state33 : begin
            if ((~((vx_img_V_data_V_1_ack_in == 1'b0) | (vy_img_V_last_V_1_ack_in == 1'b0) | (vy_img_V_data_V_1_ack_in == 1'b0) | (vx_img_V_last_V_1_ack_in == 1'b0)) & (1'b1 == ap_CS_fsm_state33))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state33;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign a_x_d_V_fu_460_p0 = A_0_0_V_reg_963;

assign a_x_d_V_fu_460_p1 = A_1_1_V_reg_975;

assign a_x_d_V_fu_460_p2 = ($signed(a_x_d_V_fu_460_p0) * $signed(a_x_d_V_fu_460_p1));

assign abs_det_A_V_fu_491_p3 = ((tmp_24_i_i_fu_485_p2[0:0] === 1'b1) ? ret_V_fu_475_p2 : neg_det_A_V_fu_479_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state33 = ap_CS_fsm[32'd2];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = ((ap_enable_reg_pp0_iter1 == 1'b1) & (((exitcond_flatten_reg_938 == 1'd0) & (1'b0 == B2_img_V_empty_n)) | ((exitcond_flatten_reg_938 == 1'd0) & (1'b0 == B1_img_V_empty_n)) | ((exitcond_flatten_reg_938 == 1'd0) & (1'b0 == A22_img_V_empty_n)) | ((exitcond_flatten_reg_938 == 1'd0) & (1'b0 == A12_img_V_empty_n)) | ((exitcond_flatten_reg_938 == 1'd0) & (1'b0 == A11_img_V_empty_n))));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((1'b1 == ap_block_state32_io) & (ap_enable_reg_pp0_iter30 == 1'b1)) | ((1'b1 == ap_block_state31_io) & (ap_enable_reg_pp0_iter29 == 1'b1)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (((exitcond_flatten_reg_938 == 1'd0) & (1'b0 == B2_img_V_empty_n)) | ((exitcond_flatten_reg_938 == 1'd0) & (1'b0 == B1_img_V_empty_n)) | ((exitcond_flatten_reg_938 == 1'd0) & (1'b0 == A22_img_V_empty_n)) | ((exitcond_flatten_reg_938 == 1'd0) & (1'b0 == A12_img_V_empty_n)) | ((exitcond_flatten_reg_938 == 1'd0) & (1'b0 == A11_img_V_empty_n)))));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((1'b1 == ap_block_state32_io) & (ap_enable_reg_pp0_iter30 == 1'b1)) | ((1'b1 == ap_block_state31_io) & (ap_enable_reg_pp0_iter29 == 1'b1)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (((exitcond_flatten_reg_938 == 1'd0) & (1'b0 == B2_img_V_empty_n)) | ((exitcond_flatten_reg_938 == 1'd0) & (1'b0 == B1_img_V_empty_n)) | ((exitcond_flatten_reg_938 == 1'd0) & (1'b0 == A22_img_V_empty_n)) | ((exitcond_flatten_reg_938 == 1'd0) & (1'b0 == A12_img_V_empty_n)) | ((exitcond_flatten_reg_938 == 1'd0) & (1'b0 == A11_img_V_empty_n)))));
end

always @ (*) begin
    ap_block_state1 = ((ap_start == 1'b0) | (width_empty_n == 1'b0) | (height_empty_n == 1'b0) | (ap_done_reg == 1'b1));
end

assign ap_block_state10_pp0_stage0_iter8 = ~(1'b1 == 1'b1);

assign ap_block_state11_pp0_stage0_iter9 = ~(1'b1 == 1'b1);

assign ap_block_state12_pp0_stage0_iter10 = ~(1'b1 == 1'b1);

assign ap_block_state13_pp0_stage0_iter11 = ~(1'b1 == 1'b1);

assign ap_block_state14_pp0_stage0_iter12 = ~(1'b1 == 1'b1);

assign ap_block_state15_pp0_stage0_iter13 = ~(1'b1 == 1'b1);

assign ap_block_state16_pp0_stage0_iter14 = ~(1'b1 == 1'b1);

assign ap_block_state17_pp0_stage0_iter15 = ~(1'b1 == 1'b1);

assign ap_block_state18_pp0_stage0_iter16 = ~(1'b1 == 1'b1);

assign ap_block_state19_pp0_stage0_iter17 = ~(1'b1 == 1'b1);

assign ap_block_state20_pp0_stage0_iter18 = ~(1'b1 == 1'b1);

assign ap_block_state21_pp0_stage0_iter19 = ~(1'b1 == 1'b1);

assign ap_block_state22_pp0_stage0_iter20 = ~(1'b1 == 1'b1);

assign ap_block_state23_pp0_stage0_iter21 = ~(1'b1 == 1'b1);

assign ap_block_state24_pp0_stage0_iter22 = ~(1'b1 == 1'b1);

assign ap_block_state25_pp0_stage0_iter23 = ~(1'b1 == 1'b1);

assign ap_block_state26_pp0_stage0_iter24 = ~(1'b1 == 1'b1);

assign ap_block_state27_pp0_stage0_iter25 = ~(1'b1 == 1'b1);

assign ap_block_state28_pp0_stage0_iter26 = ~(1'b1 == 1'b1);

assign ap_block_state29_pp0_stage0_iter27 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state30_pp0_stage0_iter28 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state31_io = (((exitcond_flatten_reg_938_pp0_iter28_reg == 1'd0) & (vy_img_V_data_V_1_ack_in == 1'b0)) | ((exitcond_flatten_reg_938_pp0_iter28_reg == 1'd0) & (vx_img_V_data_V_1_ack_in == 1'b0)));
end

assign ap_block_state31_pp0_stage0_iter29 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state32_io = (((exitcond_flatten_reg_938_pp0_iter29_reg == 1'd0) & (vy_img_V_data_V_1_ack_in == 1'b0)) | ((exitcond_flatten_reg_938_pp0_iter29_reg == 1'd0) & (vx_img_V_data_V_1_ack_in == 1'b0)));
end

assign ap_block_state32_pp0_stage0_iter30 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state33 = ((vx_img_V_data_V_1_ack_in == 1'b0) | (vy_img_V_last_V_1_ack_in == 1'b0) | (vy_img_V_data_V_1_ack_in == 1'b0) | (vx_img_V_last_V_1_ack_in == 1'b0));
end

always @ (*) begin
    ap_block_state3_pp0_stage0_iter1 = (((exitcond_flatten_reg_938 == 1'd0) & (1'b0 == B2_img_V_empty_n)) | ((exitcond_flatten_reg_938 == 1'd0) & (1'b0 == B1_img_V_empty_n)) | ((exitcond_flatten_reg_938 == 1'd0) & (1'b0 == A22_img_V_empty_n)) | ((exitcond_flatten_reg_938 == 1'd0) & (1'b0 == A12_img_V_empty_n)) | ((exitcond_flatten_reg_938 == 1'd0) & (1'b0 == A11_img_V_empty_n)));
end

assign ap_block_state4_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage0_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage0_iter7 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_return = cnt_1_i_reg_297;

assign b_x_c_V_fu_469_p0 = tmp_23_i_i_fu_466_p1;

assign b_x_c_V_fu_469_p1 = tmp_23_i_i_fu_466_p1;

assign b_x_c_V_fu_469_p2 = ($signed(b_x_c_V_fu_469_p0) * $signed(b_x_c_V_fu_469_p1));

assign bound_fu_911_p0 = bound_fu_911_p00;

assign bound_fu_911_p00 = width_dout;

assign bound_fu_911_p1 = bound_fu_911_p10;

assign bound_fu_911_p10 = height_dout;

assign cnt_fu_590_p2 = (ap_phi_mux_cnt_1_i_phi_fu_301_p4 + tmp_73_i_fu_586_p1);

assign col_fu_448_p2 = (16'd1 + col_i_mid2_fu_394_p3);

assign col_i_mid2_fu_394_p3 = ((exitcond_i6_fu_389_p2[0:0] === 1'b1) ? 16'd0 : col_i_reg_286);

assign exitcond_flatten_fu_378_p2 = ((indvar_flatten_reg_264 == bound_reg_933) ? 1'b1 : 1'b0);

assign exitcond_i6_fu_389_p2 = ((col_i_reg_286 == width_read_reg_917) ? 1'b1 : 1'b0);

assign grp_fu_332_p0 = ret_V_fu_475_p2[63:0];

assign grp_fu_335_p0 = (64'd0 - tmp_35_i_i_fu_596_p2);

assign i_op_assign_fu_607_p3 = ((tmp_26_i_i_reg_1008_pp0_iter20_reg[0:0] === 1'b1) ? 32'd0 : recipr_det_A_reg_1070);

assign indvar_flatten_next_fu_383_p2 = (indvar_flatten_reg_264 + 32'd1);

assign invertible_demorgan_fu_542_p2 = (tmp_42_i_i_fu_536_p2 | tmp_26_i_i_fu_504_p2);

assign invertible_fu_581_p2 = (invertible_demorgan_reg_1023 ^ 1'd1);

assign isNeg_1_fu_818_p3 = sh_assign_3_fu_812_p2[32'd8];

assign isNeg_fu_703_p3 = sh_assign_fu_697_p2[32'd8];

assign mantissa_V_1_fu_796_p4 = {{{{1'd1}, {tmp_V_3_reg_1118}}}, {1'd0}};

assign mantissa_V_1_i_i_i_c_fu_690_p1 = mantissa_V_fu_681_p4;

assign mantissa_V_1_i_i_i_fu_805_p1 = mantissa_V_1_fu_796_p4;

assign mantissa_V_fu_681_p4 = {{{{1'd1}, {tmp_V_1_reg_1102}}}, {1'd0}};

assign neg_det_A_V_fu_479_p2 = (68'd0 - ret_V_fu_475_p2);

assign op2_2_fu_575_p0 = tmp_32_i_i_fu_563_p1;

assign op2_2_fu_575_p1 = tmp_37_i_i_reg_1018;

assign op2_2_fu_575_p2 = ($signed(op2_2_fu_575_p0) * $signed(op2_2_fu_575_p1));

assign p_Val2_2_fu_652_p3 = ((invertible_demorgan_reg_1023_pp0_iter27_reg[0:0] === 1'b1) ? 32'd0 : tmp_s_fu_648_p1);

assign p_Val2_s_fu_619_p3 = ((invertible_demorgan_reg_1023_pp0_iter27_reg[0:0] === 1'b1) ? 32'd0 : tmp_fu_615_p1);

assign packx_data_V_fu_788_p3 = ((p_Result_s_reg_1091[0:0] === 1'b1) ? result_V_1_fu_782_p2 : tmp_66_fu_774_p3);

assign packy_data_V_fu_903_p3 = ((p_Result_1_reg_1107[0:0] === 1'b1) ? result_V_3_fu_897_p2 : tmp_69_fu_889_p3);

assign packy_last_V_fu_442_p2 = (tmp_75_i_fu_437_p2 & tmp_69_i_mid2_fu_417_p3);

assign r_V_1_fu_746_p2 = mantissa_V_1_i_i_i_c_fu_690_p1 << tmp_i_i_i_i_51_fu_736_p1;

assign r_V_2_fu_855_p2 = mantissa_V_1_fu_796_p4 >> sh_assign_2_i_i_i45_1_fu_847_p1;

assign r_V_3_fu_861_p2 = mantissa_V_1_i_i_i_fu_805_p1 << tmp_i_i_i46_i_fu_851_p1;

assign r_V_fu_740_p2 = mantissa_V_fu_681_p4 >> sh_assign_2_i_i_i_ca_1_fu_732_p1;

assign result_V_1_fu_782_p2 = (8'd0 - tmp_66_fu_774_p3);

assign result_V_3_fu_897_p2 = (8'd0 - tmp_69_fu_889_p3);

assign ret_V_fu_475_p2 = (a_x_d_V_reg_991 - b_x_c_V_reg_997);

assign row3_fu_402_p2 = (16'd1 + row_i_reg_275);

assign row_i_mid2_fu_425_p3 = ((exitcond_i6_fu_389_p2[0:0] === 1'b1) ? row3_fu_402_p2 : row_i_reg_275);

assign sh_assign_2_i_i_i45_1_fu_847_p1 = ush_1_fu_835_p3;

assign sh_assign_2_i_i_i45_s_fu_843_p1 = ush_1_fu_835_p3;

assign sh_assign_2_i_i_i_ca_1_fu_732_p1 = ush_fu_720_p3;

assign sh_assign_2_i_i_i_ca_fu_728_p1 = ush_fu_720_p3;

assign sh_assign_3_fu_812_p2 = ($signed(9'd385) + $signed(tmp_i_i_i_i41_cast_i_fu_809_p1));

assign sh_assign_fu_697_p2 = ($signed(9'd385) + $signed(tmp_i_i_i_i_cast_i_fu_694_p1));

assign tmp_23_i_i_fu_466_p1 = A_0_1_V_reg_969;

assign tmp_24_i_i_fu_485_p2 = (($signed(ret_V_fu_475_p2) > $signed(68'd0)) ? 1'b1 : 1'b0);

assign tmp_26_i_i_fu_504_p2 = ((a_x_d_V_reg_991 == b_x_c_V_reg_997) ? 1'b1 : 1'b0);

assign tmp_27_i_i_fu_508_p2 = ($signed(34'd0) - $signed(A_0_1_V_reg_969_pp0_iter2_reg));

assign tmp_30_i_i_fu_554_p0 = A_1_1_V_reg_975_pp0_iter3_reg;

assign tmp_30_i_i_fu_554_p1 = B_0_V_reg_981_pp0_iter3_reg;

assign tmp_30_i_i_fu_554_p2 = ($signed(tmp_30_i_i_fu_554_p0) * $signed(tmp_30_i_i_fu_554_p1));

assign tmp_31_i_cast_i_fu_513_p1 = tmp_27_i_i_fu_508_p2;

assign tmp_32_i_i_fu_563_p1 = $signed(B_1_V_reg_986_pp0_iter3_reg);

assign tmp_33_i_i_fu_566_p0 = tmp_27_i_i_reg_1013;

assign tmp_33_i_i_fu_566_p1 = tmp_32_i_i_fu_563_p1;

assign tmp_33_i_i_fu_566_p2 = ($signed(tmp_33_i_i_fu_566_p0) * $signed(tmp_33_i_i_fu_566_p1));

assign tmp_34_i_cast_i_fu_517_p1 = A_0_0_V_reg_963_pp0_iter2_reg;

assign tmp_35_i_i_fu_596_p2 = (tmp_33_i_i_reg_1035 + tmp_30_i_i_reg_1030);

assign tmp_36_i_cast_i_fu_526_p1 = $signed(tmp_36_i_i_fu_520_p2);

assign tmp_36_i_i_fu_520_p2 = ($signed(tmp_34_i_cast_i_fu_517_p1) + $signed(tmp_31_i_cast_i_fu_513_p1));

assign tmp_37_i_i_fu_530_p2 = ($signed(36'd0) - $signed(tmp_36_i_cast_i_fu_526_p1));

assign tmp_42_i_i_fu_536_p2 = (($signed(abs_det_A_V_fu_491_p3) < $signed(68'd121)) ? 1'b1 : 1'b0);

assign tmp_64_fu_760_p1 = tmp_71_fu_752_p3;

assign tmp_65_cast_i_fu_351_p1 = width_dout;

assign tmp_65_fu_764_p4 = {{r_V_1_fu_746_p2[31:24]}};

assign tmp_66_fu_774_p3 = ((isNeg_fu_703_p3[0:0] === 1'b1) ? tmp_64_fu_760_p1 : tmp_65_fu_764_p4);

assign tmp_66_i_fu_355_p2 = ($signed(tmp_65_cast_i_fu_351_p1) + $signed(17'd131071));

assign tmp_67_cast_i_fu_369_p1 = row_i_reg_275;

assign tmp_67_cast_i_mid1_fu_408_p1 = row3_fu_402_p2;

assign tmp_67_fu_875_p1 = tmp_75_fu_867_p3;

assign tmp_68_fu_879_p4 = {{r_V_3_fu_861_p2[31:24]}};

assign tmp_69_fu_889_p3 = ((isNeg_1_fu_818_p3[0:0] === 1'b1) ? tmp_67_fu_875_p1 : tmp_68_fu_879_p4);

assign tmp_69_i_fu_373_p2 = ((tmp_67_cast_i_fu_369_p1 == tmp_i_reg_922) ? 1'b1 : 1'b0);

assign tmp_69_i_mid1_fu_412_p2 = ((tmp_67_cast_i_mid1_fu_408_p1 == tmp_i_reg_922) ? 1'b1 : 1'b0);

assign tmp_69_i_mid2_fu_417_p3 = ((exitcond_i6_fu_389_p2[0:0] === 1'b1) ? tmp_69_i_mid1_fu_412_p2 : tmp_69_i_fu_373_p2);

assign tmp_70_cast_i_fu_433_p1 = col_i_mid2_fu_394_p3;

assign tmp_71_fu_752_p3 = r_V_fu_740_p2[32'd24];

assign tmp_73_i_fu_586_p1 = invertible_fu_581_p2;

assign tmp_75_fu_867_p3 = r_V_2_fu_855_p2[32'd24];

assign tmp_75_i_fu_437_p2 = ((tmp_70_cast_i_fu_433_p1 == tmp_66_i_reg_928) ? 1'b1 : 1'b0);

assign tmp_V_1_fu_644_p1 = p_Val2_s_fu_619_p3[22:0];

assign tmp_V_3_fu_677_p1 = p_Val2_2_fu_652_p3[22:0];

assign tmp_cast_i_fu_341_p1 = height_dout;

assign tmp_fu_615_p1 = grp_fu_317_p2;

assign tmp_i_fu_345_p2 = ($signed(tmp_cast_i_fu_341_p1) + $signed(17'd131071));

assign tmp_i_i_i44_cast_i_fu_831_p1 = $signed(tmp_i_i_i44_i_fu_826_p2);

assign tmp_i_i_i44_i_fu_826_p2 = (8'd127 - tmp_V_2_reg_1112);

assign tmp_i_i_i46_i_fu_851_p1 = $unsigned(sh_assign_2_i_i_i45_s_fu_843_p1);

assign tmp_i_i_i_cast_i_fu_716_p1 = $signed(tmp_i_i_i_i_fu_711_p2);

assign tmp_i_i_i_i41_cast_i_fu_809_p1 = tmp_V_2_reg_1112;

assign tmp_i_i_i_i_51_fu_736_p1 = $unsigned(sh_assign_2_i_i_i_ca_fu_728_p1);

assign tmp_i_i_i_i_cast_i_fu_694_p1 = tmp_V_reg_1096;

assign tmp_i_i_i_i_fu_711_p2 = (8'd127 - tmp_V_reg_1096);

assign tmp_s_fu_648_p1 = grp_fu_322_p2;

assign ush_1_fu_835_p3 = ((isNeg_1_fu_818_p3[0:0] === 1'b1) ? tmp_i_i_i44_cast_i_fu_831_p1 : sh_assign_3_fu_812_p2);

assign ush_fu_720_p3 = ((isNeg_fu_703_p3[0:0] === 1'b1) ? tmp_i_i_i_cast_i_fu_716_p1 : sh_assign_fu_697_p2);

assign vx_img_TDATA = vx_img_V_data_V_1_data_out;

assign vx_img_TLAST = vx_img_V_last_V_1_data_out;

assign vx_img_TVALID = vx_img_V_last_V_1_state[1'd0];

assign vx_img_V_data_V_1_ack_in = vx_img_V_data_V_1_state[1'd1];

assign vx_img_V_data_V_1_ack_out = vx_img_TREADY;

assign vx_img_V_data_V_1_load_A = (vx_img_V_data_V_1_state_cmp_full & ~vx_img_V_data_V_1_sel_wr);

assign vx_img_V_data_V_1_load_B = (vx_img_V_data_V_1_state_cmp_full & vx_img_V_data_V_1_sel_wr);

assign vx_img_V_data_V_1_sel = vx_img_V_data_V_1_sel_rd;

assign vx_img_V_data_V_1_state_cmp_full = ((vx_img_V_data_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign vx_img_V_data_V_1_vld_out = vx_img_V_data_V_1_state[1'd0];

assign vx_img_V_last_V_1_ack_in = vx_img_V_last_V_1_state[1'd1];

assign vx_img_V_last_V_1_ack_out = vx_img_TREADY;

assign vx_img_V_last_V_1_load_A = (vx_img_V_last_V_1_state_cmp_full & ~vx_img_V_last_V_1_sel_wr);

assign vx_img_V_last_V_1_load_B = (vx_img_V_last_V_1_state_cmp_full & vx_img_V_last_V_1_sel_wr);

assign vx_img_V_last_V_1_sel = vx_img_V_last_V_1_sel_rd;

assign vx_img_V_last_V_1_state_cmp_full = ((vx_img_V_last_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign vx_img_V_last_V_1_vld_out = vx_img_V_last_V_1_state[1'd0];

assign vy_img_TDATA = vy_img_V_data_V_1_data_out;

assign vy_img_TLAST = vy_img_V_last_V_1_data_out;

assign vy_img_TVALID = vy_img_V_last_V_1_state[1'd0];

assign vy_img_V_data_V_1_ack_in = vy_img_V_data_V_1_state[1'd1];

assign vy_img_V_data_V_1_ack_out = vy_img_TREADY;

assign vy_img_V_data_V_1_load_A = (vy_img_V_data_V_1_state_cmp_full & ~vy_img_V_data_V_1_sel_wr);

assign vy_img_V_data_V_1_load_B = (vy_img_V_data_V_1_state_cmp_full & vy_img_V_data_V_1_sel_wr);

assign vy_img_V_data_V_1_sel = vy_img_V_data_V_1_sel_rd;

assign vy_img_V_data_V_1_state_cmp_full = ((vy_img_V_data_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign vy_img_V_data_V_1_vld_out = vy_img_V_data_V_1_state[1'd0];

assign vy_img_V_last_V_1_ack_in = vy_img_V_last_V_1_state[1'd1];

assign vy_img_V_last_V_1_ack_out = vy_img_TREADY;

assign vy_img_V_last_V_1_load_A = (vy_img_V_last_V_1_state_cmp_full & ~vy_img_V_last_V_1_sel_wr);

assign vy_img_V_last_V_1_load_B = (vy_img_V_last_V_1_state_cmp_full & vy_img_V_last_V_1_sel_wr);

assign vy_img_V_last_V_1_sel = vy_img_V_last_V_1_sel_rd;

assign vy_img_V_last_V_1_state_cmp_full = ((vy_img_V_last_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign vy_img_V_last_V_1_vld_out = vy_img_V_last_V_1_state[1'd0];

endmodule //hls_ComputeVectors
