// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module hls_twoIsotropicFilt (
        ap_clk,
        ap_rst,
        ap_start,
        start_full_n,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        start_out,
        start_write,
        inp1_img_TDATA,
        inp1_img_TVALID,
        inp1_img_TREADY,
        inp1_img_TLAST,
        inp2_img_TDATA,
        inp2_img_TVALID,
        inp2_img_TREADY,
        inp2_img_TLAST,
        out1_img_V_din,
        out1_img_V_full_n,
        out1_img_V_write,
        out2_img_V_din,
        out2_img_V_full_n,
        out2_img_V_write,
        height,
        width,
        height_out_din,
        height_out_full_n,
        height_out_write,
        width_out_din,
        width_out_full_n,
        width_out_write
);

parameter    ap_ST_fsm_state1 = 3'd1;
parameter    ap_ST_fsm_pp0_stage0 = 3'd2;
parameter    ap_ST_fsm_state6 = 3'd4;

input   ap_clk;
input   ap_rst;
input   ap_start;
input   start_full_n;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output   start_out;
output   start_write;
input  [7:0] inp1_img_TDATA;
input   inp1_img_TVALID;
output   inp1_img_TREADY;
input  [0:0] inp1_img_TLAST;
input  [7:0] inp2_img_TDATA;
input   inp2_img_TVALID;
output   inp2_img_TREADY;
input  [0:0] inp2_img_TLAST;
output  [11:0] out1_img_V_din;
input   out1_img_V_full_n;
output   out1_img_V_write;
output  [11:0] out2_img_V_din;
input   out2_img_V_full_n;
output   out2_img_V_write;
input  [15:0] height;
input  [15:0] width;
output  [15:0] height_out_din;
input   height_out_full_n;
output   height_out_write;
output  [15:0] width_out_din;
input   width_out_full_n;
output   width_out_write;

reg ap_done;
reg ap_idle;
reg start_write;
reg out1_img_V_write;
reg out2_img_V_write;
reg height_out_write;
reg width_out_write;

reg    real_start;
reg    start_once_reg;
reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    internal_ap_ready;
reg   [7:0] inp1_img_V_data_V_0_data_out;
wire    inp1_img_V_data_V_0_vld_in;
wire    inp1_img_V_data_V_0_vld_out;
wire    inp1_img_V_data_V_0_ack_in;
reg    inp1_img_V_data_V_0_ack_out;
reg   [7:0] inp1_img_V_data_V_0_payload_A;
reg   [7:0] inp1_img_V_data_V_0_payload_B;
reg    inp1_img_V_data_V_0_sel_rd;
reg    inp1_img_V_data_V_0_sel_wr;
wire    inp1_img_V_data_V_0_sel;
wire    inp1_img_V_data_V_0_load_A;
wire    inp1_img_V_data_V_0_load_B;
reg   [1:0] inp1_img_V_data_V_0_state;
wire    inp1_img_V_data_V_0_state_cmp_full;
wire    inp1_img_V_last_V_0_vld_in;
reg    inp1_img_V_last_V_0_ack_out;
reg   [1:0] inp1_img_V_last_V_0_state;
reg   [7:0] inp2_img_V_data_V_0_data_out;
wire    inp2_img_V_data_V_0_vld_in;
wire    inp2_img_V_data_V_0_vld_out;
wire    inp2_img_V_data_V_0_ack_in;
reg    inp2_img_V_data_V_0_ack_out;
reg   [7:0] inp2_img_V_data_V_0_payload_A;
reg   [7:0] inp2_img_V_data_V_0_payload_B;
reg    inp2_img_V_data_V_0_sel_rd;
reg    inp2_img_V_data_V_0_sel_wr;
wire    inp2_img_V_data_V_0_sel;
wire    inp2_img_V_data_V_0_load_A;
wire    inp2_img_V_data_V_0_load_B;
reg   [1:0] inp2_img_V_data_V_0_state;
wire    inp2_img_V_data_V_0_state_cmp_full;
wire    inp2_img_V_last_V_0_vld_in;
reg    inp2_img_V_last_V_0_ack_out;
reg   [1:0] inp2_img_V_last_V_0_state;
wire   [8:0] lpf_lines_buffer_V_1_address0;
reg    lpf_lines_buffer_V_1_ce0;
wire   [19:0] lpf_lines_buffer_V_1_q0;
reg    lpf_lines_buffer_V_1_ce1;
reg    lpf_lines_buffer_V_1_we1;
wire   [8:0] lpf_lines_buffer_V_2_address0;
reg    lpf_lines_buffer_V_2_ce0;
wire   [19:0] lpf_lines_buffer_V_2_q0;
reg    lpf_lines_buffer_V_2_ce1;
reg    lpf_lines_buffer_V_2_we1;
wire   [8:0] lpf_lines_buffer_V_3_address0;
reg    lpf_lines_buffer_V_3_ce0;
wire   [19:0] lpf_lines_buffer_V_3_q0;
reg    lpf_lines_buffer_V_3_ce1;
reg    lpf_lines_buffer_V_3_we1;
wire   [8:0] lpf_lines_buffer_V_4_address0;
reg    lpf_lines_buffer_V_4_ce0;
wire   [19:0] lpf_lines_buffer_V_4_q0;
wire   [8:0] lpf_lines_buffer_V_4_address1;
reg    lpf_lines_buffer_V_4_ce1;
reg    lpf_lines_buffer_V_4_we1;
reg    inp1_img_TDATA_blk_n;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter0;
wire    ap_block_pp0_stage0;
wire   [0:0] exitcond_flatten_fu_484_p2;
wire   [0:0] or_cond_i_fu_588_p2;
reg    inp2_img_TDATA_blk_n;
reg    out1_img_V_blk_n;
reg    ap_enable_reg_pp0_iter3;
reg   [0:0] tmp_17_i_reg_1081;
reg   [0:0] tmp_17_i_reg_1081_pp0_iter2_reg;
reg    out2_img_V_blk_n;
reg    height_out_blk_n;
reg    width_out_blk_n;
reg   [32:0] indvar_flatten_reg_367;
reg   [15:0] row_i_reg_378;
reg   [15:0] col_i_reg_389;
reg    ap_block_state1;
wire   [16:0] tmp_5_i_fu_461_p2;
reg   [16:0] tmp_5_i_reg_1011;
wire   [33:0] grp_fu_867_p3;
reg   [33:0] bound_reg_1016;
reg   [0:0] exitcond_flatten_reg_1021;
reg    ap_predicate_op81_read_state2;
reg    ap_predicate_op83_read_state2;
reg    ap_block_state2_pp0_stage0_iter0;
wire    ap_block_state3_pp0_stage0_iter1;
wire    ap_block_state4_pp0_stage0_iter2;
reg    ap_block_state5_pp0_stage0_iter3;
reg    ap_block_pp0_stage0_11001;
reg   [0:0] exitcond_flatten_reg_1021_pp0_iter1_reg;
reg   [0:0] exitcond_flatten_reg_1021_pp0_iter2_reg;
wire   [32:0] indvar_flatten_next_fu_489_p2;
wire   [15:0] col_i_mid2_fu_495_p3;
reg   [15:0] col_i_mid2_reg_1030;
wire   [15:0] row_i_mid2_fu_567_p3;
wire   [0:0] tmp_12_i_fu_575_p2;
reg   [0:0] tmp_12_i_reg_1040;
reg   [8:0] lpf_lines_buffer_V_1_1_reg_1044;
reg   [8:0] lpf_lines_buffer_V_2_1_reg_1050;
reg   [8:0] lpf_lines_buffer_V_3_1_reg_1056;
reg   [0:0] or_cond_i_reg_1067;
reg   [7:0] tmp_data_V_reg_1071;
reg   [7:0] tmp_data_V_1_reg_1076;
wire   [0:0] tmp_17_i_fu_618_p2;
reg   [0:0] tmp_17_i_reg_1081_pp0_iter1_reg;
wire   [0:0] tmp_19_i_fu_624_p2;
reg   [0:0] tmp_19_i_reg_1085;
reg   [0:0] tmp_19_i_reg_1085_pp0_iter1_reg;
reg   [0:0] tmp_19_i_reg_1085_pp0_iter2_reg;
wire   [15:0] col_fu_630_p2;
reg   [23:0] window_0_V_load_reg_1094;
reg   [23:0] window_1_V_load_reg_1099;
reg   [23:0] window_2_V_load_reg_1104;
reg   [23:0] window_22_V_load_reg_1109;
reg   [23:0] window_5_V_load_reg_1114;
reg   [23:0] window_6_V_load_reg_1119;
reg   [23:0] window_7_V_load_reg_1124;
reg   [23:0] window_21_V_load_reg_1129;
reg   [23:0] window_10_V_load_reg_1134;
reg   [23:0] window_11_V_load_reg_1139;
reg   [23:0] window_12_V_load_reg_1144;
reg   [23:0] window_20_V_load_reg_1149;
reg   [23:0] window_15_V_load_reg_1154;
reg   [23:0] window_16_V_load_reg_1159;
reg   [23:0] window_17_V_load_reg_1164;
reg   [23:0] window_23_V_1_reg_1169;
reg   [23:0] window_3_V_1_reg_1174;
reg   [23:0] window_8_V_1_reg_1179;
reg   [23:0] window_13_V_1_reg_1184;
reg   [23:0] window_18_V_1_reg_1189;
reg    ap_block_pp0_stage0_subdone;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_condition_pp0_exit_iter1_state3;
wire   [23:0] grp_hls_isotropic_kernel_fu_424_ap_return;
reg    grp_hls_isotropic_kernel_fu_424_ap_ce;
reg    ap_predicate_op157_call_state4;
reg    ap_block_state2_pp0_stage0_iter0_ignore_call5;
wire    ap_block_state3_pp0_stage0_iter1_ignore_call5;
wire    ap_block_state4_pp0_stage0_iter2_ignore_call5;
reg    ap_block_state5_pp0_stage0_iter3_ignore_call5;
reg    ap_block_pp0_stage0_11001_ignoreCallOp157;
reg   [11:0] ap_phi_mux_p_1_i_phi_fu_404_p4;
wire   [11:0] filt_out1_V_fu_851_p1;
reg   [11:0] ap_phi_reg_pp0_iter3_p_1_i_reg_400;
wire   [11:0] ap_phi_reg_pp0_iter0_p_1_i_reg_400;
reg   [11:0] ap_phi_reg_pp0_iter1_p_1_i_reg_400;
reg   [11:0] ap_phi_reg_pp0_iter2_p_1_i_reg_400;
reg   [11:0] ap_phi_mux_p_2_i_phi_fu_416_p4;
reg   [11:0] ap_phi_reg_pp0_iter3_p_2_i_reg_412;
wire   [11:0] ap_phi_reg_pp0_iter0_p_2_i_reg_412;
reg   [11:0] ap_phi_reg_pp0_iter1_p_2_i_reg_412;
reg   [11:0] ap_phi_reg_pp0_iter2_p_2_i_reg_412;
wire   [63:0] tmp_13_i_fu_580_p1;
wire   [63:0] tmp_15_i_fu_822_p1;
reg    ap_block_pp0_stage0_01001;
reg   [23:0] window_0_V_fu_150;
reg   [23:0] window_1_V_fu_154;
reg   [23:0] window_2_V_fu_158;
reg   [23:0] window_22_V_fu_162;
reg   [23:0] window_5_V_fu_166;
reg   [23:0] window_6_V_fu_170;
reg   [23:0] window_7_V_fu_174;
reg   [23:0] window_21_V_fu_178;
reg   [23:0] window_10_V_fu_182;
reg   [23:0] window_11_V_fu_186;
reg   [23:0] window_12_V_fu_190;
reg   [23:0] window_20_V_fu_194;
reg   [23:0] window_15_V_fu_198;
reg   [23:0] window_16_V_fu_202;
reg   [23:0] window_17_V_fu_206;
reg   [23:0] window_23_V_fu_210;
wire   [23:0] p_Result_s_fu_818_p1;
reg   [23:0] window_3_V_fu_214;
wire   [23:0] pixels_0_V_fu_771_p1;
reg   [23:0] window_8_V_fu_218;
wire   [23:0] pixels_1_V_fu_775_p1;
reg   [23:0] window_13_V_fu_222;
wire   [23:0] pixels_2_V_fu_779_p1;
reg   [23:0] window_18_V_fu_226;
wire   [23:0] pixels_3_V_fu_783_p1;
wire   [19:0] tmp_14_i_fu_810_p3;
wire   [16:0] tmp_4_cast_i_fu_457_p1;
wire   [16:0] tmp_1_cast_i_fu_475_p1;
wire   [33:0] indvar_flatten_cast_fu_471_p1;
wire   [0:0] tmp_10_i_fu_479_p2;
wire   [15:0] row_fu_503_p2;
wire   [0:0] tmp_8_i_fu_514_p2;
wire   [0:0] tmp_8_i_mid1_fu_509_p2;
wire   [14:0] tmp_fu_527_p4;
wire   [14:0] tmp_1_fu_543_p4;
wire   [0:0] icmp2_fu_553_p2;
wire   [0:0] icmp1_fu_537_p2;
wire   [0:0] tmp_8_i_mid2_fu_519_p3;
wire   [14:0] tmp_2_fu_602_p4;
wire   [0:0] tmp_9_i_mid2_fu_559_p3;
wire   [0:0] icmp_fu_612_p2;
wire   [11:0] tmp_V_1_trunc_i_fu_807_p1;
wire   [15:0] grp_fu_867_p0;
wire   [2:0] grp_fu_867_p1;
wire   [16:0] grp_fu_867_p2;
wire    ap_CS_fsm_state6;
reg   [2:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
wire   [16:0] grp_fu_867_p00;
wire   [33:0] grp_fu_867_p20;
reg    ap_condition_433;

// power-on initialization
initial begin
#0 start_once_reg = 1'b0;
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 3'd1;
#0 inp1_img_V_data_V_0_sel_rd = 1'b0;
#0 inp1_img_V_data_V_0_sel_wr = 1'b0;
#0 inp1_img_V_data_V_0_state = 2'd0;
#0 inp1_img_V_last_V_0_state = 2'd0;
#0 inp2_img_V_data_V_0_sel_rd = 1'b0;
#0 inp2_img_V_data_V_0_sel_wr = 1'b0;
#0 inp2_img_V_data_V_0_state = 2'd0;
#0 inp2_img_V_last_V_0_state = 2'd0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
end

hls_twoIsotropicFilt_lpf_lines_buffer_V_1 #(
    .DataWidth( 20 ),
    .AddressRange( 480 ),
    .AddressWidth( 9 ))
lpf_lines_buffer_V_1_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(lpf_lines_buffer_V_1_address0),
    .ce0(lpf_lines_buffer_V_1_ce0),
    .q0(lpf_lines_buffer_V_1_q0),
    .address1(lpf_lines_buffer_V_1_1_reg_1044),
    .ce1(lpf_lines_buffer_V_1_ce1),
    .we1(lpf_lines_buffer_V_1_we1),
    .d1(lpf_lines_buffer_V_2_q0)
);

hls_twoIsotropicFilt_lpf_lines_buffer_V_1 #(
    .DataWidth( 20 ),
    .AddressRange( 480 ),
    .AddressWidth( 9 ))
lpf_lines_buffer_V_2_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(lpf_lines_buffer_V_2_address0),
    .ce0(lpf_lines_buffer_V_2_ce0),
    .q0(lpf_lines_buffer_V_2_q0),
    .address1(lpf_lines_buffer_V_2_1_reg_1050),
    .ce1(lpf_lines_buffer_V_2_ce1),
    .we1(lpf_lines_buffer_V_2_we1),
    .d1(lpf_lines_buffer_V_3_q0)
);

hls_twoIsotropicFilt_lpf_lines_buffer_V_1 #(
    .DataWidth( 20 ),
    .AddressRange( 480 ),
    .AddressWidth( 9 ))
lpf_lines_buffer_V_3_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(lpf_lines_buffer_V_3_address0),
    .ce0(lpf_lines_buffer_V_3_ce0),
    .q0(lpf_lines_buffer_V_3_q0),
    .address1(lpf_lines_buffer_V_3_1_reg_1056),
    .ce1(lpf_lines_buffer_V_3_ce1),
    .we1(lpf_lines_buffer_V_3_we1),
    .d1(lpf_lines_buffer_V_4_q0)
);

hls_twoIsotropicFilt_lpf_lines_buffer_V_1 #(
    .DataWidth( 20 ),
    .AddressRange( 480 ),
    .AddressWidth( 9 ))
lpf_lines_buffer_V_4_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(lpf_lines_buffer_V_4_address0),
    .ce0(lpf_lines_buffer_V_4_ce0),
    .q0(lpf_lines_buffer_V_4_q0),
    .address1(lpf_lines_buffer_V_4_address1),
    .ce1(lpf_lines_buffer_V_4_ce1),
    .we1(lpf_lines_buffer_V_4_we1),
    .d1(tmp_14_i_fu_810_p3)
);

hls_isotropic_kernel grp_hls_isotropic_kernel_fu_424(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .window_0_V_read(window_0_V_load_reg_1094),
    .window_1_V_read(window_1_V_load_reg_1099),
    .window_2_V_read(window_2_V_load_reg_1104),
    .window_3_V_read(window_3_V_1_reg_1174),
    .window_4_V_read(window_3_V_fu_214),
    .window_5_V_read(window_5_V_load_reg_1114),
    .window_6_V_read(window_6_V_load_reg_1119),
    .window_7_V_read(window_7_V_load_reg_1124),
    .window_8_V_read(window_8_V_1_reg_1179),
    .window_9_V_read(window_8_V_fu_218),
    .window_10_V_read(window_10_V_load_reg_1134),
    .window_11_V_read(window_11_V_load_reg_1139),
    .window_12_V_read(window_12_V_load_reg_1144),
    .window_13_V_read(window_13_V_1_reg_1184),
    .window_14_V_read(window_13_V_fu_222),
    .window_15_V_read(window_15_V_load_reg_1154),
    .window_16_V_read(window_16_V_load_reg_1159),
    .window_17_V_read(window_17_V_load_reg_1164),
    .window_18_V_read(window_18_V_1_reg_1189),
    .window_19_V_read(window_18_V_fu_226),
    .window_20_V_read(window_20_V_load_reg_1149),
    .window_21_V_read(window_21_V_load_reg_1129),
    .window_22_V_read(window_22_V_load_reg_1109),
    .window_23_V_read(window_23_V_1_reg_1169),
    .window_24_V_read(window_23_V_fu_210),
    .ap_return(grp_hls_isotropic_kernel_fu_424_ap_return),
    .ap_ce(grp_hls_isotropic_kernel_fu_424_ap_ce)
);

hls_LK_am_addmul_16ns_3ns_17ns_34_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 3 ),
    .din2_WIDTH( 17 ),
    .dout_WIDTH( 34 ))
hls_LK_am_addmul_16ns_3ns_17ns_34_1_1_U26(
    .din0(grp_fu_867_p0),
    .din1(grp_fu_867_p1),
    .din2(grp_fu_867_p2),
    .dout(grp_fu_867_p3)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state6)) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((exitcond_flatten_fu_484_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((~((real_start == 1'b0) | (width_out_full_n == 1'b0) | (height_out_full_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter1_state3)) begin
                ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter0;
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end else if ((~((real_start == 1'b0) | (width_out_full_n == 1'b0) | (height_out_full_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter3 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        inp1_img_V_data_V_0_sel_rd <= 1'b0;
    end else begin
        if (((inp1_img_V_data_V_0_ack_out == 1'b1) & (inp1_img_V_data_V_0_vld_out == 1'b1))) begin
            inp1_img_V_data_V_0_sel_rd <= ~inp1_img_V_data_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        inp1_img_V_data_V_0_sel_wr <= 1'b0;
    end else begin
        if (((inp1_img_V_data_V_0_ack_in == 1'b1) & (inp1_img_V_data_V_0_vld_in == 1'b1))) begin
            inp1_img_V_data_V_0_sel_wr <= ~inp1_img_V_data_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        inp1_img_V_data_V_0_state <= 2'd0;
    end else begin
        if ((((inp1_img_V_data_V_0_state == 2'd2) & (inp1_img_V_data_V_0_vld_in == 1'b0)) | ((inp1_img_V_data_V_0_state == 2'd3) & (inp1_img_V_data_V_0_vld_in == 1'b0) & (inp1_img_V_data_V_0_ack_out == 1'b1)))) begin
            inp1_img_V_data_V_0_state <= 2'd2;
        end else if ((((inp1_img_V_data_V_0_state == 2'd1) & (inp1_img_V_data_V_0_ack_out == 1'b0)) | ((inp1_img_V_data_V_0_state == 2'd3) & (inp1_img_V_data_V_0_ack_out == 1'b0) & (inp1_img_V_data_V_0_vld_in == 1'b1)))) begin
            inp1_img_V_data_V_0_state <= 2'd1;
        end else if (((~((inp1_img_V_data_V_0_vld_in == 1'b0) & (inp1_img_V_data_V_0_ack_out == 1'b1)) & ~((inp1_img_V_data_V_0_ack_out == 1'b0) & (inp1_img_V_data_V_0_vld_in == 1'b1)) & (inp1_img_V_data_V_0_state == 2'd3)) | ((inp1_img_V_data_V_0_state == 2'd1) & (inp1_img_V_data_V_0_ack_out == 1'b1)) | ((inp1_img_V_data_V_0_state == 2'd2) & (inp1_img_V_data_V_0_vld_in == 1'b1)))) begin
            inp1_img_V_data_V_0_state <= 2'd3;
        end else begin
            inp1_img_V_data_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        inp1_img_V_last_V_0_state <= 2'd0;
    end else begin
        if ((((inp1_img_V_last_V_0_state == 2'd2) & (inp1_img_V_last_V_0_vld_in == 1'b0)) | ((inp1_img_V_last_V_0_state == 2'd3) & (inp1_img_V_last_V_0_vld_in == 1'b0) & (inp1_img_V_last_V_0_ack_out == 1'b1)))) begin
            inp1_img_V_last_V_0_state <= 2'd2;
        end else if ((((inp1_img_V_last_V_0_state == 2'd1) & (inp1_img_V_last_V_0_ack_out == 1'b0)) | ((inp1_img_V_last_V_0_state == 2'd3) & (inp1_img_V_last_V_0_ack_out == 1'b0) & (inp1_img_V_last_V_0_vld_in == 1'b1)))) begin
            inp1_img_V_last_V_0_state <= 2'd1;
        end else if (((~((inp1_img_V_last_V_0_vld_in == 1'b0) & (inp1_img_V_last_V_0_ack_out == 1'b1)) & ~((inp1_img_V_last_V_0_ack_out == 1'b0) & (inp1_img_V_last_V_0_vld_in == 1'b1)) & (inp1_img_V_last_V_0_state == 2'd3)) | ((inp1_img_V_last_V_0_state == 2'd1) & (inp1_img_V_last_V_0_ack_out == 1'b1)) | ((inp1_img_V_last_V_0_state == 2'd2) & (inp1_img_V_last_V_0_vld_in == 1'b1)))) begin
            inp1_img_V_last_V_0_state <= 2'd3;
        end else begin
            inp1_img_V_last_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        inp2_img_V_data_V_0_sel_rd <= 1'b0;
    end else begin
        if (((inp2_img_V_data_V_0_ack_out == 1'b1) & (inp2_img_V_data_V_0_vld_out == 1'b1))) begin
            inp2_img_V_data_V_0_sel_rd <= ~inp2_img_V_data_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        inp2_img_V_data_V_0_sel_wr <= 1'b0;
    end else begin
        if (((inp2_img_V_data_V_0_ack_in == 1'b1) & (inp2_img_V_data_V_0_vld_in == 1'b1))) begin
            inp2_img_V_data_V_0_sel_wr <= ~inp2_img_V_data_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        inp2_img_V_data_V_0_state <= 2'd0;
    end else begin
        if ((((inp2_img_V_data_V_0_state == 2'd2) & (inp2_img_V_data_V_0_vld_in == 1'b0)) | ((inp2_img_V_data_V_0_state == 2'd3) & (inp2_img_V_data_V_0_vld_in == 1'b0) & (inp2_img_V_data_V_0_ack_out == 1'b1)))) begin
            inp2_img_V_data_V_0_state <= 2'd2;
        end else if ((((inp2_img_V_data_V_0_state == 2'd1) & (inp2_img_V_data_V_0_ack_out == 1'b0)) | ((inp2_img_V_data_V_0_state == 2'd3) & (inp2_img_V_data_V_0_ack_out == 1'b0) & (inp2_img_V_data_V_0_vld_in == 1'b1)))) begin
            inp2_img_V_data_V_0_state <= 2'd1;
        end else if (((~((inp2_img_V_data_V_0_vld_in == 1'b0) & (inp2_img_V_data_V_0_ack_out == 1'b1)) & ~((inp2_img_V_data_V_0_ack_out == 1'b0) & (inp2_img_V_data_V_0_vld_in == 1'b1)) & (inp2_img_V_data_V_0_state == 2'd3)) | ((inp2_img_V_data_V_0_state == 2'd1) & (inp2_img_V_data_V_0_ack_out == 1'b1)) | ((inp2_img_V_data_V_0_state == 2'd2) & (inp2_img_V_data_V_0_vld_in == 1'b1)))) begin
            inp2_img_V_data_V_0_state <= 2'd3;
        end else begin
            inp2_img_V_data_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        inp2_img_V_last_V_0_state <= 2'd0;
    end else begin
        if ((((inp2_img_V_last_V_0_state == 2'd2) & (inp2_img_V_last_V_0_vld_in == 1'b0)) | ((inp2_img_V_last_V_0_state == 2'd3) & (inp2_img_V_last_V_0_vld_in == 1'b0) & (inp2_img_V_last_V_0_ack_out == 1'b1)))) begin
            inp2_img_V_last_V_0_state <= 2'd2;
        end else if ((((inp2_img_V_last_V_0_state == 2'd1) & (inp2_img_V_last_V_0_ack_out == 1'b0)) | ((inp2_img_V_last_V_0_state == 2'd3) & (inp2_img_V_last_V_0_ack_out == 1'b0) & (inp2_img_V_last_V_0_vld_in == 1'b1)))) begin
            inp2_img_V_last_V_0_state <= 2'd1;
        end else if (((~((inp2_img_V_last_V_0_vld_in == 1'b0) & (inp2_img_V_last_V_0_ack_out == 1'b1)) & ~((inp2_img_V_last_V_0_ack_out == 1'b0) & (inp2_img_V_last_V_0_vld_in == 1'b1)) & (inp2_img_V_last_V_0_state == 2'd3)) | ((inp2_img_V_last_V_0_state == 2'd1) & (inp2_img_V_last_V_0_ack_out == 1'b1)) | ((inp2_img_V_last_V_0_state == 2'd2) & (inp2_img_V_last_V_0_vld_in == 1'b1)))) begin
            inp2_img_V_last_V_0_state <= 2'd3;
        end else begin
            inp2_img_V_last_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_once_reg <= 1'b0;
    end else begin
        if (((internal_ap_ready == 1'b0) & (real_start == 1'b1))) begin
            start_once_reg <= 1'b1;
        end else if ((internal_ap_ready == 1'b1)) begin
            start_once_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_433)) begin
        if (((tmp_19_i_fu_624_p2 == 1'd0) & (exitcond_flatten_fu_484_p2 == 1'd0))) begin
            ap_phi_reg_pp0_iter1_p_1_i_reg_400 <= 12'd0;
        end else if ((1'b1 == 1'b1)) begin
            ap_phi_reg_pp0_iter1_p_1_i_reg_400 <= ap_phi_reg_pp0_iter0_p_1_i_reg_400;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_433)) begin
        if (((tmp_19_i_fu_624_p2 == 1'd0) & (exitcond_flatten_fu_484_p2 == 1'd0))) begin
            ap_phi_reg_pp0_iter1_p_2_i_reg_412 <= 12'd0;
        end else if ((1'b1 == 1'b1)) begin
            ap_phi_reg_pp0_iter1_p_2_i_reg_412 <= ap_phi_reg_pp0_iter0_p_2_i_reg_412;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_flatten_fu_484_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        col_i_reg_389 <= col_fu_630_p2;
    end else if ((~((real_start == 1'b0) | (width_out_full_n == 1'b0) | (height_out_full_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        col_i_reg_389 <= 16'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_flatten_fu_484_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        indvar_flatten_reg_367 <= indvar_flatten_next_fu_489_p2;
    end else if ((~((real_start == 1'b0) | (width_out_full_n == 1'b0) | (height_out_full_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        indvar_flatten_reg_367 <= 33'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_flatten_fu_484_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        row_i_reg_378 <= row_i_mid2_fu_567_p3;
    end else if ((~((real_start == 1'b0) | (width_out_full_n == 1'b0) | (height_out_full_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        row_i_reg_378 <= 16'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_reg_pp0_iter2_p_1_i_reg_400 <= ap_phi_reg_pp0_iter1_p_1_i_reg_400;
        ap_phi_reg_pp0_iter2_p_2_i_reg_412 <= ap_phi_reg_pp0_iter1_p_2_i_reg_412;
        window_0_V_fu_150[19 : 0] <= window_1_V_fu_154[19 : 0];
        window_10_V_fu_182[19 : 0] <= window_11_V_fu_186[19 : 0];
        window_11_V_fu_186[19 : 0] <= window_12_V_fu_190[19 : 0];
        window_12_V_fu_190[19 : 0] <= window_13_V_fu_222[19 : 0];
        window_15_V_fu_198[19 : 0] <= window_16_V_fu_202[19 : 0];
        window_16_V_fu_202[19 : 0] <= window_17_V_fu_206[19 : 0];
        window_17_V_fu_206[19 : 0] <= window_18_V_fu_226[19 : 0];
        window_1_V_fu_154[19 : 0] <= window_2_V_fu_158[19 : 0];
        window_20_V_fu_194[7 : 0] <= window_21_V_fu_178[7 : 0];
window_20_V_fu_194[19 : 12] <= window_21_V_fu_178[19 : 12];
        window_21_V_fu_178[7 : 0] <= window_22_V_fu_162[7 : 0];
window_21_V_fu_178[19 : 12] <= window_22_V_fu_162[19 : 12];
        window_22_V_fu_162[7 : 0] <= window_23_V_fu_210[7 : 0];
window_22_V_fu_162[19 : 12] <= window_23_V_fu_210[19 : 12];
        window_2_V_fu_158[19 : 0] <= window_3_V_fu_214[19 : 0];
        window_5_V_fu_166[19 : 0] <= window_6_V_fu_170[19 : 0];
        window_6_V_fu_170[19 : 0] <= window_7_V_fu_174[19 : 0];
        window_7_V_fu_174[19 : 0] <= window_8_V_fu_218[19 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        ap_phi_reg_pp0_iter3_p_1_i_reg_400 <= ap_phi_reg_pp0_iter2_p_1_i_reg_400;
        ap_phi_reg_pp0_iter3_p_2_i_reg_412 <= ap_phi_reg_pp0_iter2_p_2_i_reg_412;
    end
end

always @ (posedge ap_clk) begin
    if ((~((real_start == 1'b0) | (width_out_full_n == 1'b0) | (height_out_full_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        bound_reg_1016 <= grp_fu_867_p3;
        tmp_5_i_reg_1011 <= tmp_5_i_fu_461_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_flatten_fu_484_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        col_i_mid2_reg_1030 <= col_i_mid2_fu_495_p3;
        or_cond_i_reg_1067 <= or_cond_i_fu_588_p2;
        tmp_12_i_reg_1040 <= tmp_12_i_fu_575_p2;
        tmp_17_i_reg_1081 <= tmp_17_i_fu_618_p2;
        tmp_19_i_reg_1085 <= tmp_19_i_fu_624_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        exitcond_flatten_reg_1021 <= exitcond_flatten_fu_484_p2;
        exitcond_flatten_reg_1021_pp0_iter1_reg <= exitcond_flatten_reg_1021;
        tmp_17_i_reg_1081_pp0_iter1_reg <= tmp_17_i_reg_1081;
        tmp_19_i_reg_1085_pp0_iter1_reg <= tmp_19_i_reg_1085;
        window_0_V_load_reg_1094[19 : 0] <= window_0_V_fu_150[19 : 0];
        window_10_V_load_reg_1134[19 : 0] <= window_10_V_fu_182[19 : 0];
        window_11_V_load_reg_1139[19 : 0] <= window_11_V_fu_186[19 : 0];
        window_12_V_load_reg_1144[19 : 0] <= window_12_V_fu_190[19 : 0];
        window_13_V_1_reg_1184[19 : 0] <= window_13_V_fu_222[19 : 0];
        window_15_V_load_reg_1154[19 : 0] <= window_15_V_fu_198[19 : 0];
        window_16_V_load_reg_1159[19 : 0] <= window_16_V_fu_202[19 : 0];
        window_17_V_load_reg_1164[19 : 0] <= window_17_V_fu_206[19 : 0];
        window_18_V_1_reg_1189[19 : 0] <= window_18_V_fu_226[19 : 0];
        window_1_V_load_reg_1099[19 : 0] <= window_1_V_fu_154[19 : 0];
        window_20_V_load_reg_1149[7 : 0] <= window_20_V_fu_194[7 : 0];
window_20_V_load_reg_1149[19 : 12] <= window_20_V_fu_194[19 : 12];
        window_21_V_load_reg_1129[7 : 0] <= window_21_V_fu_178[7 : 0];
window_21_V_load_reg_1129[19 : 12] <= window_21_V_fu_178[19 : 12];
        window_22_V_load_reg_1109[7 : 0] <= window_22_V_fu_162[7 : 0];
window_22_V_load_reg_1109[19 : 12] <= window_22_V_fu_162[19 : 12];
        window_23_V_1_reg_1169[7 : 0] <= window_23_V_fu_210[7 : 0];
window_23_V_1_reg_1169[19 : 12] <= window_23_V_fu_210[19 : 12];
        window_2_V_load_reg_1104[19 : 0] <= window_2_V_fu_158[19 : 0];
        window_3_V_1_reg_1174[19 : 0] <= window_3_V_fu_214[19 : 0];
        window_5_V_load_reg_1114[19 : 0] <= window_5_V_fu_166[19 : 0];
        window_6_V_load_reg_1119[19 : 0] <= window_6_V_fu_170[19 : 0];
        window_7_V_load_reg_1124[19 : 0] <= window_7_V_fu_174[19 : 0];
        window_8_V_1_reg_1179[19 : 0] <= window_8_V_fu_218[19 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        exitcond_flatten_reg_1021_pp0_iter2_reg <= exitcond_flatten_reg_1021_pp0_iter1_reg;
        tmp_17_i_reg_1081_pp0_iter2_reg <= tmp_17_i_reg_1081_pp0_iter1_reg;
        tmp_19_i_reg_1085_pp0_iter2_reg <= tmp_19_i_reg_1085_pp0_iter1_reg;
    end
end

always @ (posedge ap_clk) begin
    if ((inp1_img_V_data_V_0_load_A == 1'b1)) begin
        inp1_img_V_data_V_0_payload_A <= inp1_img_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((inp1_img_V_data_V_0_load_B == 1'b1)) begin
        inp1_img_V_data_V_0_payload_B <= inp1_img_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((inp2_img_V_data_V_0_load_A == 1'b1)) begin
        inp2_img_V_data_V_0_payload_A <= inp2_img_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((inp2_img_V_data_V_0_load_B == 1'b1)) begin
        inp2_img_V_data_V_0_payload_B <= inp2_img_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_12_i_fu_575_p2 == 1'd1) & (exitcond_flatten_fu_484_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        lpf_lines_buffer_V_1_1_reg_1044 <= tmp_13_i_fu_580_p1;
        lpf_lines_buffer_V_2_1_reg_1050 <= tmp_13_i_fu_580_p1;
        lpf_lines_buffer_V_3_1_reg_1056 <= tmp_13_i_fu_580_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((or_cond_i_fu_588_p2 == 1'd1) & (exitcond_flatten_fu_484_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        tmp_data_V_1_reg_1076 <= inp2_img_V_data_V_0_data_out;
        tmp_data_V_reg_1071 <= inp1_img_V_data_V_0_data_out;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_12_i_reg_1040 == 1'd1) & (exitcond_flatten_reg_1021 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        window_13_V_fu_222[19 : 0] <= pixels_2_V_fu_779_p1[19 : 0];
        window_18_V_fu_226[19 : 0] <= pixels_3_V_fu_783_p1[19 : 0];
        window_3_V_fu_214[19 : 0] <= pixels_0_V_fu_771_p1[19 : 0];
        window_8_V_fu_218[19 : 0] <= pixels_1_V_fu_775_p1[19 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((or_cond_i_reg_1067 == 1'd1) & (exitcond_flatten_reg_1021 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        window_23_V_fu_210[7 : 0] <= p_Result_s_fu_818_p1[7 : 0];
window_23_V_fu_210[19 : 12] <= p_Result_s_fu_818_p1[19 : 12];
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_condition_pp0_exit_iter1_state3 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter1_state3 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((real_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_19_i_reg_1085_pp0_iter2_reg == 1'd1) & (exitcond_flatten_reg_1021_pp0_iter2_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        ap_phi_mux_p_1_i_phi_fu_404_p4 = filt_out1_V_fu_851_p1;
    end else begin
        ap_phi_mux_p_1_i_phi_fu_404_p4 = ap_phi_reg_pp0_iter3_p_1_i_reg_400;
    end
end

always @ (*) begin
    if (((tmp_19_i_reg_1085_pp0_iter2_reg == 1'd1) & (exitcond_flatten_reg_1021_pp0_iter2_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        ap_phi_mux_p_2_i_phi_fu_416_p4 = {{grp_hls_isotropic_kernel_fu_424_ap_return[23:12]}};
    end else begin
        ap_phi_mux_p_2_i_phi_fu_416_p4 = ap_phi_reg_pp0_iter3_p_2_i_reg_412;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001_ignoreCallOp157) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_hls_isotropic_kernel_fu_424_ap_ce = 1'b1;
    end else begin
        grp_hls_isotropic_kernel_fu_424_ap_ce = 1'b0;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        height_out_blk_n = height_out_full_n;
    end else begin
        height_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (width_out_full_n == 1'b0) | (height_out_full_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        height_out_write = 1'b1;
    end else begin
        height_out_write = 1'b0;
    end
end

always @ (*) begin
    if (((or_cond_i_fu_588_p2 == 1'd1) & (exitcond_flatten_fu_484_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        inp1_img_TDATA_blk_n = inp1_img_V_data_V_0_state[1'd0];
    end else begin
        inp1_img_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_predicate_op81_read_state2 == 1'b1))) begin
        inp1_img_V_data_V_0_ack_out = 1'b1;
    end else begin
        inp1_img_V_data_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((inp1_img_V_data_V_0_sel == 1'b1)) begin
        inp1_img_V_data_V_0_data_out = inp1_img_V_data_V_0_payload_B;
    end else begin
        inp1_img_V_data_V_0_data_out = inp1_img_V_data_V_0_payload_A;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_predicate_op81_read_state2 == 1'b1))) begin
        inp1_img_V_last_V_0_ack_out = 1'b1;
    end else begin
        inp1_img_V_last_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if (((or_cond_i_fu_588_p2 == 1'd1) & (exitcond_flatten_fu_484_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        inp2_img_TDATA_blk_n = inp2_img_V_data_V_0_state[1'd0];
    end else begin
        inp2_img_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_predicate_op83_read_state2 == 1'b1))) begin
        inp2_img_V_data_V_0_ack_out = 1'b1;
    end else begin
        inp2_img_V_data_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((inp2_img_V_data_V_0_sel == 1'b1)) begin
        inp2_img_V_data_V_0_data_out = inp2_img_V_data_V_0_payload_B;
    end else begin
        inp2_img_V_data_V_0_data_out = inp2_img_V_data_V_0_payload_A;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_predicate_op83_read_state2 == 1'b1))) begin
        inp2_img_V_last_V_0_ack_out = 1'b1;
    end else begin
        inp2_img_V_last_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        internal_ap_ready = 1'b1;
    end else begin
        internal_ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        lpf_lines_buffer_V_1_ce0 = 1'b1;
    end else begin
        lpf_lines_buffer_V_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        lpf_lines_buffer_V_1_ce1 = 1'b1;
    end else begin
        lpf_lines_buffer_V_1_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_12_i_reg_1040 == 1'd1) & (exitcond_flatten_reg_1021 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        lpf_lines_buffer_V_1_we1 = 1'b1;
    end else begin
        lpf_lines_buffer_V_1_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        lpf_lines_buffer_V_2_ce0 = 1'b1;
    end else begin
        lpf_lines_buffer_V_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        lpf_lines_buffer_V_2_ce1 = 1'b1;
    end else begin
        lpf_lines_buffer_V_2_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_12_i_reg_1040 == 1'd1) & (exitcond_flatten_reg_1021 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        lpf_lines_buffer_V_2_we1 = 1'b1;
    end else begin
        lpf_lines_buffer_V_2_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        lpf_lines_buffer_V_3_ce0 = 1'b1;
    end else begin
        lpf_lines_buffer_V_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        lpf_lines_buffer_V_3_ce1 = 1'b1;
    end else begin
        lpf_lines_buffer_V_3_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_12_i_reg_1040 == 1'd1) & (exitcond_flatten_reg_1021 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        lpf_lines_buffer_V_3_we1 = 1'b1;
    end else begin
        lpf_lines_buffer_V_3_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        lpf_lines_buffer_V_4_ce0 = 1'b1;
    end else begin
        lpf_lines_buffer_V_4_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        lpf_lines_buffer_V_4_ce1 = 1'b1;
    end else begin
        lpf_lines_buffer_V_4_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((or_cond_i_reg_1067 == 1'd1) & (exitcond_flatten_reg_1021 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        lpf_lines_buffer_V_4_we1 = 1'b1;
    end else begin
        lpf_lines_buffer_V_4_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_17_i_reg_1081_pp0_iter2_reg == 1'd1) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        out1_img_V_blk_n = out1_img_V_full_n;
    end else begin
        out1_img_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((tmp_17_i_reg_1081_pp0_iter2_reg == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        out1_img_V_write = 1'b1;
    end else begin
        out1_img_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_17_i_reg_1081_pp0_iter2_reg == 1'd1) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        out2_img_V_blk_n = out2_img_V_full_n;
    end else begin
        out2_img_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((tmp_17_i_reg_1081_pp0_iter2_reg == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        out2_img_V_write = 1'b1;
    end else begin
        out2_img_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (start_full_n == 1'b0))) begin
        real_start = 1'b0;
    end else begin
        real_start = ap_start;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (real_start == 1'b1))) begin
        start_write = 1'b1;
    end else begin
        start_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        width_out_blk_n = width_out_full_n;
    end else begin
        width_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (width_out_full_n == 1'b0) | (height_out_full_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        width_out_write = 1'b1;
    end else begin
        width_out_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((real_start == 1'b0) | (width_out_full_n == 1'b0) | (height_out_full_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((ap_enable_reg_pp0_iter2 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) & ~((ap_enable_reg_pp0_iter2 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter3 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((ap_enable_reg_pp0_iter2 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter3 == 1'b1)) | ((ap_enable_reg_pp0_iter2 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd2];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = (((ap_enable_reg_pp0_iter3 == 1'b1) & (((tmp_17_i_reg_1081_pp0_iter2_reg == 1'd1) & (out2_img_V_full_n == 1'b0)) | ((tmp_17_i_reg_1081_pp0_iter2_reg == 1'd1) & (out1_img_V_full_n == 1'b0)))) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (((inp2_img_V_data_V_0_vld_out == 1'b0) & (ap_predicate_op83_read_state2 == 1'b1)) | ((inp1_img_V_data_V_0_vld_out == 1'b0) & (ap_predicate_op81_read_state2 == 1'b1)))));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((ap_enable_reg_pp0_iter3 == 1'b1) & (((tmp_17_i_reg_1081_pp0_iter2_reg == 1'd1) & (out2_img_V_full_n == 1'b0)) | ((tmp_17_i_reg_1081_pp0_iter2_reg == 1'd1) & (out1_img_V_full_n == 1'b0)))) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (((inp2_img_V_data_V_0_vld_out == 1'b0) & (ap_predicate_op83_read_state2 == 1'b1)) | ((inp1_img_V_data_V_0_vld_out == 1'b0) & (ap_predicate_op81_read_state2 == 1'b1)))));
end

always @ (*) begin
    ap_block_pp0_stage0_11001_ignoreCallOp157 = (((ap_enable_reg_pp0_iter3 == 1'b1) & (((tmp_17_i_reg_1081_pp0_iter2_reg == 1'd1) & (out2_img_V_full_n == 1'b0)) | ((tmp_17_i_reg_1081_pp0_iter2_reg == 1'd1) & (out1_img_V_full_n == 1'b0)))) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (((inp2_img_V_data_V_0_vld_out == 1'b0) & (ap_predicate_op83_read_state2 == 1'b1)) | ((inp1_img_V_data_V_0_vld_out == 1'b0) & (ap_predicate_op81_read_state2 == 1'b1)))));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((ap_enable_reg_pp0_iter3 == 1'b1) & (((tmp_17_i_reg_1081_pp0_iter2_reg == 1'd1) & (out2_img_V_full_n == 1'b0)) | ((tmp_17_i_reg_1081_pp0_iter2_reg == 1'd1) & (out1_img_V_full_n == 1'b0)))) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (((inp2_img_V_data_V_0_vld_out == 1'b0) & (ap_predicate_op83_read_state2 == 1'b1)) | ((inp1_img_V_data_V_0_vld_out == 1'b0) & (ap_predicate_op81_read_state2 == 1'b1)))));
end

always @ (*) begin
    ap_block_state1 = ((real_start == 1'b0) | (width_out_full_n == 1'b0) | (height_out_full_n == 1'b0) | (ap_done_reg == 1'b1));
end

always @ (*) begin
    ap_block_state2_pp0_stage0_iter0 = (((inp2_img_V_data_V_0_vld_out == 1'b0) & (ap_predicate_op83_read_state2 == 1'b1)) | ((inp1_img_V_data_V_0_vld_out == 1'b0) & (ap_predicate_op81_read_state2 == 1'b1)));
end

always @ (*) begin
    ap_block_state2_pp0_stage0_iter0_ignore_call5 = (((inp2_img_V_data_V_0_vld_out == 1'b0) & (ap_predicate_op83_read_state2 == 1'b1)) | ((inp1_img_V_data_V_0_vld_out == 1'b0) & (ap_predicate_op81_read_state2 == 1'b1)));
end

assign ap_block_state3_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter1_ignore_call5 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter2_ignore_call5 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state5_pp0_stage0_iter3 = (((tmp_17_i_reg_1081_pp0_iter2_reg == 1'd1) & (out2_img_V_full_n == 1'b0)) | ((tmp_17_i_reg_1081_pp0_iter2_reg == 1'd1) & (out1_img_V_full_n == 1'b0)));
end

always @ (*) begin
    ap_block_state5_pp0_stage0_iter3_ignore_call5 = (((tmp_17_i_reg_1081_pp0_iter2_reg == 1'd1) & (out2_img_V_full_n == 1'b0)) | ((tmp_17_i_reg_1081_pp0_iter2_reg == 1'd1) & (out1_img_V_full_n == 1'b0)));
end

always @ (*) begin
    ap_condition_433 = ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_phi_reg_pp0_iter0_p_1_i_reg_400 = 'bx;

assign ap_phi_reg_pp0_iter0_p_2_i_reg_412 = 'bx;

always @ (*) begin
    ap_predicate_op157_call_state4 = ((tmp_19_i_reg_1085_pp0_iter1_reg == 1'd1) & (exitcond_flatten_reg_1021_pp0_iter1_reg == 1'd0));
end

always @ (*) begin
    ap_predicate_op81_read_state2 = ((or_cond_i_fu_588_p2 == 1'd1) & (exitcond_flatten_fu_484_p2 == 1'd0));
end

always @ (*) begin
    ap_predicate_op83_read_state2 = ((or_cond_i_fu_588_p2 == 1'd1) & (exitcond_flatten_fu_484_p2 == 1'd0));
end

assign ap_ready = internal_ap_ready;

assign col_fu_630_p2 = (col_i_mid2_fu_495_p3 + 16'd1);

assign col_i_mid2_fu_495_p3 = ((tmp_10_i_fu_479_p2[0:0] === 1'b1) ? col_i_reg_389 : 16'd0);

assign exitcond_flatten_fu_484_p2 = ((indvar_flatten_cast_fu_471_p1 == bound_reg_1016) ? 1'b1 : 1'b0);

assign filt_out1_V_fu_851_p1 = grp_hls_isotropic_kernel_fu_424_ap_return[11:0];

assign grp_fu_867_p0 = grp_fu_867_p00;

assign grp_fu_867_p00 = height;

assign grp_fu_867_p1 = 17'd2;

assign grp_fu_867_p2 = grp_fu_867_p20;

assign grp_fu_867_p20 = tmp_5_i_fu_461_p2;

assign height_out_din = height;

assign icmp1_fu_537_p2 = ((tmp_fu_527_p4 != 15'd0) ? 1'b1 : 1'b0);

assign icmp2_fu_553_p2 = ((tmp_1_fu_543_p4 != 15'd0) ? 1'b1 : 1'b0);

assign icmp_fu_612_p2 = ((tmp_2_fu_602_p4 != 15'd0) ? 1'b1 : 1'b0);

assign indvar_flatten_cast_fu_471_p1 = indvar_flatten_reg_367;

assign indvar_flatten_next_fu_489_p2 = (indvar_flatten_reg_367 + 33'd1);

assign inp1_img_TREADY = inp1_img_V_last_V_0_state[1'd1];

assign inp1_img_V_data_V_0_ack_in = inp1_img_V_data_V_0_state[1'd1];

assign inp1_img_V_data_V_0_load_A = (inp1_img_V_data_V_0_state_cmp_full & ~inp1_img_V_data_V_0_sel_wr);

assign inp1_img_V_data_V_0_load_B = (inp1_img_V_data_V_0_state_cmp_full & inp1_img_V_data_V_0_sel_wr);

assign inp1_img_V_data_V_0_sel = inp1_img_V_data_V_0_sel_rd;

assign inp1_img_V_data_V_0_state_cmp_full = ((inp1_img_V_data_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign inp1_img_V_data_V_0_vld_in = inp1_img_TVALID;

assign inp1_img_V_data_V_0_vld_out = inp1_img_V_data_V_0_state[1'd0];

assign inp1_img_V_last_V_0_vld_in = inp1_img_TVALID;

assign inp2_img_TREADY = inp2_img_V_last_V_0_state[1'd1];

assign inp2_img_V_data_V_0_ack_in = inp2_img_V_data_V_0_state[1'd1];

assign inp2_img_V_data_V_0_load_A = (inp2_img_V_data_V_0_state_cmp_full & ~inp2_img_V_data_V_0_sel_wr);

assign inp2_img_V_data_V_0_load_B = (inp2_img_V_data_V_0_state_cmp_full & inp2_img_V_data_V_0_sel_wr);

assign inp2_img_V_data_V_0_sel = inp2_img_V_data_V_0_sel_rd;

assign inp2_img_V_data_V_0_state_cmp_full = ((inp2_img_V_data_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign inp2_img_V_data_V_0_vld_in = inp2_img_TVALID;

assign inp2_img_V_data_V_0_vld_out = inp2_img_V_data_V_0_state[1'd0];

assign inp2_img_V_last_V_0_vld_in = inp2_img_TVALID;

assign lpf_lines_buffer_V_1_address0 = tmp_13_i_fu_580_p1;

assign lpf_lines_buffer_V_2_address0 = tmp_13_i_fu_580_p1;

assign lpf_lines_buffer_V_3_address0 = tmp_13_i_fu_580_p1;

assign lpf_lines_buffer_V_4_address0 = tmp_13_i_fu_580_p1;

assign lpf_lines_buffer_V_4_address1 = tmp_15_i_fu_822_p1;

assign or_cond_i_fu_588_p2 = (tmp_8_i_mid2_fu_519_p3 & tmp_12_i_fu_575_p2);

assign out1_img_V_din = ap_phi_mux_p_1_i_phi_fu_404_p4;

assign out2_img_V_din = ap_phi_mux_p_2_i_phi_fu_416_p4;

assign p_Result_s_fu_818_p1 = tmp_14_i_fu_810_p3;

assign pixels_0_V_fu_771_p1 = lpf_lines_buffer_V_1_q0;

assign pixels_1_V_fu_775_p1 = lpf_lines_buffer_V_2_q0;

assign pixels_2_V_fu_779_p1 = lpf_lines_buffer_V_3_q0;

assign pixels_3_V_fu_783_p1 = lpf_lines_buffer_V_4_q0;

assign row_fu_503_p2 = (row_i_reg_378 + 16'd1);

assign row_i_mid2_fu_567_p3 = ((tmp_10_i_fu_479_p2[0:0] === 1'b1) ? row_i_reg_378 : row_fu_503_p2);

assign start_out = real_start;

assign tmp_10_i_fu_479_p2 = ((tmp_1_cast_i_fu_475_p1 < tmp_5_i_reg_1011) ? 1'b1 : 1'b0);

assign tmp_12_i_fu_575_p2 = ((col_i_mid2_fu_495_p3 < width) ? 1'b1 : 1'b0);

assign tmp_13_i_fu_580_p1 = col_i_mid2_fu_495_p3;

assign tmp_14_i_fu_810_p3 = {{tmp_data_V_1_reg_1076}, {tmp_V_1_trunc_i_fu_807_p1}};

assign tmp_15_i_fu_822_p1 = col_i_mid2_reg_1030;

assign tmp_17_i_fu_618_p2 = (tmp_9_i_mid2_fu_559_p3 & icmp_fu_612_p2);

assign tmp_19_i_fu_624_p2 = (tmp_17_i_fu_618_p2 & or_cond_i_fu_588_p2);

assign tmp_1_cast_i_fu_475_p1 = col_i_reg_389;

assign tmp_1_fu_543_p4 = {{row_i_reg_378[15:1]}};

assign tmp_2_fu_602_p4 = {{col_i_mid2_fu_495_p3[15:1]}};

assign tmp_4_cast_i_fu_457_p1 = width;

assign tmp_5_i_fu_461_p2 = (tmp_4_cast_i_fu_457_p1 + 17'd2);

assign tmp_8_i_fu_514_p2 = ((row_i_reg_378 < height) ? 1'b1 : 1'b0);

assign tmp_8_i_mid1_fu_509_p2 = ((row_fu_503_p2 < height) ? 1'b1 : 1'b0);

assign tmp_8_i_mid2_fu_519_p3 = ((tmp_10_i_fu_479_p2[0:0] === 1'b1) ? tmp_8_i_fu_514_p2 : tmp_8_i_mid1_fu_509_p2);

assign tmp_9_i_mid2_fu_559_p3 = ((tmp_10_i_fu_479_p2[0:0] === 1'b1) ? icmp2_fu_553_p2 : icmp1_fu_537_p2);

assign tmp_V_1_trunc_i_fu_807_p1 = tmp_data_V_reg_1071;

assign tmp_fu_527_p4 = {{row_fu_503_p2[15:1]}};

assign width_out_din = width;

always @ (posedge ap_clk) begin
    window_0_V_load_reg_1094[23:20] <= 4'b0000;
    window_1_V_load_reg_1099[23:20] <= 4'b0000;
    window_2_V_load_reg_1104[23:20] <= 4'b0000;
    window_22_V_load_reg_1109[11:8] <= 4'b0000;
    window_22_V_load_reg_1109[23:20] <= 4'b0000;
    window_5_V_load_reg_1114[23:20] <= 4'b0000;
    window_6_V_load_reg_1119[23:20] <= 4'b0000;
    window_7_V_load_reg_1124[23:20] <= 4'b0000;
    window_21_V_load_reg_1129[11:8] <= 4'b0000;
    window_21_V_load_reg_1129[23:20] <= 4'b0000;
    window_10_V_load_reg_1134[23:20] <= 4'b0000;
    window_11_V_load_reg_1139[23:20] <= 4'b0000;
    window_12_V_load_reg_1144[23:20] <= 4'b0000;
    window_20_V_load_reg_1149[11:8] <= 4'b0000;
    window_20_V_load_reg_1149[23:20] <= 4'b0000;
    window_15_V_load_reg_1154[23:20] <= 4'b0000;
    window_16_V_load_reg_1159[23:20] <= 4'b0000;
    window_17_V_load_reg_1164[23:20] <= 4'b0000;
    window_23_V_1_reg_1169[11:8] <= 4'b0000;
    window_23_V_1_reg_1169[23:20] <= 4'b0000;
    window_3_V_1_reg_1174[23:20] <= 4'b0000;
    window_8_V_1_reg_1179[23:20] <= 4'b0000;
    window_13_V_1_reg_1184[23:20] <= 4'b0000;
    window_18_V_1_reg_1189[23:20] <= 4'b0000;
    window_0_V_fu_150[23:20] <= 4'b0000;
    window_1_V_fu_154[23:20] <= 4'b0000;
    window_2_V_fu_158[23:20] <= 4'b0000;
    window_22_V_fu_162[11:8] <= 4'b0000;
    window_22_V_fu_162[23:20] <= 4'b0000;
    window_5_V_fu_166[23:20] <= 4'b0000;
    window_6_V_fu_170[23:20] <= 4'b0000;
    window_7_V_fu_174[23:20] <= 4'b0000;
    window_21_V_fu_178[11:8] <= 4'b0000;
    window_21_V_fu_178[23:20] <= 4'b0000;
    window_10_V_fu_182[23:20] <= 4'b0000;
    window_11_V_fu_186[23:20] <= 4'b0000;
    window_12_V_fu_190[23:20] <= 4'b0000;
    window_20_V_fu_194[11:8] <= 4'b0000;
    window_20_V_fu_194[23:20] <= 4'b0000;
    window_15_V_fu_198[23:20] <= 4'b0000;
    window_16_V_fu_202[23:20] <= 4'b0000;
    window_17_V_fu_206[23:20] <= 4'b0000;
    window_23_V_fu_210[11:8] <= 4'b0000;
    window_23_V_fu_210[23:20] <= 4'b0000;
    window_3_V_fu_214[23:20] <= 4'b0000;
    window_8_V_fu_218[23:20] <= 4'b0000;
    window_13_V_fu_222[23:20] <= 4'b0000;
    window_18_V_fu_226[23:20] <= 4'b0000;
end

endmodule //hls_twoIsotropicFilt
